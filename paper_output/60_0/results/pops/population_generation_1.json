[
     {
          "algorithm": "This algorithm prioritizes filling the most occupied truck and item type, using a density score and a modified potential positions generator to minimize fragmentation.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes filling the most occupied truck and item type, using a density score and a modified potential positions generator to minimize fragmentation.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_placement = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n\n        if best_placement:\n            return best_placement['truck_index'], best_placement['item_index'], best_placement['x'], best_placement['y'], best_placement['z'], best_placement['orientation']\n        else:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_placement = None\n        best_score = -1.0  # Initialize with negative value for maximization\n\n        truck_density_scores = self._calculate_truck_density_scores(trucks_in_use, truck_type)\n\n        \n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                for truck_index, truck in enumerate(trucks_in_use):\n                    placement = self._find_placement_in_truck(item, item_index, truck, truck_index, truck_type, truck_density_scores[truck_index])\n                    if placement and placement['score'] > best_score:\n                        best_score = placement['score']\n                        best_placement = placement\n\n                new_truck_placement = self._find_placement_in_new_truck(item, item_index, truck_type)\n                if new_truck_placement and new_truck_placement['score'] > best_score:\n                    best_score = new_truck_placement['score']\n                    best_placement = new_truck_placement\n\n        return best_placement\n\n    def _find_placement_in_truck(self, item, item_index, truck, truck_index, truck_type, truck_density_score):\n        best_placement = None\n        best_score = -1.0\n\n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n            potential_positions = self._generate_potential_positions(truck, truck_type, l, w, h)\n            for px, py, pz in potential_positions:\n                if self._is_valid_placement((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes']):\n                    score = self._calculate_placement_score((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes'], truck_density_score, item['quantity'])\n                    if score > best_score:\n                        best_score = score\n                        best_placement = {\n                            'truck_index': truck_index,\n                            'item_index': item_index,\n                            'x': px,\n                            'y': py,\n                            'z': pz,\n                            'orientation': orientation_index,\n                            'score': score\n                        }\n        return best_placement\n\n    def _find_placement_in_new_truck(self, item, item_index, truck_type):\n        best_placement = None\n        best_score = -1.0\n        empty_truck = {'occupied_volumes': []}\n\n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n            if self._is_valid_placement((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes']):\n                score = self._calculate_placement_score((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes'], 0.0, item['quantity'])\n                if score > best_score:\n                    best_score = score\n                    best_placement = {\n                        'truck_index': -1,\n                        'item_index': item_index,\n                        'x': 0.0,\n                        'y': 0.0,\n                        'z': 0.0,\n                        'orientation': orientation_index,\n                        'score': score\n                    }\n        return best_placement\n\n    def _generate_potential_positions(self, truck, truck_type, l, w, h):\n        potential_positions = []\n        occupied_volumes = truck['occupied_volumes']\n\n        if not occupied_volumes:\n            potential_positions.append((0.0, 0.0, 0.0))\n            return potential_positions\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z']\n            length = placed_item['length']\n            width = placed_item['width']\n            height = placed_item['height']\n\n            potential_positions.append((x + length + self.epsilon, y, z))\n            potential_positions.append((x, y + width + self.epsilon, z))\n            potential_positions.append((x, y, z + height + self.epsilon))\n\n        potential_positions.append((0.0, 0.0, 0.0)) \n\n        return potential_positions\n\n    def _calculate_placement_score(self, item_pos, item_dims, container_dims, occupied_volumes, truck_density_score, item_quantity):\n        volume_utilization = self._calculate_volume_utilization(item_dims, container_dims)\n        item_priority = item_quantity\n\n        fragments_score = self._calculate_fragments_score(item_pos, item_dims, container_dims, occupied_volumes)\n\n        score = (1.0 * truck_density_score +\n                 0.5 * volume_utilization +\n                 0.2 * item_priority -\n                 0.1 * fragments_score)\n\n        return score\n\n    def _calculate_volume_utilization(self, item_dims, container_dims):\n        item_volume = item_dims[0] * item_dims[1] * item_dims[2]\n        container_volume = container_dims[0] * container_dims[1] * container_dims[2]\n        return item_volume / container_volume\n\n    def _calculate_fragments_score(self, item_pos, item_dims, container_dims, occupied_volumes):\n        cl, cw, ch = container_dims\n        px, py, pz = item_pos\n        l, w, h = item_dims\n        \n        fragments = 0\n        \n        if px > self.epsilon: fragments += 1\n        if py > self.epsilon: fragments += 1\n        if pz > self.epsilon: fragments += 1\n        if px + l < cl - self.epsilon: fragments += 1\n        if py + w < cw - self.epsilon: fragments += 1\n        if pz + h < ch - self.epsilon: fragments += 1\n\n        return fragments\n\n    def _calculate_truck_density_scores(self, trucks_in_use, truck_type):\n        truck_density_scores = []\n        container_volume = truck_type[0] * truck_type[1] * truck_type[2]\n        \n        for truck in trucks_in_use:\n            occupied_volume = 0.0\n            for placed_item in truck['occupied_volumes']:\n                occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n            \n            density_score = occupied_volume / container_volume if container_volume > 0 else 0.0\n            truck_density_scores.append(density_score)\n\n        return truck_density_scores\nimport numpy as np\n\nclass AlgorithmFIX1(Algorithm):\n    def _generate_potential_positions(self, truck, truck_type, l, w, h):\n        potential_positions = []\n        occupied_volumes = truck['occupied_volumes']\n        cl, cw, ch = truck_type\n\n        if not occupied_volumes:\n            potential_positions.append((0.0, 0.0, 0.0))\n            return potential_positions\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z']\n            length = placed_item['length']\n            width = placed_item['width']\n            height = placed_item['height']\n\n            new_x = x + length\n            new_y = y + width\n            new_z = z + height\n\n            if new_x + l <= cl + self.epsilon:\n                potential_positions.append((new_x, y, z))\n            if new_y + w <= cw + self.epsilon:\n                potential_positions.append((x, new_y, z))\n            if new_z + h <= ch + self.epsilon:\n                potential_positions.append((x, y, new_z))\n        \n        potential_positions.append((0.0, 0.0, 0.0))\n\n        return potential_positions",
          "objective": 22.3,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     },
     {
          "algorithm": "This algorithm selects items based on volume, places them using a bottom-left-fill heuristic, and opens new trucks as needed.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm selects items based on volume, places them using a bottom-left-fill heuristic, and opens new trucks as needed.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, -1\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_volume = -1\n\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                if volume > best_volume:\n                    best_volume = volume\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = -1\n        best_z_level = float('inf')\n\n        item_to_place = unplaced_items[item_index]\n        orientations = self._get_orientations(item_to_place)\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            occupied_volumes = truck['occupied_volumes']\n\n            for orient_idx, dims in orientations:\n                x, y, z = self._find_bottom_left_position(dims, truck_type, occupied_volumes)\n\n                if x is not None:\n                    if z < best_z_level:\n                        best_z_level = z\n                        best_truck_index = truck_index\n                        best_x, best_y, best_z = x, y, z\n                        best_orientation = orient_idx\n\n        if best_truck_index == -1:\n             for orient_idx, dims in orientations:\n                if self._is_within_container_bounds((0.0, 0.0, 0.0), dims, truck_type):\n                    return -1, 0.0, 0.0, 0.0, orient_idx\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_bottom_left_position(self, item_dims, truck_type, occupied_volumes):\n        container_length, container_width, container_height = truck_type\n        length, width, height = item_dims\n\n        potential_positions = []\n        for z in sorted(list(set([0.0] + [box['z'] + box['height'] for box in occupied_volumes]))):\n            for y in sorted(list(set([0.0] + [box['y'] + box['width'] for box in occupied_volumes]))):\n                for x in sorted(list(set([0.0] + [box['x'] + box['length'] for box in occupied_volumes]))):\n                    if self._is_valid_placement((x, y, z), (length, width, height), truck_type, occupied_volumes):\n                        potential_positions.append((x, y, z))\n        \n        if not potential_positions:\n            return None, None, None\n\n        best_x, best_y, best_z = min(potential_positions, key=lambda p: (p[2], p[1], p[0]))\n        return best_x, best_y, best_z",
          "objective": 24.65,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "The algorithm iterates through unplaced items and available trucks, attempting to place items using a best-fit heuristic based on remaining space and item dimensions.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {The algorithm iterates through unplaced items and available trucks, attempting to place items using a best-fit heuristic based on remaining space and item dimensions.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index = -1\n        item_index = -1\n        x, y, z = 0.0, 0.0, 0.0\n        orientation = 0\n\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n        \n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_item_volume = -1\n\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                if volume > best_item_volume:\n                    best_item_volume = volume\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_best_placement(self, item, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_waste = float('inf')\n\n        for truck_idx, truck in enumerate(trucks_in_use):\n            x, y, z, orientation, waste = self._find_position_in_truck(item, truck, truck_type)\n            if waste < min_waste:\n                min_waste = waste\n                best_truck_index = truck_idx\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n        \n        if best_truck_index == -1:\n            best_x, best_y, best_z, best_orientation, waste = self._find_position_in_new_truck(item, truck_type)\n            \n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_waste = float('inf')\n        \n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n          \n            potential_positions = self._generate_potential_positions(truck, truck_type, l, w, h)\n            for px, py, pz in potential_positions:\n\n                if self._is_valid_placement((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes']):\n                    waste = self._calculate_waste((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes'])\n                    if waste < min_waste:\n                        min_waste = waste\n                        best_x, best_y, best_z = px, py, pz\n                        best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation, min_waste\n    \n    def _find_position_in_new_truck(self, item, truck_type):\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_waste = float('inf')\n        empty_truck = {'occupied_volumes': []}\n        \n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n            if self._is_valid_placement((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes']):\n                waste = self._calculate_waste((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes'])                \n                if waste < min_waste:\n                    min_waste = waste\n                    best_x, best_y, best_z = 0.0, 0.0, 0.0\n                    best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation, min_waste\n          \n    def _generate_potential_positions(self, truck, truck_type, l, w, h):\n        potential_positions = []\n        occupied_volumes = truck['occupied_volumes']\n\n        if not occupied_volumes:\n            potential_positions.append((0.0, 0.0, 0.0))\n            return potential_positions       \n\n        for placed_item in occupied_volumes:\n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z']            \n            length = placed_item['length']\n            width = placed_item['width']\n            height = placed_item['height']\n            \n            potential_positions.append((x + length, y, z))\n            potential_positions.append((x, y + width, z))\n            potential_positions.append((x, y, z + height))                \n        \n        potential_positions.append((0.0, 0.0, 0.0))\n        \n        return potential_positions\n    \n    def _calculate_waste(self, item_pos, item_dims, container_dims, occupied_volumes):\n        px, py, pz = item_pos\n        pl, pw, ph = item_dims\n        cl, cw, ch = container_dims\n        \n        total_container_volume = cl * cw * ch\n        \n        occupied_volume = 0.0\n        for placed_item in occupied_volumes:\n            occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n        occupied_volume += pl * pw * ph\n        waste = total_container_volume - occupied_volume\n        return waste",
          "objective": 24.7,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes placing items into existing trucks, selecting the item and orientation that minimizes wasted space within the available containers, and creates a new truck only when no suitable placement is found.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes placing items into existing trucks, selecting the item and orientation that minimizes wasted space within the available containers, and creates a new truck only when no suitable placement is found.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_placement = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n\n        if best_placement:\n            return best_placement['truck_index'], best_placement['item_index'], best_placement['x'], best_placement['y'], best_placement['z'], best_placement['orientation']\n        else:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_placement = None\n        min_waste = float('inf')\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                for truck_index, truck in enumerate(trucks_in_use):\n                    placement = self._find_placement_in_truck(item, item_index, truck, truck_index, truck_type)\n                    if placement and placement['waste'] < min_waste:\n                        min_waste = placement['waste']\n                        best_placement = placement\n\n                new_truck_placement = self._find_placement_in_new_truck(item, item_index, truck_type)\n                if new_truck_placement and new_truck_placement['waste'] < min_waste:\n                    min_waste = new_truck_placement['waste']\n                    best_placement = new_truck_placement\n        return best_placement\n\n    def _find_placement_in_truck(self, item, item_index, truck, truck_index, truck_type):\n        best_placement = None\n        min_waste = float('inf')\n\n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n            potential_positions = self._generate_potential_positions(truck, truck_type, l, w, h)\n            for px, py, pz in potential_positions:\n                if self._is_valid_placement((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes']):\n                    waste = self._calculate_waste((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes'])\n                    if waste < min_waste:\n                        min_waste = waste\n                        best_placement = {\n                            'truck_index': truck_index,\n                            'item_index': item_index,\n                            'x': px,\n                            'y': py,\n                            'z': pz,\n                            'orientation': orientation_index,\n                            'waste': waste\n                        }\n        return best_placement\n\n    def _find_placement_in_new_truck(self, item, item_index, truck_type):\n        best_placement = None\n        min_waste = float('inf')\n        empty_truck = {'occupied_volumes': []}\n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n            if self._is_valid_placement((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes']):\n                waste = self._calculate_waste((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes'])\n                if waste < min_waste:\n                    min_waste = waste\n                    best_placement = {\n                        'truck_index': -1,\n                        'item_index': item_index,\n                        'x': 0.0,\n                        'y': 0.0,\n                        'z': 0.0,\n                        'orientation': orientation_index,\n                        'waste': waste\n                    }\n        return best_placement\n\n    def _generate_potential_positions(self, truck, truck_type, l, w, h):\n        potential_positions = []\n        occupied_volumes = truck['occupied_volumes']\n\n        if not occupied_volumes:\n            potential_positions.append((0.0, 0.0, 0.0))\n            return potential_positions\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z']\n            length = placed_item['length']\n            width = placed_item['width']\n            height = placed_item['height']\n\n            potential_positions.append((x + length, y, z))\n            potential_positions.append((x, y + width, z))\n            potential_positions.append((x, y, z + height))\n            \n            potential_positions.append((x + length, y + width, z))\n            potential_positions.append((x + length, y, z + height))\n            potential_positions.append((x, y + width, z+ height))\n        \n        potential_positions.append((0.0, 0.0, 0.0))\n\n        return potential_positions\n\n    def _calculate_waste(self, item_pos, item_dims, container_dims, occupied_volumes):\n        px, py, pz = item_pos\n        pl, pw, ph = item_dims\n        cl, cw, ch = container_dims\n\n        total_container_volume = cl * cw * ch\n\n        occupied_volume = 0.0\n        for placed_item in occupied_volumes:\n            occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n        occupied_volume += pl * pw * ph\n        waste = total_container_volume - occupied_volume\n        return waste",
          "objective": 24.75,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes items with remaining quantity and places them based on a score that considers volume and available space, choosing the best fit from all available trucks or opening a new one.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes items with remaining quantity and places them based on a score that considers volume and available space, choosing the best fit from all available trucks or opening a new one.}\n    \n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0, 0, 0, 0\n        \n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_priority = -1\n\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                priority = item['length'] * item['width'] * item['height'] * item['quantity']\n                if priority > max_priority:\n                    max_priority = priority\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = 0\n        best_score = float('-inf')\n        \n        for truck_index in range(len(trucks_in_use)):\n            truck = trucks_in_use[truck_index]\n            x, y, z, orientation, score = self._find_placement_in_truck(unplaced_items, truck, truck_type, item_index)\n            if score > best_score:\n                best_score = score\n                best_truck_index = truck_index\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n\n        if best_truck_index == -1:\n            x, y, z, orientation, score = self._find_placement_in_new_truck(unplaced_items, truck_type, item_index)\n            if score > best_score:\n              return -1, x, y, z, orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_placement_in_truck(self, unplaced_items, truck, truck_type, item_index):\n        item = unplaced_items[item_index]\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = 0\n        best_score = float('-inf')\n        \n        for orientation_index, (orient, dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._find_position_in_truck(dims, truck, truck_type)\n\n            if x is not None and y is not None and z is not None:\n                score = self._evaluate_placement((x, y, z), dims, truck, truck_type)\n                if score > best_score:\n                    best_score = score\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _find_position_in_truck(self, item_dims, truck, truck_type):\n        container_dims = truck_type\n        occupied_volumes = truck['occupied_volumes']\n        \n        length, width, height = item_dims\n\n        for z in sorted(list(set([0] + [box['z'] + box['height'] for box in occupied_volumes]))):\n            for y in sorted(list(set([0] + [box['y'] + box['width'] for box in occupied_volumes]))):\n                for x in sorted(list(set([0] + [box['x'] + box['length'] for box in occupied_volumes]))):\n\n                    if self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                        return x,y,z\n        return None, None, None\n\n    def _find_placement_in_new_truck(self, unplaced_items, truck_type, item_index):\n        item = unplaced_items[item_index]\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = 0\n        best_score = float('-inf')\n\n        for orientation_index, (orient, dims) in enumerate(self._get_orientations(item)):\n            if self._is_within_container_bounds((0,0,0), dims, truck_type):\n              score = self._evaluate_placement((0,0,0), dims, {}, truck_type)\n              if score > best_score:\n                  best_score = score\n                  best_x, best_y, best_z = 0, 0, 0\n                  best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _evaluate_placement(self, position, dimensions, truck, truck_type):\n        x, y, z = position\n        length, width, height = dimensions\n        container_length, container_width, container_height = truck_type\n        \n        volume = length * width * height\n\n        space_utilization_score = volume / (container_length * container_width * container_height) if truck else volume\n        stability_score = -z \n\n        return space_utilization_score + stability_score",
          "objective": 24.95,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]