{
     "algorithm": "This algorithm prioritizes placing items with minimal area waste on the container's bottom surface, favoring orientations that minimize the item's height and selecting items based on a volume-to-quantity ratio.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes placing items with minimal area waste on the container's bottom surface, favoring orientations that minimize the item's height and selecting items based on a volume-to-quantity ratio.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_item_score = -1\n\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                quantity = item['quantity']\n                score = volume / quantity if quantity > 0 else 0  # Volume-to-quantity ratio\n                if score > best_item_score:\n                    best_item_score = score\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_best_placement(self, item, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_area_waste = float('inf')\n\n        for truck_idx, truck in enumerate(trucks_in_use):\n            x, y, z, orientation, area_waste = self._find_position_in_truck(item, truck, truck_type)\n            if area_waste < min_area_waste:\n                min_area_waste = area_waste\n                best_truck_index = truck_idx\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n        \n        if best_truck_index == -1:\n            best_x, best_y, best_z, best_orientation, area_waste = self._find_position_in_new_truck(item, truck_type)\n            if best_x == None:\n              return -1, -1, 0.0, 0.0, 0.0, 0\n            best_truck_index = -1\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_area_waste = float('inf')\n        \n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n            potential_positions = self._generate_potential_positions(truck, truck_type, l, w, h)\n            for px, py, pz in potential_positions:\n\n                if self._is_valid_placement((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes']):\n                    area_waste = self._calculate_area_waste((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes'])\n                    if area_waste < min_area_waste:\n                        min_area_waste = area_waste\n                        best_x, best_y, best_z = px, py, pz\n                        best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation, min_area_waste\n    \n    def _find_position_in_new_truck(self, item, truck_type):\n        best_x, best_y, best_z = None, None, None \n        best_orientation = 0\n        min_area_waste = float('inf')\n        empty_truck = {'occupied_volumes': []}\n        \n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n          \n            if self._is_valid_placement((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes']):\n                area_waste = self._calculate_area_waste((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes'])                \n                if area_waste < min_area_waste:\n                    min_area_waste = area_waste\n                    best_x, best_y, best_z = 0.0, 0.0, 0.0\n                    best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation, min_area_waste\n          \n    def _generate_potential_positions(self, truck, truck_type, l, w, h):\n        potential_positions = []\n        occupied_volumes = truck['occupied_volumes']\n\n        if not occupied_volumes:\n            potential_positions.append((0.0, 0.0, 0.0))\n            return potential_positions       \n\n        for placed_item in occupied_volumes:\n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z']            \n            length = placed_item['length']\n            width = placed_item['width']\n            height = placed_item['height']\n            \n            potential_positions.append((x + length, y, z))\n            potential_positions.append((x, y + width, z))\n            potential_positions.append((x, y, z + height))                \n        \n        potential_positions.append((0.0, 0.0, 0.0))\n        \n        return potential_positions\n\n    def _calculate_area_waste(self, item_pos, item_dims, container_dims, occupied_volumes):\n        px, py, pz = item_pos\n        pl, pw, ph = item_dims\n        cl, cw, ch = container_dims\n        \n        container_base_area = cl * cw\n        \n        occupied_base_area = 0.0\n        for placed_item in occupied_volumes:\n            occupied_base_area += placed_item['length'] * placed_item['width']\n\n        occupied_base_area += pl * pw\n        \n        area_waste = container_base_area - occupied_base_area\n        \n        height_penalty = ph * 0.1 # Penalize taller objects when minimizing base area waste\n        \n        return area_waste + height_penalty",
     "objective": 22.1,
     "other_inf": null,
     "class_name": "Algorithm"
}