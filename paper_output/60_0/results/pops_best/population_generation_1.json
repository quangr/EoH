{
     "algorithm": "This algorithm prioritizes filling the most occupied truck and item type, using a density score and a modified potential positions generator to minimize fragmentation.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes filling the most occupied truck and item type, using a density score and a modified potential positions generator to minimize fragmentation.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_placement = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n\n        if best_placement:\n            return best_placement['truck_index'], best_placement['item_index'], best_placement['x'], best_placement['y'], best_placement['z'], best_placement['orientation']\n        else:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_placement = None\n        best_score = -1.0  # Initialize with negative value for maximization\n\n        truck_density_scores = self._calculate_truck_density_scores(trucks_in_use, truck_type)\n\n        \n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                for truck_index, truck in enumerate(trucks_in_use):\n                    placement = self._find_placement_in_truck(item, item_index, truck, truck_index, truck_type, truck_density_scores[truck_index])\n                    if placement and placement['score'] > best_score:\n                        best_score = placement['score']\n                        best_placement = placement\n\n                new_truck_placement = self._find_placement_in_new_truck(item, item_index, truck_type)\n                if new_truck_placement and new_truck_placement['score'] > best_score:\n                    best_score = new_truck_placement['score']\n                    best_placement = new_truck_placement\n\n        return best_placement\n\n    def _find_placement_in_truck(self, item, item_index, truck, truck_index, truck_type, truck_density_score):\n        best_placement = None\n        best_score = -1.0\n\n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n            potential_positions = self._generate_potential_positions(truck, truck_type, l, w, h)\n            for px, py, pz in potential_positions:\n                if self._is_valid_placement((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes']):\n                    score = self._calculate_placement_score((px, py, pz), (l, w, h), truck_type, truck['occupied_volumes'], truck_density_score, item['quantity'])\n                    if score > best_score:\n                        best_score = score\n                        best_placement = {\n                            'truck_index': truck_index,\n                            'item_index': item_index,\n                            'x': px,\n                            'y': py,\n                            'z': pz,\n                            'orientation': orientation_index,\n                            'score': score\n                        }\n        return best_placement\n\n    def _find_placement_in_new_truck(self, item, item_index, truck_type):\n        best_placement = None\n        best_score = -1.0\n        empty_truck = {'occupied_volumes': []}\n\n        for orientation_index, (orientation_id, (l, w, h)) in enumerate(self._get_orientations(item)):\n            if self._is_valid_placement((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes']):\n                score = self._calculate_placement_score((0.0, 0.0, 0.0), (l, w, h), truck_type, empty_truck['occupied_volumes'], 0.0, item['quantity'])\n                if score > best_score:\n                    best_score = score\n                    best_placement = {\n                        'truck_index': -1,\n                        'item_index': item_index,\n                        'x': 0.0,\n                        'y': 0.0,\n                        'z': 0.0,\n                        'orientation': orientation_index,\n                        'score': score\n                    }\n        return best_placement\n\n    def _generate_potential_positions(self, truck, truck_type, l, w, h):\n        potential_positions = []\n        occupied_volumes = truck['occupied_volumes']\n\n        if not occupied_volumes:\n            potential_positions.append((0.0, 0.0, 0.0))\n            return potential_positions\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z']\n            length = placed_item['length']\n            width = placed_item['width']\n            height = placed_item['height']\n\n            potential_positions.append((x + length + self.epsilon, y, z))\n            potential_positions.append((x, y + width + self.epsilon, z))\n            potential_positions.append((x, y, z + height + self.epsilon))\n\n        potential_positions.append((0.0, 0.0, 0.0)) \n\n        return potential_positions\n\n    def _calculate_placement_score(self, item_pos, item_dims, container_dims, occupied_volumes, truck_density_score, item_quantity):\n        volume_utilization = self._calculate_volume_utilization(item_dims, container_dims)\n        item_priority = item_quantity\n\n        fragments_score = self._calculate_fragments_score(item_pos, item_dims, container_dims, occupied_volumes)\n\n        score = (1.0 * truck_density_score +\n                 0.5 * volume_utilization +\n                 0.2 * item_priority -\n                 0.1 * fragments_score)\n\n        return score\n\n    def _calculate_volume_utilization(self, item_dims, container_dims):\n        item_volume = item_dims[0] * item_dims[1] * item_dims[2]\n        container_volume = container_dims[0] * container_dims[1] * container_dims[2]\n        return item_volume / container_volume\n\n    def _calculate_fragments_score(self, item_pos, item_dims, container_dims, occupied_volumes):\n        cl, cw, ch = container_dims\n        px, py, pz = item_pos\n        l, w, h = item_dims\n        \n        fragments = 0\n        \n        if px > self.epsilon: fragments += 1\n        if py > self.epsilon: fragments += 1\n        if pz > self.epsilon: fragments += 1\n        if px + l < cl - self.epsilon: fragments += 1\n        if py + w < cw - self.epsilon: fragments += 1\n        if pz + h < ch - self.epsilon: fragments += 1\n\n        return fragments\n\n    def _calculate_truck_density_scores(self, trucks_in_use, truck_type):\n        truck_density_scores = []\n        container_volume = truck_type[0] * truck_type[1] * truck_type[2]\n        \n        for truck in trucks_in_use:\n            occupied_volume = 0.0\n            for placed_item in truck['occupied_volumes']:\n                occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n            \n            density_score = occupied_volume / container_volume if container_volume > 0 else 0.0\n            truck_density_scores.append(density_score)\n\n        return truck_density_scores\nimport numpy as np\n\nclass AlgorithmFIX1(Algorithm):\n    def _generate_potential_positions(self, truck, truck_type, l, w, h):\n        potential_positions = []\n        occupied_volumes = truck['occupied_volumes']\n        cl, cw, ch = truck_type\n\n        if not occupied_volumes:\n            potential_positions.append((0.0, 0.0, 0.0))\n            return potential_positions\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z']\n            length = placed_item['length']\n            width = placed_item['width']\n            height = placed_item['height']\n\n            new_x = x + length\n            new_y = y + width\n            new_z = z + height\n\n            if new_x + l <= cl + self.epsilon:\n                potential_positions.append((new_x, y, z))\n            if new_y + w <= cw + self.epsilon:\n                potential_positions.append((x, new_y, z))\n            if new_z + h <= ch + self.epsilon:\n                potential_positions.append((x, y, new_z))\n        \n        potential_positions.append((0.0, 0.0, 0.0))\n\n        return potential_positions",
     "objective": 22.3,
     "other_inf": null,
     "class_name": "AlgorithmFIX1"
}