{
     "algorithm": "Selects the item type with the largest volume and places it in the truck and orientation that minimizes height, prioritizing lower Z positions.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects the item type with the largest volume and places it in the truck and orientation that minimizes height, prioritizing lower Z positions.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = 0\n        min_height = float('inf')\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            for orientation, dims in self._get_orientations(item_type):\n                positions = self._get_potential_positions(dims, truck_type, truck['occupied_volumes'])\n                for x, y, z in positions:\n                    if self._is_valid_placement((x, y, z), dims, truck_type, truck['occupied_volumes']):\n                        height = z + dims[2] \n                        if height < min_height:\n                            min_height = height\n                            best_truck_index = truck_index\n                            best_x, best_y, best_z = x, y, z\n                            best_orientation = orientation\n\n        if best_truck_index == -1:\n            \n            best_x, best_y, best_z = 0, 0, 0\n            min_height = float('inf')\n            for orientation, dims in self._get_orientations(item_type):\n                if self._is_valid_placement((0, 0, 0), dims, truck_type, []):\n                    height = dims[2]\n                    if height < min_height:\n                        min_height = height\n                        best_x, best_y, best_z = 0, 0, 0\n                        best_orientation = orientation\n                        best_truck_index = -1\n                    \n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _get_potential_positions(self, item_dims, container_dims, occupied_volumes):\n        positions = []\n        if not occupied_volumes:\n            return [(0, 0, 0)]\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x'] + placed_item['length']\n            y = placed_item['y']\n            z = placed_item['z']\n            if x + item_dims[0] <= container_dims[0] and self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                positions.append((x, y, z))\n\n            x = placed_item['x']\n            y = placed_item['y'] + placed_item['width']\n            z = placed_item['z']\n            if y + item_dims[1] <= container_dims[1] and self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                positions.append((x, y, z))\n            \n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z'] + placed_item['height']\n            if z + item_dims[2] <= container_dims[2] and self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                positions.append((x, y, z))\n        \n        return positions",
     "objective": 22.1,
     "other_inf": null,
     "class_name": "Algorithm"
}