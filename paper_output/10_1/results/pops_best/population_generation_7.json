{
     "algorithm": "Selects the item with the largest volume and places it using a bottom-left-back heuristic, prioritizing positions that minimize the increase in total z-coordinate of occupied space.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects the item with the largest volume and places it using a bottom-left-back heuristic, prioritizing positions that minimize the increase in total z-coordinate of occupied space.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = 0\n        min_z_increase = float('inf')\n\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0, 0, 0, 0\n\n        item = unplaced_items[item_index]\n\n        for truck_index in range(len(trucks_in_use) + 1):\n            if truck_index == len(trucks_in_use):\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            for orientation, dims in self._get_orientations(item):\n                length, width, height = dims\n\n                possible_positions = self._get_possible_positions(truck_type, occupied_volumes, length, width, height)\n\n                for x, y, z in possible_positions:\n                    if self._is_valid_placement((x, y, z), (length, width, height), truck_type, occupied_volumes):\n                        z_increase = self._calculate_z_increase(occupied_volumes, (x, y, z), (length, width, height))\n\n                        if z_increase < min_z_increase:\n                            min_z_increase = z_increase\n                            best_truck_index = truck_index\n                            best_item_index = item_index\n                            best_x, best_y, best_z = x, y, z\n                            best_orientation = orientation\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = 0\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _get_possible_positions(self, container_dims, occupied_volumes, item_length, item_width, item_height):\n        positions = set()\n        positions.add((0, 0, 0))\n\n        for placed_item in occupied_volumes:\n            positions.add((placed_item['x'] + placed_item['length'], placed_item['y'], placed_item['z']))\n            positions.add((placed_item['x'], placed_item['y'] + placed_item['width'], placed_item['z']))\n            positions.add((placed_item['x'], placed_item['y'], placed_item['z'] + placed_item['height']))\n\n        valid_positions = []\n        for x, y, z in positions:\n             if x + item_length <= container_dims[0] and y + item_width <= container_dims[1] and z + item_height <= container_dims[2]:\n                valid_positions.append((x,y,z))\n\n        return valid_positions\n\n    def _calculate_z_increase(self, occupied_volumes, item_pos, item_dims):\n        x, y, z = item_pos\n        l, w, h = item_dims\n        max_z = 0\n\n        for placed_item in occupied_volumes:\n            max_z = max(max_z, placed_item['z'] + placed_item['height'])\n\n        return max(0, z + h - max_z)\nimport numpy as np\n\nclass AlgorithmFIX1(Algorithm):\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = 0\n        min_z_increase = float('inf')\n\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0, 0, 0, 0\n\n        item = unplaced_items[item_index]\n\n        for truck_index in range(len(trucks_in_use) + 1):\n            if truck_index == len(trucks_in_use):\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            for orientation, dims in self._get_orientations(item):\n                length, width, height = dims\n\n                possible_positions = self._get_possible_positions(truck_type, occupied_volumes, length, width, height)\n\n                for x, y, z in possible_positions:\n                    if self._is_valid_placement((x, y, z), (length, width, height), truck_type, occupied_volumes):\n                        z_increase = self._calculate_z_increase(occupied_volumes, (x, y, z), (length, width, height))\n\n                        if z_increase < min_z_increase:\n                            min_z_increase = z_increase\n                            best_truck_index = truck_index\n                            best_item_index = item_index\n                            best_x, best_y, best_z = x, y, z\n                            best_orientation = orientation\n\n        \n        if best_truck_index == len(trucks_in_use):\n            best_truck_index = -1\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation",
     "objective": 22.05,
     "other_inf": null,
     "class_name": "AlgorithmFIX1"
}