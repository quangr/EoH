[
     {
          "algorithm": "Select an item based on a scoring function combining volume and quantity, iterate through orientations and trucks to find the best placement based on a scoring function that considers space utilization.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select an item based on a scoring function combining volume and quantity, iterate through orientations and trucks to find the best placement based on a scoring function that considers space utilization.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        best_score = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                quantity = item_type['quantity']\n                score = volume * quantity  # Combine volume and quantity\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, utilization_score = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and utilization_score > best_utilization_score:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_utilization_score = utilization_score\n\n        x, y, z, orientation, utilization_score = self._find_position_in_new_truck(item_type, truck_type)\n        if x is not None and utilization_score > best_utilization_score:\n            best_truck_index = -1\n            best_x = x\n            best_y = y\n            best_z = z\n            best_orientation = orientation\n            best_utilization_score = utilization_score\n        \n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n        \n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                utilization_score = self._evaluate_placement(x, y, z, length, width, height, truck_type, occupied_volumes)\n                if utilization_score > best_utilization_score:\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_utilization_score = utilization_score\n        return best_x, best_y, best_z, best_orientation, best_utilization_score\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n        \n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                utilization_score = self._evaluate_placement(0, 0, 0, length, width, height, truck_type, [])\n                if utilization_score > best_utilization_score:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    best_utilization_score = utilization_score\n        return best_x, best_y, best_z, best_orientation, best_utilization_score\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        valid_positions = []\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                valid_positions.append((x, y, z))\n                \n\n        if not valid_positions:\n            return None, None, None\n        \n        return valid_positions[0]\n\n    def _evaluate_placement(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        volume = length * width * height\n        \n        cl, cw, ch = container_dims\n        \n        remaining_space = (cl - (x + length)) * cw * ch + (cw - (y + width)) * cl * ch + (ch - (z + height)) * cl * cw\n        \n        score = volume / (remaining_space + 1e-9)\n        return score",
          "objective": 22.85,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Prioritize filling existing trucks by selecting items based on a volume-based score and packing them using a corner-fitting approach with random orientation.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Prioritize filling existing trucks by selecting items based on a volume-based score and packing them using a corner-fitting approach with random orientation.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items, trucks_in_use, truck_type)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        truck_index, x, y, z, orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = None\n        best_score = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                score = self._evaluate_item_score(item_type, trucks_in_use, truck_type)\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _evaluate_item_score(self, item_type, trucks_in_use, truck_type):\n        item_volume = item_type['length'] * item_type['width'] * item_type['height']\n        \n        total_truck_volume = 0\n        occupied_truck_volume = 0\n        for truck in trucks_in_use:\n            cl, cw, ch = truck_type\n            total_truck_volume += cl * cw * ch\n            for placed_item in truck['occupied_volumes']:\n                occupied_truck_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n\n        if total_truck_volume == 0:\n             return item_volume\n        \n        available_space_ratio = (total_truck_volume - occupied_truck_volume) / total_truck_volume\n        \n        return item_volume * (1 - available_space_ratio)\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fill_rate = -1\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, fill_rate = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and fill_rate > best_fill_rate:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_fill_rate = fill_rate\n\n        x, y, z, orientation, fill_rate = self._find_position_in_new_truck(item_type, truck_type)\n        if x is not None and fill_rate > best_fill_rate:\n            best_truck_index = -1\n            best_x = x\n            best_y = y\n            best_z = z\n            best_orientation = orientation\n            best_fill_rate = fill_rate\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        \n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fill_rate = -1\n        \n        orientations = self._get_orientations(item_type)\n        \n        np.random.shuffle(orientations)\n        \n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_corner_position(length, width, height, truck_type, occupied_volumes)\n                \n            if x is not None:\n                fill_rate = self._evaluate_fill_rate(x, y, z, length, width, height, truck_type, occupied_volumes)\n                    \n                if fill_rate > best_fill_rate:\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_fill_rate = fill_rate\n        return best_x, best_y, best_z, best_orientation, best_fill_rate\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        \n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fill_rate = -1\n        \n        orientations = self._get_orientations(item_type)\n        \n        np.random.shuffle(orientations)\n\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                fill_rate = self._evaluate_fill_rate(0, 0, 0, length, width, height, truck_type, [])\n                if fill_rate > best_fill_rate:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    best_fill_rate = fill_rate\n        return best_x, best_y, best_z, best_orientation, best_fill_rate\n\n    def _find_corner_position(self, length, width, height, container_dims, occupied_volumes):\n        \n        cl, cw, ch = container_dims\n        \n        potential_positions = [(0, 0, 0)] \n\n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return x, y, z\n\n        return None, None, None\n\n    def _evaluate_fill_rate(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        cl, cw, ch = container_dims\n        item_volume = length * width * height\n        container_volume = cl * cw * ch\n        \n        total_occupied_volume = 0\n        for placed_item in occupied_volumes:\n            total_occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n        \n        return item_volume / container_volume",
          "objective": 23.45,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Select the item with the smallest area footprint, iterate through orientations to minimize height, find the first available position using bottom-left-back strategy in existing trucks or a new truck.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select the item with the smallest area footprint, iterate through orientations to minimize height, find the first available position using bottom-left-back strategy in existing trucks or a new truck.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        min_area = float('inf')\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                area = item_type['length'] * item_type['width']\n                if area < min_area:\n                    min_area = area\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_type, trucks_in_use, truck_type):\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        best_orientation = None\n        best_x = None\n        best_y = None\n        best_z = None\n        min_height = float('inf')\n\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_back_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                if height < min_height:\n                    min_height = height\n                    best_orientation = orientation\n                    best_x = x\n                    best_y = y\n                    best_z = z\n\n        if best_x is not None:\n            return best_x, best_y, best_z, best_orientation\n        return None, None, None, None\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        best_orientation = None\n        min_height = float('inf')\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                if height < min_height:\n                    min_height = height\n                    best_orientation = orientation\n        if best_orientation is not None:\n            return 0, 0, 0, best_orientation\n        return None, None, None, None\n    \n    def _find_bottom_left_back_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n        \n        potential_positions.sort(key=lambda pos: (pos[2], pos[1], pos[0]))\n\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return x, y, z\n\n        return None, None, None",
          "objective": 23.6,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Select the item with the smallest area footprint, prioritize orientations with minimum height, and use bottom-left-fill, favoring positions closer to the origin.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select the item with the smallest area footprint, prioritize orientations with minimum height, and use bottom-left-fill, favoring positions closer to the origin.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        min_area = float('inf')\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                area = item_type['length'] * item_type['width']\n                if area < min_area:\n                    min_area = area\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_type, trucks_in_use, truck_type):\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_best_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                return x, y, z, orientation\n        return None, None, None, None\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_best_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                return 0, 0, 0, orientation\n        return None, None, None, None\n\n    def _get_best_orientations(self, item_type):\n        L, W, H = item_type['length'], item_type['width'], item_type['height']\n        orientations = [\n            (0, (L, W, H)), (1, (L, H, W)), (2, (W, L, H)),\n            (3, (W, H, L)), (4, (H, L, W)), (5, (H, W, L))\n        ]\n        return sorted(orientations, key=lambda x: x[1][2])\n\n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        def position_sort_key(pos):\n            x, y, z = pos\n            return x**2 + y**2 + z**2\n\n        for x, y, z in sorted(potential_positions, key=position_sort_key):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return x, y, z\n\n        return None, None, None",
          "objective": 23.65,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Select item with largest volume, prioritize orientations that minimize wasted space, and use bottom-left-back fill, favoring positions that maximize contact area with existing items.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select item with largest volume, prioritize orientations that minimize wasted space, and use bottom-left-back fill, favoring positions that maximize contact area with existing items.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = 0\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_type, trucks_in_use, truck_type):\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_best_orientations(item_type, truck_type, occupied_volumes)\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_best_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                return x, y, z, orientation\n        return None, None, None, None\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_best_orientations(item_type, truck_type, [])\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                return 0, 0, 0, orientation\n        return None, None, None, None\n\n    def _get_best_orientations(self, item_type, container_dims, occupied_volumes):\n        L, W, H = item_type['length'], item_type['width'], item_type['height']\n        orientations = [\n            (0, (L, W, H)), (1, (L, H, W)), (2, (W, L, H)),\n            (3, (W, H, L)), (4, (H, L, W)), (5, (H, W, L))\n        ]\n        \n        def orientation_score(orientation_data):\n            _, (l, w, h) = orientation_data\n            \n            wasted_space = (container_dims[0] - l) * (container_dims[1] - w) * (container_dims[2] - h)\n            \n            return wasted_space\n        \n        return sorted(orientations, key=orientation_score)\n\n    def _find_best_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        def placement_score(pos):\n            x, y, z = pos\n            \n            if not self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return -1\n            \n            contact_area = 0\n            for placed_item in occupied_volumes:\n                px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n                pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n                \n                x_overlap = max(0, min(x + length, px + pl) - max(x, px))\n                y_overlap = max(0, min(y + width, py + pw) - max(y, py))\n                z_overlap = max(0, min(z + height, pz + ph) - max(z, pz))\n                \n                contact_area += x_overlap * y_overlap + x_overlap * z_overlap + y_overlap * z_overlap\n            \n            return contact_area\n\n        scored_positions = [(pos, placement_score(pos)) for pos in potential_positions]\n        valid_scored_positions = [(pos, score) for pos, score in scored_positions if score > -1]\n\n        if not valid_scored_positions:\n            return None, None, None\n\n        best_position = max(valid_scored_positions, key=lambda item: item[1])[0]\n        return best_position[0], best_position[1], best_position[2]",
          "objective": 23.8,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]