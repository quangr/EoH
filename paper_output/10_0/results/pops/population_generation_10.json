[
     {
          "algorithm": "Select the item with largest volume, iterate through orientations to minimize height, find the first available position using bottom-left-back strategy, and then open a new truck if necessary.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select the item with largest volume, iterate through orientations to minimize height, find the first available position using bottom-left-back strategy, and then open a new truck if necessary.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_type, trucks_in_use, truck_type):\n        truck_index, x, y, z, orientation = self._find_position_in_existing_trucks(item_type, trucks_in_use, truck_type)\n        if truck_index is not None:\n            return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_position_in_existing_trucks(self, item_type, trucks_in_use, truck_type):\n         for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                return truck_index, x, y, z, orientation\n         return None, None, None, None, None\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        best_orientation = None\n        best_x = None\n        best_y = None\n        best_z = None\n        min_height = float('inf')\n\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_back_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                if height < min_height:\n                    min_height = height\n                    best_orientation = orientation\n                    best_x = x\n                    best_y = y\n                    best_z = z\n\n        if best_x is not None:\n            return best_x, best_y, best_z, best_orientation\n        return None, None, None, None\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        best_orientation = None\n        min_height = float('inf')\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                if height < min_height:\n                    min_height = height\n                    best_orientation = orientation\n        if best_orientation is not None:\n            return 0, 0, 0, best_orientation\n        return None, None, None, None\n    \n    def _find_bottom_left_back_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n        \n        potential_positions.sort(key=lambda pos: (pos[2], pos[1], pos[0]))\n\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return x, y, z\n\n        return None, None, None",
          "objective": 22.1,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects the item type with the largest volume and attempts to place it using a bottom-left-fill heuristic considering all orientations.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects the item type with the largest volume and attempts to place it using a bottom-left-fill heuristic considering all orientations.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        truck_index, x, y, z, orientation = self._find_placement(item_index, item_type, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_index, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation = self._find_best_position_in_truck(item_index, item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                best_truck_index = truck_index\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n                break\n\n        if best_truck_index is not None:\n            return best_truck_index, best_x, best_y, best_z, best_orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_best_position_in_truck(self, item_index, item_type, truck, truck_type):\n        best_orientation = None\n        best_x, best_y, best_z = None, None, None\n        occupied_volumes = truck['occupied_volumes']\n\n        for orientation, (length, width, height) in self._get_orientations(item_type):\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n                break\n        return best_x, best_y, best_z, best_orientation\n\n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        best_x, best_y, best_z = None, None, None\n        \n        for z in sorted(list(set([0] + [item['z'] + item['height'] for item in occupied_volumes]))):\n            for y in sorted(list(set([0] + [item['y'] + item['width'] for item in occupied_volumes]))):\n                for x in sorted(list(set([0] + [item['x'] + item['length'] for item in occupied_volumes]))):\n                    if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                        return x, y, z\n        return best_x, best_y, best_z\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        best_orientation = None\n        min_height = float('inf')\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                if height < min_height:\n                    min_height = height\n                    best_orientation = orientation\n        if best_orientation is not None:\n            return 0, 0, 0, best_orientation\n        return None, None, None, None",
          "objective": 22.25,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Select an item based on a volume-to-sides ratio scoring function, and place it in the best orientation in either an existing or new truck based on space utilization.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select an item based on a volume-to-sides ratio scoring function, and place it in the best orientation in either an existing or new truck based on space utilization.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        best_score = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                sides_sum = item_type['length'] + item_type['width'] + item_type['height']\n                if sides_sum > 0:\n                    score = volume / sides_sum\n                else:\n                    score = 0\n                \n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, utilization_score = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and utilization_score > best_utilization_score:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_utilization_score = utilization_score\n\n        x, y, z, orientation, utilization_score = self._find_position_in_new_truck(item_type, truck_type)\n        if x is not None and utilization_score > best_utilization_score:\n            best_truck_index = -1\n            best_x = x\n            best_y = y\n            best_z = z\n            best_orientation = orientation\n            best_utilization_score = utilization_score\n        \n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n        \n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                utilization_score = self._evaluate_placement(x, y, z, length, width, height, truck_type, occupied_volumes)\n                if utilization_score > best_utilization_score:\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_utilization_score = utilization_score\n        return best_x, best_y, best_z, best_orientation, best_utilization_score\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n        \n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                utilization_score = self._evaluate_placement(0, 0, 0, length, width, height, truck_type, [])\n                if utilization_score > best_utilization_score:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    best_utilization_score = utilization_score\n        return best_x, best_y, best_z, best_orientation, best_utilization_score\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        valid_positions = []\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                valid_positions.append((x, y, z))\n                \n\n        if not valid_positions:\n            return None, None, None\n        \n        return valid_positions[0]\n\n    def _evaluate_placement(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        volume = length * width * height\n        \n        cl, cw, ch = container_dims\n        \n        remaining_space = (cl - (x + length)) * cw * ch + (cw - (y + width)) * cl * ch + (ch - (z + height)) * cl * cw\n        \n        if remaining_space > 0:\n            score = volume / remaining_space\n        else:\n            score = volume\n        \n        return score",
          "objective": 22.3,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Picks the largest volume item, iterates through orientations to minimize height, and finds the first valid bottom-left-back position using a best-fit scoring based on wasted space.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Picks the largest volume item, iterates through orientations to minimize height, and finds the first valid bottom-left-back position using a best-fit scoring based on wasted space.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_waste = float('inf')\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, waste = self._find_best_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and waste < best_waste:\n                best_waste = waste\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        if x is not None:\n            if best_truck_index is None:\n                return -1, x, y, z, orientation\n            else:\n                return best_truck_index, best_x, best_y, best_z, best_orientation\n        \n        if best_truck_index is not None:\n            return best_truck_index, best_x, best_y, best_z, best_orientation\n\n        return -1, None, None, None, None\n\n    def _find_best_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        best_orientation = None\n        best_x = None\n        best_y = None\n        best_z = None\n        min_waste = float('inf')\n\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_back_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n               waste = self._calculate_waste(x, y, z, length, width, height, truck_type, occupied_volumes)\n               if waste < min_waste:\n                    min_waste = waste\n                    best_orientation = orientation\n                    best_x = x\n                    best_y = y\n                    best_z = z\n\n        if best_x is not None:\n            return best_x, best_y, best_z, best_orientation, min_waste\n        return None, None, None, None, float('inf')\n    \n    def _calculate_waste(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        total_waste = 0\n        total_waste += x\n        total_waste += y\n        total_waste += z\n        total_waste += (container_dims[0] - (x + length))\n        total_waste += (container_dims[1] - (y + width))\n        total_waste += (container_dims[2] - (z + height))\n        return total_waste\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        best_orientation = None\n        min_height = float('inf')\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                if height < min_height:\n                    min_height = height\n                    best_orientation = orientation\n        if best_orientation is not None:\n            return 0, 0, 0, best_orientation\n        return None, None, None, None\n\n    def _find_bottom_left_back_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n        \n        potential_positions.sort(key=lambda pos: (pos[2], pos[1], pos[0]))\n\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return x, y, z\n\n        return None, None, None",
          "objective": 22.4,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects an item based on a scoring function considering volume and quantity, places it using a best-fit heuristic for available positions in trucks, opening a new truck if necessary.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects an item based on a scoring function considering volume and quantity, places it using a best-fit heuristic for available positions in trucks, opening a new truck if necessary.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        truck_index, x, y, z, orientation = self._find_placement(item_index, item_type, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        best_score = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                quantity = item_type['quantity']\n                score = volume * quantity\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_index, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_fit_score = float('inf')\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, fit_score = self._find_best_position_in_truck(item_index, item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and fit_score < best_fit_score:\n                best_truck_index = truck_index\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n                best_fit_score = fit_score\n\n        if best_truck_index is not None:\n            return best_truck_index, best_x, best_y, best_z, best_orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_best_position_in_truck(self, item_index, item_type, truck, truck_type):\n        best_orientation = None\n        best_x, best_y, best_z = None, None, None\n        best_fit_score = float('inf')\n        occupied_volumes = truck['occupied_volumes']\n\n        for orientation, (length, width, height) in self._get_orientations(item_type):\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                fit_score = self._evaluate_placement(x, y, z, length, width, height, truck_type, occupied_volumes)\n                if fit_score < best_fit_score:\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation\n                    best_fit_score = fit_score\n        return best_x, best_y, best_z, best_orientation, best_fit_score\n\n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        best_x, best_y, best_z = None, None, None\n\n        for z in sorted(list(set([0] + [item['z'] + item['height'] for item in occupied_volumes]))):\n            for y in sorted(list(set([0] + [item['y'] + item['width'] for item in occupied_volumes]))):\n                for x in sorted(list(set([0] + [item['x'] + item['length'] for item in occupied_volumes]))):\n                    if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                        return x, y, z\n        return best_x, best_y, best_z\n    \n    def _evaluate_placement(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        remaining_volume = (container_dims[0] - x - length) + (container_dims[1] - y - width) + (container_dims[2] - z - height)\n        return remaining_volume\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        best_orientation = None\n        min_height = float('inf')\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                if height < min_height:\n                    min_height = height\n                    best_orientation = orientation\n        if best_orientation is not None:\n            return 0, 0, 0, best_orientation\n        return None, None, None, None",
          "objective": 22.5,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]