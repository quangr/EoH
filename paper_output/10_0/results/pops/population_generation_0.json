[
     {
          "algorithm": "Select the item with the highest volume, iterate through orientations, find the first available position in existing trucks or a new truck using bottom-left-fill strategy.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select the item with the highest volume, iterate through orientations, find the first available position in existing trucks or a new truck using bottom-left-fill strategy.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_type, trucks_in_use, truck_type):\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                return x, y, z, orientation\n        return None, None, None, None\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                return 0, 0, 0, orientation\n        return None, None, None, None\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return x, y, z\n\n        return None, None, None",
          "objective": 24.7,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "The algorithm prioritizes placing the item type with the fewest possible valid placements across all orientations and trucks.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {The algorithm prioritizes placing the item type with the fewest possible valid placements across all orientations and trucks.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_placement = None\n        min_possible_placements = float('inf')\n\n        for item_index, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                for orientation, item_dims in self._get_orientations(item_type):\n                    for truck_index, truck in enumerate(trucks_in_use):\n                        possible_placements = self._find_possible_placements(item_dims, truck_type, truck['occupied_volumes'])\n                        if possible_placements:\n                            if len(possible_placements) < min_possible_placements:\n                                min_possible_placements = len(possible_placements)\n                                x, y, z = possible_placements[0]\n                                best_placement = (truck_index, item_index, x, y, z, orientation)\n\n                    possible_placements_new_truck = self._find_possible_placements(item_dims, truck_type, [])\n                    if possible_placements_new_truck:\n                        if len(possible_placements_new_truck) < min_possible_placements:\n                            min_possible_placements = len(possible_placements_new_truck)\n                            x, y, z = possible_placements_new_truck[0]\n                            best_placement = (-1, item_index, x, y, z, orientation)\n\n        if best_placement is None:\n            for item_index, item_type in enumerate(unplaced_items):\n                if item_type['quantity'] > 0:\n                    for orientation, item_dims in self._get_orientations(item_type):\n                        possible_placements_new_truck = self._find_possible_placements(item_dims, truck_type, [])\n                        if possible_placements_new_truck:\n                            x, y, z = possible_placements_new_truck[0]\n                            best_placement = (-1, item_index, x, y, z, orientation)\n                            break\n                    if best_placement:\n                        break\n                            \n        if best_placement is None:\n            return -1, 0, 0, 0, 0, 0\n\n        return best_placement\n\n    def _find_possible_placements(self, item_dims, container_dims, occupied_volumes):\n        possible_placements = []\n        cl, cw, ch = container_dims\n        il, iw, ih = item_dims\n\n        for x in np.arange(0, cl - il + self.epsilon, 1):\n            for y in np.arange(0, cw - iw + self.epsilon, 1):\n                for z in np.arange(0, ch - ih + self.epsilon, 1):\n                    x, y, z = round(x, 3), round(y, 3), round(z, 3)\n                    if self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                        possible_placements.append((x, y, z))\n        return possible_placements\nclass AlgorithmFIX1(Algorithm):\n    def _find_possible_placements(self, item_dims, container_dims, occupied_volumes):\n        possible_placements = []\n        cl, cw, ch = container_dims\n        il, iw, ih = item_dims\n\n        x_steps = max(1, int((cl - il + self.epsilon) / il))\n        y_steps = max(1, int((cw - iw + self.epsilon) / iw))\n        z_steps = max(1, int((ch - ih + self.epsilon) / ih))\n    \n        for i in range(x_steps):\n            x = round(i * (cl - il) / (x_steps - 1) if x_steps > 1 else 0, 3) if x_steps > 1 else 0\n            for j in range(y_steps):\n                y = round(j * (cw - iw) / (y_steps - 1) if y_steps > 1 else 0, 3) if y_steps > 1 else 0\n                for k in range(z_steps):\n                    z = round(k * (ch - ih) / (z_steps - 1) if z_steps > 1 else 0, 3) if z_steps > 1 else 0\n                    if self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                        possible_placements.append((x, y, z))\n        return possible_placements",
          "objective": 52.25,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     },
     {
          "algorithm": "Selects the item with the largest volume, tries all orientations in the truck with the least free space, and places it at the bottom-left corner if valid, opens a new truck if needed.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects the item with the largest volume, tries all orientations in the truck with the least free space, and places it at the bottom-left corner if valid, opens a new truck if needed.}\n\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index = -1\n        item_index, orientation, x, y, z = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = -1\n        best_orientation = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n\n        if not unplaced_items:\n            return best_item_index, best_orientation, best_x, best_y, best_z\n        \n        item_index = self._select_item(unplaced_items)\n        best_truck_index = self._select_truck(trucks_in_use, truck_type)\n\n        if best_truck_index == -1:\n            truck_length, truck_width, truck_height = truck_type\n            orientations = self._get_orientations(unplaced_items[item_index])\n            for orientation_index, (orientation, dims) in enumerate(orientations):\n                x = 0\n                y = 0\n                z = 0\n                if self._is_within_container_bounds((x,y,z), dims, truck_type):\n                    best_item_index = item_index\n                    best_orientation = orientation_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    return best_item_index, best_orientation, best_x, best_y, best_z\n\n\n        else:\n            truck = trucks_in_use[best_truck_index]\n            orientations = self._get_orientations(unplaced_items[item_index])\n            truck_dims = truck_type\n            occupied_volumes = truck['occupied_volumes']\n\n            for orientation_index, (orientation, dims) in enumerate(orientations):\n                \n                x = 0\n                y = 0\n                z = 0\n                if self._is_valid_placement((x,y,z), dims, truck_dims, occupied_volumes):\n                    best_item_index = item_index\n                    best_orientation = orientation_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    return best_item_index, best_orientation, best_x, best_y, best_z\n                \n        return item_index, 0, 0, 0, 0\n\n    def _select_item(self, unplaced_items):\n        max_volume = -1\n        selected_index = 0\n        for i, item in enumerate(unplaced_items):\n            volume = item['length'] * item['width'] * item['height']\n            if volume > max_volume and item['quantity'] > 0:\n                max_volume = volume\n                selected_index = i\n        return selected_index\n\n    def _select_truck(self, trucks_in_use, truck_type):\n        best_truck_index = -1\n        min_occupied_volume = float('inf')\n        \n        for i, truck in enumerate(trucks_in_use):\n            length, width, height = truck_type\n            truck_volume = length * width * height\n            occupied_volumes = truck['occupied_volumes']\n            current_occupied_volume = 0\n            for item in occupied_volumes:\n                current_occupied_volume += item['length'] * item['width'] * item['height']\n            \n            if current_occupied_volume < min_occupied_volume:\n                min_occupied_volume = current_occupied_volume\n                best_truck_index = i\n        \n        return best_truck_index\nclass AlgorithmFIX1(Algorithm):\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = -1\n        best_orientation = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_truck_index = -1\n\n        if not unplaced_items:\n            return best_item_index, best_orientation, best_x, best_y, best_z\n\n        for item_index in range(len(unplaced_items)):\n            if unplaced_items[item_index]['quantity'] <= 0:\n                continue\n\n            for truck_index in range(-1, len(trucks_in_use)):\n                if truck_index == -1:\n                    truck_dims = truck_type\n                    occupied_volumes = []\n                else:\n                    truck_dims = truck_type\n                    occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n                orientations = self._get_orientations(unplaced_items[item_index])\n\n                for orientation_index, (orientation, dims) in enumerate(orientations):\n                    \n                    # Iterate through potential positions in the virtual space\n                    # For simplicity, start at (0,0,0) and check only that position in this example\n                    x = 0\n                    y = 0\n                    z = 0\n\n                    if truck_index == -1:\n                        if self._is_within_container_bounds((x, y, z), dims, truck_dims):\n                                is_valid = True\n                        else:\n                            is_valid = False\n\n                    else:\n                        is_valid = self._is_valid_placement((x, y, z), dims, truck_dims, occupied_volumes)\n\n                    if is_valid:\n                        best_item_index = item_index\n                        best_orientation = orientation_index\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_truck_index = truck_index\n                        return best_item_index, best_orientation, best_x, best_y, best_z\n\n        return best_item_index, best_orientation, best_x, best_y, best_z",
          "objective": 101.5,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     }
]