[
     {
          "algorithm": "Select an item based on a scoring function combining volume and quantity, iterate through orientations and trucks to find the best placement based on a scoring function that considers space utilization.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select an item based on a scoring function combining volume and quantity, iterate through orientations and trucks to find the best placement based on a scoring function that considers space utilization.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        best_score = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                quantity = item_type['quantity']\n                score = volume * quantity  # Combine volume and quantity\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, utilization_score = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and utilization_score > best_utilization_score:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_utilization_score = utilization_score\n\n        x, y, z, orientation, utilization_score = self._find_position_in_new_truck(item_type, truck_type)\n        if x is not None and utilization_score > best_utilization_score:\n            best_truck_index = -1\n            best_x = x\n            best_y = y\n            best_z = z\n            best_orientation = orientation\n            best_utilization_score = utilization_score\n        \n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n        \n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                utilization_score = self._evaluate_placement(x, y, z, length, width, height, truck_type, occupied_volumes)\n                if utilization_score > best_utilization_score:\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_utilization_score = utilization_score\n        return best_x, best_y, best_z, best_orientation, best_utilization_score\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n        \n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                utilization_score = self._evaluate_placement(0, 0, 0, length, width, height, truck_type, [])\n                if utilization_score > best_utilization_score:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    best_utilization_score = utilization_score\n        return best_x, best_y, best_z, best_orientation, best_utilization_score\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        valid_positions = []\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                valid_positions.append((x, y, z))\n                \n\n        if not valid_positions:\n            return None, None, None\n        \n        return valid_positions[0]\n\n    def _evaluate_placement(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        volume = length * width * height\n        \n        cl, cw, ch = container_dims\n        \n        remaining_space = (cl - (x + length)) * cw * ch + (cw - (y + width)) * cl * ch + (ch - (z + height)) * cl * cw\n        \n        score = volume / (remaining_space + 1e-9)\n        return score",
          "objective": 22.85,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Select the item with the highest volume, iterate through orientations, find the first available position in existing trucks or a new truck using bottom-left-fill strategy.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select the item with the highest volume, iterate through orientations, find the first available position in existing trucks or a new truck using bottom-left-fill strategy.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_type, trucks_in_use, truck_type):\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                return x, y, z, orientation\n        return None, None, None, None\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                return 0, 0, 0, orientation\n        return None, None, None, None\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return x, y, z\n\n        return None, None, None",
          "objective": 24.7,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Select item based on a quantity-focused score, then find the best position prioritizing lower z and smaller x, y within existing or new truck, and evaluate based on fill ratio.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select item based on a quantity-focused score, then find the best position prioritizing lower z and smaller x, y within existing or new truck, and evaluate based on fill ratio.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        best_score = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                quantity = item_type['quantity']\n                score = quantity # Prioritize quantity over volume\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fill_ratio = -1\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, fill_ratio = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and fill_ratio > best_fill_ratio:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_fill_ratio = fill_ratio\n\n        x, y, z, orientation, fill_ratio = self._find_position_in_new_truck(item_type, truck_type)\n        if x is not None and fill_ratio > best_fill_ratio:\n            best_truck_index = -1\n            best_x = x\n            best_y = y\n            best_z = z\n            best_orientation = orientation\n            best_fill_ratio = fill_ratio\n        \n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fill_ratio = -1\n        \n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                fill_ratio = self._evaluate_placement(x, y, z, length, width, height, truck_type, occupied_volumes)\n                if fill_ratio > best_fill_ratio:\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_fill_ratio = fill_ratio\n        return best_x, best_y, best_z, best_orientation, best_fill_ratio\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fill_ratio = -1\n        \n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                fill_ratio = self._evaluate_placement(0, 0, 0, length, width, height, truck_type, [])\n                if fill_ratio > best_fill_ratio:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    best_fill_ratio = fill_ratio\n        return best_x, best_y, best_z, best_orientation, best_fill_ratio\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n\n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n        \n        valid_positions = []\n        for x, y, z in sorted(potential_positions, key=lambda pos: (pos[2], pos[0], pos[1])):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                valid_positions.append((x, y, z))\n        \n\n        if not valid_positions:\n            return None, None, None\n        \n        return valid_positions[0]\n\n    def _evaluate_placement(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        volume = length * width * height\n        cl, cw, ch = container_dims\n        container_volume = cl * cw * ch\n        \n        total_occupied_volume = sum((item['length'] * item['width'] * item['height'] for item in occupied_volumes))\n        new_total_occupied_volume = total_occupied_volume + volume\n        \n        fill_ratio = new_total_occupied_volume / container_volume\n        return fill_ratio",
          "objective": 25.05,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Select item based on quantity, prioritize placements in existing trucks using a space-filling score, and create new trucks only when necessary.",
          "code": "import numpy as np\n\n\nclass Algorithm(BaseAlgorithm):\n    # {Select item based on quantity, prioritize placements in existing trucks using a space-filling score, and create new trucks only when necessary.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(\n            item_type, trucks_in_use, truck_type\n        )\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        best_quantity = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type[\"quantity\"] > 0:\n                quantity = item_type[\"quantity\"]\n                if quantity > best_quantity:\n                    best_quantity = quantity\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = -1\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, score = self._find_position_in_truck(\n                item_type, trucks_in_use[truck_index], truck_type\n            )\n            if x is not None and score > best_score:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_score = score\n\n        if best_score == -1:\n            x, y, z, orientation, score = self._find_position_in_new_truck(\n                item_type, truck_type\n            )\n            if x is not None:\n                best_truck_index = -1\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_score = score\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck[\"occupied_volumes\"]\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = -1\n\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(\n                length, width, height, truck_type, occupied_volumes\n            )\n            if x is not None:\n                score = self._evaluate_placement(\n                    x, y, z, length, width, height, truck_type, occupied_volumes\n                )\n                if score > best_score:\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_score = score\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = -1\n\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                score = self._evaluate_placement(\n                    0, 0, 0, length, width, height, truck_type, []\n                )\n                if score > best_score:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    best_score = score\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n\n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item[\"x\"], placed_item[\"y\"], placed_item[\"z\"]\n            pl, pw, ph = placed_item[\"length\"], placed_item[\"width\"], placed_item[\"height\"]\n\n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        valid_positions = []\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement(\n                (x, y, z), (length, width, height), container_dims, occupied_volumes\n            ):\n                valid_positions.append((x, y, z))\n\n        if not valid_positions:\n            return None, None, None\n\n        return valid_positions[0]\n\n    def _evaluate_placement(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        volume = length * width * height\n        cl, cw, ch = container_dims\n        utilization = volume / (cl * cw * ch)\n        space_fill_score = 0\n        for item in occupied_volumes:\n          if item['x'] < x + length and item['x'] + item['length'] > x:\n             if item['y'] < y + width and item['y'] + item['width'] > y:\n                space_fill_score +=1\n        return utilization * 10 + space_fill_score",
          "objective": 25.2,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Select the item with the largest footprint (area) and attempts to place it using a best-fit heuristic, prioritizing existing trucks and minimizing wasted space.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select the item with the largest footprint (area) and attempts to place it using a best-fit heuristic, prioritizing existing trucks and minimizing wasted space.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_area = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                area = item_type['length'] * item_type['width']\n                if area > max_area:\n                    max_area = area\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        min_waste = float('inf')\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, waste = self._find_placement_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and waste < min_waste:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                min_waste = waste\n\n        x, y, z, orientation, waste = self._find_placement_in_new_truck(item_type, truck_type)\n        if x is not None and waste < min_waste:\n            best_truck_index = -1\n            best_x = x\n            best_y = y\n            best_z = z\n            best_orientation = orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_placement_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        min_waste = float('inf')\n        \n        for orientation, (length, width, height) in self._get_orientations(item_type):\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                waste = self._calculate_waste(x, y, z, length, width, height, truck_type)\n                if waste < min_waste:\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    min_waste = waste\n\n        if best_x is not None:\n            return best_x, best_y, best_z, best_orientation, min_waste\n        else:\n            return None, None, None, None, float('inf')\n\n    def _find_placement_in_new_truck(self, item_type, truck_type):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        min_waste = float('inf')\n\n        for orientation, (length, width, height) in self._get_orientations(item_type):\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                waste = self._calculate_waste(0, 0, 0, length, width, height, truck_type)\n                if waste < min_waste:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    min_waste = waste\n\n        if best_x is not None:\n            return best_x, best_y, best_z, best_orientation, min_waste\n        else:\n            return None, None, None, None, float('inf')\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        valid_positions = []\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                valid_positions.append((x, y, z))\n        \n        if valid_positions:\n            return valid_positions[0]\n        else:\n            return None, None, None\n    \n    def _calculate_waste(self, x, y, z, length, width, height, container_dims):\n        cl, cw, ch = container_dims\n        return (cl - (x + length)) + (cw - (y + width)) + (ch - (z + height))",
          "objective": 25.25,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]