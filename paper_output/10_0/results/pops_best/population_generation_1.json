{
     "algorithm": "Select the item with the highest volume, iterate through orientations, find the first available position in existing trucks or a new truck using bottom-left-fill strategy.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select the item with the highest volume, iterate through orientations, find the first available position in existing trucks or a new truck using bottom-left-fill strategy.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n\n        truck_index, x, y, z, orientation = self._find_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item_type, trucks_in_use, truck_type):\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                return x, y, z, orientation\n        return None, None, None, None\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                return 0, 0, 0, orientation\n        return None, None, None, None\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                return x, y, z\n\n        return None, None, None",
     "objective": 24.7,
     "other_inf": null,
     "class_name": "Algorithm"
}