{
     "algorithm": "Select an item based on a scoring function combining volume and quantity, iterate through orientations and trucks to find the best placement based on a scoring function that considers space utilization.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Select an item based on a scoring function combining volume and quantity, iterate through orientations and trucks to find the best placement based on a scoring function that considers space utilization.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        best_score = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                quantity = item_type['quantity']\n                score = volume * quantity  # Combine volume and quantity\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n\n        for truck_index in range(len(trucks_in_use)):\n            x, y, z, orientation, utilization_score = self._find_position_in_truck(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None and utilization_score > best_utilization_score:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_utilization_score = utilization_score\n\n        x, y, z, orientation, utilization_score = self._find_position_in_new_truck(item_type, truck_type)\n        if x is not None and utilization_score > best_utilization_score:\n            best_truck_index = -1\n            best_x = x\n            best_y = y\n            best_z = z\n            best_orientation = orientation\n            best_utilization_score = utilization_score\n        \n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        occupied_volumes = truck['occupied_volumes']\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n        \n        for orientation, (length, width, height) in orientations:\n            x, y, z = self._find_bottom_left_position(length, width, height, truck_type, occupied_volumes)\n            if x is not None:\n                utilization_score = self._evaluate_placement(x, y, z, length, width, height, truck_type, occupied_volumes)\n                if utilization_score > best_utilization_score:\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_utilization_score = utilization_score\n        return best_x, best_y, best_z, best_orientation, best_utilization_score\n\n    def _find_position_in_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_utilization_score = -1\n        \n        for orientation, (length, width, height) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                utilization_score = self._evaluate_placement(0, 0, 0, length, width, height, truck_type, [])\n                if utilization_score > best_utilization_score:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    best_utilization_score = utilization_score\n        return best_x, best_y, best_z, best_orientation, best_utilization_score\n    \n    def _find_bottom_left_position(self, length, width, height, container_dims, occupied_volumes):\n        potential_positions = [(0, 0, 0)]\n        \n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n            \n            potential_positions.append((px + pl, py, pz))\n            potential_positions.append((px, py + pw, pz))\n            potential_positions.append((px, py, pz + ph))\n\n        valid_positions = []\n        for x, y, z in sorted(potential_positions):\n            if self._is_valid_placement((x, y, z), (length, width, height), container_dims, occupied_volumes):\n                valid_positions.append((x, y, z))\n                \n\n        if not valid_positions:\n            return None, None, None\n        \n        return valid_positions[0]\n\n    def _evaluate_placement(self, x, y, z, length, width, height, container_dims, occupied_volumes):\n        volume = length * width * height\n        \n        cl, cw, ch = container_dims\n        \n        remaining_space = (cl - (x + length)) * cw * ch + (cw - (y + width)) * cl * ch + (ch - (z + height)) * cl * cw\n        \n        score = volume / (remaining_space + 1e-9)\n        return score",
     "objective": 22.85,
     "other_inf": null,
     "class_name": "Algorithm"
}