{
     "algorithm": "Selects items based on remaining quantity and volume, tries orientations, places if valid, else repeats with next best item/orientation and opens new trucks when necessary.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects items based on remaining quantity and volume, tries orientations, places if valid, else repeats with next best item/orientation and opens new trucks when necessary.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index = -1\n        item_index = -1\n        x = 0\n        y = 0\n        z = 0\n        orientation = 0\n\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0, 0, 0, 0\n\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(\n            unplaced_items[item_index], trucks_in_use, truck_type\n        )\n\n        if best_truck_index == -1:\n            truck_index = -1\n            x = 0\n            y = 0\n            z = 0\n            orientation = best_orientation\n        else:\n            truck_index = best_truck_index\n            x = best_x\n            y = best_y\n            z = best_z\n            orientation = best_orientation\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_score = -1\n\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                score = item['quantity'] * volume\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_x = 0\n        best_y = 0\n        best_z = 0\n        best_orientation = 0\n        best_volume_utilization = -1\n\n        for truck_index in range(len(trucks_in_use)):\n            occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n            for orientation, dims in self._get_orientations(item_type):\n                length, width, height = dims\n\n                potential_positions = self._generate_potential_positions(truck_type, length, width, height, occupied_volumes)\n                for x, y, z in potential_positions:\n                    if self._is_valid_placement((x, y, z), (length, width, height), truck_type, occupied_volumes):\n                        volume_utilization = length * width * height\n                        if volume_utilization > best_volume_utilization:\n                            best_volume_utilization = volume_utilization\n                            best_truck_index = truck_index\n                            best_x = x\n                            best_y = y\n                            best_z = z\n                            best_orientation = orientation\n\n        if best_truck_index == -1:\n            for orientation, dims in self._get_orientations(item_type):\n                length, width, height = dims\n                if self._is_valid_placement((0, 0, 0), (length, width, height), truck_type, []):\n                    best_truck_index = -1\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation\n                    break\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _generate_potential_positions(self, container_dims, length, width, height, occupied_volumes):\n        potential_positions = []\n        if not occupied_volumes:\n            return [(0,0,0)]\n        \n        for item in occupied_volumes:\n            x = item['x'] + item['length']\n            y = item['y']\n            z = item['z']\n            potential_positions.append((x, y, z))\n            \n            x = item['x']\n            y = item['y'] + item['width']\n            z = item['z']\n            potential_positions.append((x, y, z))\n            \n            x = item['x']\n            y = item['y']\n            z = item['z'] + item['height']\n            potential_positions.append((x, y, z))\n\n        return potential_positions",
     "objective": 24.7,
     "other_inf": null,
     "class_name": "Algorithm"
}