[
     {
          "algorithm": "Greedily place items based on remaining quantity, selecting the best-fit position and orientation that minimizes dead space in existing trucks or opens a new one if no fit is found.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Greedily place items based on remaining quantity, selecting the best-fit position and orientation that minimizes dead space in existing trucks or opens a new one if no fit is found.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        truck_index, x, y, z, orientation = self._find_best_placement(item_index, unplaced_items, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        eligible_items = [i for i, item in enumerate(unplaced_items) if item['quantity'] > 0]\n        if not eligible_items:\n            return None\n        return max(eligible_items, key=lambda i: unplaced_items[i]['quantity'])\n\n    def _find_best_placement(self, item_index, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = -1\n        min_dead_space = float('inf')\n\n        for truck_index in range(len(trucks_in_use) + 1):\n            if truck_index < len(trucks_in_use):\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n            else:\n                occupied_volumes = []\n\n            for orientation in range(6):\n                item_type = unplaced_items[item_index]\n                item_dims = self._get_orientations(item_type)[orientation][1]\n                x, y, z = self._find_position_in_truck(item_dims, truck_type, occupied_volumes)\n\n                if x is not None:\n                    dead_space = self._calculate_dead_space(x, y, z, item_dims, truck_type, occupied_volumes)\n                    if dead_space < min_dead_space:\n                        min_dead_space = dead_space\n                        best_truck_index = truck_index\n                        best_x, best_y, best_z = x, y, z\n                        best_orientation = orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_dims, truck_type, occupied_volumes):\n        potential_positions = self._generate_potential_positions(occupied_volumes)\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                return x, y, z\n        return None, None, None\n\n    def _generate_potential_positions(self, occupied_volumes):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            x, y, z = item['x'], item['y'], item['z']\n            l, w, h = item['length'], item['width'], item['height']\n            positions.extend([(x + l, y, z), (x, y + w, z), (x, y, z + h)])\n        return positions\n\n    def _calculate_dead_space(self, x, y, z, item_dims, container_dims, occupied_volumes):\n        cl, cw, ch = container_dims\n        il, iw, ih = item_dims\n        return (cl - (x + il)) * (cw - (y + iw)) * (ch - (z + ih))\nimport numpy as np\n\nclass AlgorithmFIX1(Algorithm):\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        truck_index, x, y, z, orientation = self._find_best_placement(item_index, unplaced_items, trucks_in_use, truck_type)\n\n        if truck_index == len(trucks_in_use):\n            truck_index = -1\n\n        return truck_index, item_index, x, y, z, orientation",
          "objective": 23.2,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     },
     {
          "algorithm": "Prioritizes filling each truck, selecting the item and orientation that minimizes empty space along the shortest container dimension after placement.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Prioritizes filling each truck, selecting the item and orientation that minimizes empty space along the shortest container dimension after placement.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        best_truck_index, best_orientation, best_x, best_y, best_z = self._find_best_placement(item_index, unplaced_items, trucks_in_use, truck_type)\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item_to_place(self, unplaced_items):\n        eligible_items = [i for i, item in enumerate(unplaced_items) if item['quantity'] > 0]\n        if not eligible_items:\n            return None\n        return max(eligible_items, key=lambda i: unplaced_items[i]['length'] * unplaced_items[i]['width'] * unplaced_items[i]['height'])\n\n    def _find_best_placement(self, item_index, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_orientation = -1\n        best_x, best_y, best_z = 0, 0, 0\n        min_waste = float('inf')\n\n        for truck_index in range(len(trucks_in_use) + 1):\n            occupied_volumes = trucks_in_use[truck_index]['occupied_volumes'] if truck_index < len(trucks_in_use) else []\n            for orientation in range(6):\n                item_type = unplaced_items[item_index]\n                item_dims = self._get_orientations(item_type)[orientation][1]\n                position = self._find_valid_position(item_dims, truck_type, occupied_volumes)\n                if position:\n                    x, y, z = position\n                    waste = self._calculate_waste(x, y, z, item_dims, truck_type, occupied_volumes)\n\n                    if waste < min_waste:\n                        min_waste = waste\n                        best_truck_index = truck_index\n                        best_orientation = orientation\n                        best_x, best_y, best_z = x, y, z\n\n        return best_truck_index, best_orientation, best_x, best_y, best_z\n\n    def _find_valid_position(self, item_dims, container_dims, occupied_volumes):\n        potential_positions = self._generate_potential_positions(occupied_volumes)\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                return x, y, z\n        return None\n\n    def _generate_potential_positions(self, occupied_volumes):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            x, y, z = item['x'], item['y'], item['z']\n            l, w, h = item['length'], item['width'], item['height']\n            positions.extend([(x + l, y, z), (x, y + w, z), (x, y, z + h)])\n        return positions\n\n    def _calculate_waste(self, x, y, z, item_dims, container_dims, occupied_volumes):\n        cl, cw, ch = container_dims\n        il, iw, ih = item_dims\n        \n        remaining_length = cl - (x + il)\n        remaining_width = cw - (y + iw)\n        remaining_height = ch - (z + ih)\n        \n        return min(remaining_length, remaining_width, remaining_height)\nclass AlgorithmFIX1(Algorithm):\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        best_truck_index, best_orientation, best_x, best_y, best_z = self._find_best_placement(item_index, unplaced_items, trucks_in_use, truck_type)\n        if best_truck_index == len(trucks_in_use):\n            best_truck_index = -1\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation",
          "objective": 23.25,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     },
     {
          "algorithm": "Prioritizes filling containers by placing items based on a space-filling heuristic, favoring orientations and positions that minimize wasted space within each layer.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Prioritizes filling containers by placing items based on a space-filling heuristic, favoring orientations and positions that minimize wasted space within each layer.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        best_placement = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n\n        if best_placement:\n            return (best_placement['truck_index'], item_index, best_placement['x'],\n                    best_placement['y'], best_placement['z'], best_placement['orientation'])\n        else:\n            return -1, -1, 0, 0, 0, 0\n\n    def _select_item_to_place(self, unplaced_items):\n        eligible_items = [i for i, item in enumerate(unplaced_items) if item['quantity'] > 0]\n        if not eligible_items:\n            return None\n        return max(eligible_items, key=lambda i: unplaced_items[i]['length'] * unplaced_items[i]['width'] * unplaced_items[i]['height'])\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_placement = None\n        min_waste = float('inf')\n\n        for truck_index in range(len(trucks_in_use) + 1):\n            truck = trucks_in_use[truck_index] if truck_index < len(trucks_in_use) else {'occupied_volumes': []}\n\n            for orientation in range(6):\n                item_type = unplaced_items[item_index]\n                item_dims = self._get_orientations(item_type)[orientation][1]\n                position = self._find_valid_position(item_type, orientation, truck_type, truck['occupied_volumes'])\n\n                if position:\n                    x, y, z = position\n                    waste = self._calculate_waste(x, y, z, item_dims, truck_type, truck['occupied_volumes'])\n\n                    if waste < min_waste:\n                        min_waste = waste\n                        best_placement = {\n                            'truck_index': truck_index,\n                            'x': x,\n                            'y': y,\n                            'z': z,\n                            'orientation': orientation\n                        }\n        return best_placement\n\n    def _find_valid_position(self, item_type, orientation, container_dims, occupied_volumes):\n        item_dims = self._get_orientations(item_type)[orientation][1]\n        cl, cw, ch = container_dims\n\n        potential_positions = self._generate_potential_positions(occupied_volumes)\n\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                return x, y, z\n        return None\n\n    def _generate_potential_positions(self, occupied_volumes):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            x, y, z = item['x'], item['y'], item['z']\n            l, w, h = item['length'], item['width'], item['height']\n            positions.extend([(x + l, y, z), (x, y + w, z), (x, y, z + h)])\n        return positions\n\n    def _calculate_waste(self, x, y, z, item_dims, container_dims, occupied_volumes):\n        cl, cw, ch = container_dims\n        il, iw, ih = item_dims\n        total_waste = (cl - (x + il)) * (cw - (y + iw)) * (ch - (z + ih))\n        return total_waste\nclass AlgorithmFIX1(Algorithm):\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        best_placement = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n\n        if best_placement:\n            truck_index = best_placement['truck_index']\n            if truck_index == len(trucks_in_use):\n                truck_index = -1\n            return (truck_index, item_index, best_placement['x'],\n                    best_placement['y'], best_placement['z'], best_placement['orientation'])\n        else:\n            return -1, -1, 0, 0, 0, 0",
          "objective": 23.4,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     },
     {
          "algorithm": "Prioritize item selection based on volume and choose the placement that minimizes the remaining area on the placement surface (x-y plane) of the current truck.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Prioritize item selection based on volume and choose the placement that minimizes the remaining area on the placement surface (x-y plane) of the current truck.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        truck_index, x, y, z, orientation = self._find_best_placement(item_index, unplaced_items, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        eligible_items = [i for i, item in enumerate(unplaced_items) if item['quantity'] > 0]\n        if not eligible_items:\n            return None\n        return max(eligible_items, key=lambda i: unplaced_items[i]['length'] * unplaced_items[i]['width'] * unplaced_items[i]['height'])\n    \n    def _find_best_placement(self, item_index, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = -1\n        min_remaining_area = float('inf')\n\n        for truck_index in range(len(trucks_in_use) + 1):\n            if truck_index < len(trucks_in_use):\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n            else:\n                occupied_volumes = []\n\n            for orientation in range(6):\n                item_type = unplaced_items[item_index]\n                item_dims = self._get_orientations(item_type)[orientation][1]\n                x, y, z = self._find_position_in_truck(item_dims, truck_type, occupied_volumes)\n\n                if x is not None:\n                    remaining_area = self._calculate_remaining_area(x, y, item_dims, truck_type, occupied_volumes)\n                    if remaining_area < min_remaining_area:\n                        min_remaining_area = remaining_area\n                        best_truck_index = truck_index\n                        best_x, best_y, best_z = x, y, z\n                        best_orientation = orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_dims, truck_type, occupied_volumes):\n        potential_positions = self._generate_potential_positions(occupied_volumes)\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                return x, y, z\n        return None, None, None\n\n    def _generate_potential_positions(self, occupied_volumes):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            x, y, z = item['x'], item['y'], item['z']\n            l, w, h = item['length'], item['width'], item['height']\n            positions.extend([(x + l, y, z), (x, y + w, z), (x, y, z + h)])\n        return positions\n\n    def _calculate_remaining_area(self, x, y, item_dims, container_dims, occupied_volumes):\n        cl, cw, ch = container_dims\n        il, iw, ih = item_dims\n        remaining_x = cl - (x + il)\n        remaining_y = cw - (y + iw)\n        return remaining_x * remaining_y\nimport numpy as np\n\nclass AlgorithmFIX1(Algorithm):\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        truck_index, x, y, z, orientation = self._find_best_placement(item_index, unplaced_items, trucks_in_use, truck_type)\n\n        if truck_index == len(trucks_in_use):\n            truck_index = -1\n\n        return truck_index, item_index, x, y, z, orientation",
          "objective": 23.6,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     },
     {
          "algorithm": "Places the item that best fills the largest available space, choosing placement based on minimizing the remaining bounding box volume.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Places the item that best fills the largest available space, choosing placement based on minimizing the remaining bounding box volume.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n        best_truck_index, best_orientation, best_x, best_y, best_z = self._find_best_placement(item_index, unplaced_items, trucks_in_use, truck_type)\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item_to_place(self, unplaced_items):\n        eligible_items = [i for i, item in enumerate(unplaced_items) if item['quantity'] > 0]\n        if not eligible_items:\n            return None\n        return max(eligible_items, key=lambda i: unplaced_items[i]['length'] * unplaced_items[i]['width'] * unplaced_items[i]['height'])\n\n    def _find_best_placement(self, item_index, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_orientation = -1\n        best_x, best_y, best_z = 0, 0, 0\n        min_remaining_volume = float('inf')\n\n        for truck_index in range(len(trucks_in_use) + 1):\n            occupied_volumes = trucks_in_use[truck_index]['occupied_volumes'] if truck_index < len(trucks_in_use) else []\n            for orientation in range(6):\n                item_type = unplaced_items[item_index]\n                item_dims = self._get_orientations(item_type)[orientation][1]\n                position = self._find_valid_position(item_dims, truck_type, occupied_volumes)\n                if position:\n                    x, y, z = position\n                    remaining_volume = self._calculate_remaining_volume(x, y, z, item_dims, truck_type, occupied_volumes)\n\n                    if remaining_volume < min_remaining_volume:\n                        min_remaining_volume = remaining_volume\n                        best_truck_index = truck_index\n                        best_orientation = orientation\n                        best_x, best_y, best_z = x, y, z\n\n        return best_truck_index, best_orientation, best_x, best_y, best_z\n\n    def _find_valid_position(self, item_dims, container_dims, occupied_volumes):\n        potential_positions = self._generate_potential_positions(occupied_volumes)\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), item_dims, container_dims, occupied_volumes):\n                return x, y, z\n        return None\n\n    def _generate_potential_positions(self, occupied_volumes):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            x, y, z = item['x'], item['y'], item['z']\n            l, w, h = item['length'], item['width'], item['height']\n            positions.extend([(x + l, y, z), (x, y + w, z), (x, y, z + h)])\n        return positions\n\n    def _calculate_remaining_volume(self, x, y, z, item_dims, container_dims, occupied_volumes):\n        cl, cw, ch = container_dims\n        il, iw, ih = item_dims\n        max_x = 0.0\n        max_y = 0.0\n        max_z = 0.0\n        for item in occupied_volumes:\n            max_x = max(max_x, item['x'] + item['length'])\n            max_y = max(max_y, item['y'] + item['width'])\n            max_z = max(max_z, item['z'] + item['height'])\n\n        max_x = max(max_x, x + il)\n        max_y = max(max_y, y + iw)\n        max_z = max(max_z, z + ih)\n        \n        return (cl - max_x) * (cw - max_y) * (ch - max_z)\nclass AlgorithmFIX1(Algorithm):\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        best_truck_index, best_orientation, best_x, best_y, best_z = self._find_best_placement(item_index, unplaced_items, trucks_in_use, truck_type)\n        if best_truck_index == len(trucks_in_use):\n            best_truck_index = -1\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation",
          "objective": 23.8,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     }
]