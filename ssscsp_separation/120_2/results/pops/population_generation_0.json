[
     {
          "algorithm": "Iteratively place items by prioritizing volume utilization, separation constraints, and bottom-left-back placement within existing or new trucks.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively place items by prioritizing volume utilization, separation constraints, and bottom-left-back placement within existing or new trucks.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_volume_utilization = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                for truck_index, truck in enumerate(trucks_in_use):\n                    if (item.get('separation_set') is None or truck.get('separation_set') is None or\n                            item['separation_set'] == truck['separation_set']):\n                        x, y, z, orientation = self._find_placement_in_truck(item, truck, truck_type)\n                        if x != -1:\n                            item_dims = self._get_orientations(item)[orientation][1]\n                            volume = item_dims[0] * item_dims[1] * item_dims[2]\n                            truck_volume = truck_type[0] * truck_type[1] * truck_type[2]\n                            occupied_volume = sum([v['length'] * v['width'] * v['height'] for v in truck['occupied_volumes']])\n                            new_occupied_volume = occupied_volume + volume\n                            volume_utilization = new_occupied_volume / truck_volume\n                            \n                            if volume_utilization > best_volume_utilization:\n                                best_truck_index = truck_index\n                                best_item_index = item_index\n                                best_x = x\n                                best_y = y\n                                best_z = z\n                                best_orientation = orientation\n                                best_volume_utilization = volume_utilization\n\n        if best_truck_index == -1:\n            best_item_index = self._find_best_item_for_new_truck(unplaced_items)\n            if best_item_index != -1:\n                item = unplaced_items[best_item_index]\n                x, y, z, best_orientation = self._find_first_position_for_item(item, truck_type)\n                best_x = x\n                best_y = y\n                best_z = z\n\n\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _find_placement_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        for orientation_index, (orientation, item_dims) in enumerate(self._get_orientations(item)):\n            \n            x, y, z = self._find_bottom_left_back_position(item_dims, truck, truck_type)\n            if x != -1:\n                return x, y, z, orientation_index\n        return best_x, best_y, best_z\n\n    def _find_first_position_for_item(self, item, truck_type):\n        for orientation_index, (orientation, item_dims) in enumerate(self._get_orientations(item)):\n            if self._is_within_container_bounds((0,0,0), item_dims, truck_type):\n                return 0, 0, 0, orientation_index\n        return -1,-1,-1,-1\n\n    def _find_bottom_left_back_position(self, item_dims, truck, truck_type):\n        container_dims = truck_type\n        occupied_volumes = truck['occupied_volumes']\n\n        cl, cw, ch = container_dims\n        pl, pw, ph = item_dims\n\n        x_candidates = [0.0]\n        y_candidates = [0.0]\n        z_candidates = [0.0]\n\n        for placed_item in occupied_volumes:\n            x_candidates.append(placed_item['x'] + placed_item['length'])\n            y_candidates.append(placed_item['y'] + placed_item['width'])\n            z_candidates.append(placed_item['z'] + placed_item['height'])\n\n            x_candidates.append(placed_item['x'] - pl)\n            y_candidates.append(placed_item['y'] - pw)\n            z_candidates.append(placed_item['z'] - ph)\n        \n        x_candidates = sorted(list(set([x for x in x_candidates if x >= 0 and x + pl <= cl + self.epsilon])))\n        y_candidates = sorted(list(set([y for y in y_candidates if y >= 0 and y + pw <= cw + self.epsilon])))\n        z_candidates = sorted(list(set([z for z in z_candidates if z >= 0 and z + ph <= ch + self.epsilon])))\n\n        for z in z_candidates:\n            for y in y_candidates:\n                for x in x_candidates:\n                    if self._is_valid_placement((x, y, z), (pl, pw, ph), container_dims, occupied_volumes):\n                        return x, y, z\n        return -1, -1, -1\n    \n    def _find_best_item_for_new_truck(self, unplaced_items):\n        \n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                if item.get('separation_set') is None:\n                    return item_index\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                return item_index\n        return -1\nclass AlgorithmFIX1(Algorithm):\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_volume_utilization = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                for truck_index, truck in enumerate(trucks_in_use):\n                    if (item.get('separation_set') is None or truck.get('separation_set') is None or\n                            item['separation_set'] == truck['separation_set']):\n                        x, y, z, orientation = self._find_placement_in_truck(item, truck, truck_type)\n                        if x != -1:\n                            item_dims = self._get_orientations(item)[orientation][1]\n                            volume = item_dims[0] * item_dims[1] * item_dims[2]\n                            truck_volume = truck_type[0] * truck_type[1] * truck_type[2]\n                            occupied_volume = sum([v['length'] * v['width'] * v['height'] for v in truck['occupied_volumes']])\n                            new_occupied_volume = occupied_volume + volume\n                            volume_utilization = new_occupied_volume / truck_volume\n                            \n                            if volume_utilization > best_volume_utilization:\n                                best_truck_index = truck_index\n                                best_item_index = item_index\n                                best_x = x\n                                best_y = y\n                                best_z = z\n                                best_orientation = orientation\n                                best_volume_utilization = volume_utilization\n\n        if best_truck_index == -1:\n            best_item_index = self._find_best_item_for_new_truck(unplaced_items)\n            if best_item_index != -1:\n                item = unplaced_items[best_item_index]\n                x, y, z, best_orientation = self._find_first_position_for_item(item, truck_type)\n                if x != -1:\n                    best_truck_index = -1\n                    best_x = x\n                    best_y = y\n                    best_z = z\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\nclass AlgorithmFIX2(AlgorithmFIX1):\n    def _find_first_position_for_item(self, item, truck_type):\n        for orientation_index, (orientation, item_dims) in enumerate(self._get_orientations(item)):\n            if self._is_within_container_bounds((0,0,0), item_dims, truck_type):\n                return 0, 0, 0, orientation_index\n        return -1, -1, -1, -1\nclass AlgorithmFIX3(AlgorithmFIX2):\n    def _find_placement_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        for orientation_index, (orientation, item_dims) in enumerate(self._get_orientations(item)):\n            \n            x, y, z = self._find_bottom_left_back_position(item_dims, truck, truck_type)\n            if x != -1:\n                return x, y, z, orientation_index\n        return best_x, best_y, best_z, best_orientation",
          "objective": 25.25,
          "other_inf": null,
          "class_name": "AlgorithmFIX3"
     },
     {
          "algorithm": "This algorithm iterates through unplaced items, tries all orientations in each truck or a new truck, and places the item at the first valid position found, prioritizing compatible trucks or creating a new one if necessary.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm iterates through unplaced items, tries all orientations in each truck or a new truck, and places the item at the first valid position found, prioritizing compatible trucks or creating a new one if necessary.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        item_type = unplaced_items[item_index]\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        if best_truck_index == -1:\n            x, y, z = best_x, best_y, best_z\n            orientation = best_orientation\n            return -1, item_index, x, y, z, orientation\n        else:\n            x, y, z = best_x, best_y, best_z\n            orientation = best_orientation\n            return best_truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        for i in range(len(unplaced_items)):\n            if unplaced_items[i]['quantity'] > 0:\n                return i\n        return None\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_x, best_y, best_z, best_orientation = None, None, None, None\n\n        truck_index = self._find_compatible_truck(item_type, trucks_in_use)\n        if truck_index is not None:\n            x, y, z, orientation = self._find_valid_position(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                return truck_index, x, y, z, orientation\n\n        truck_index = self._find_empty_truck(trucks_in_use)\n        if truck_index is not None:\n            x, y, z, orientation = self._find_valid_position(item_type, trucks_in_use[truck_index], truck_type)\n            if x is not None:\n                 trucks_in_use[truck_index]['separation_set'] = item_type.get('separation_set')\n                 return truck_index, x, y, z, orientation\n        \n        x, y, z, orientation = self._find_valid_position_new_truck(item_type, truck_type)\n        return -1, x, y, z, orientation\n\n    def _find_compatible_truck(self, item_type, trucks_in_use):\n        separation_set = item_type.get('separation_set')\n        if separation_set is None: return None\n\n        for i, truck in enumerate(trucks_in_use):\n            if truck['separation_set'] is not None and truck['separation_set'] == separation_set:\n                return i\n        return None\n    \n    def _find_empty_truck(self, trucks_in_use):\n        for i, truck in enumerate(trucks_in_use):\n            if truck['separation_set'] is None:\n                return i\n        return None\n\n    def _find_valid_position(self, item_type, truck, truck_type):\n        orientations = self._get_orientations(item_type)\n        for orientation_index, (ox, (length, width, height)) in enumerate(orientations):\n            for x in np.arange(0.0, truck_type[0], 1.0):\n                for y in np.arange(0.0, truck_type[1], 1.0):\n                    for z in np.arange(0.0, truck_type[2], 1.0):\n                        x, y, z = round(x,6), round(y,6), round(z,6)\n                        if self._is_valid_placement((x, y, z), (length, width, height), truck_type, truck['occupied_volumes']):\n                            return x, y, z, orientation_index\n        return None, None, None, None\n\n    def _find_valid_position_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        for orientation_index, (ox, (length, width, height)) in enumerate(orientations):\n            for x in np.arange(0.0, truck_type[0], 1.0):\n                for y in np.arange(0.0, truck_type[1], 1.0):\n                    for z in np.arange(0.0, truck_type[2], 1.0):\n                        x, y, z = round(x,6), round(y,6), round(z,6)\n                        if self._is_within_container_bounds((x,y,z), (length, width, height), truck_type):\n                           return x, y, z, orientation_index\n        return None, None, None, None\nclass AlgorithmFIX1(Algorithm):\n    def _find_valid_position(self, item_type, truck, truck_type):\n        orientations = self._get_orientations(item_type)\n        for orientation_index, (ox, (length, width, height)) in enumerate(orientations):\n            x_range = np.arange(0.0, truck_type[0] - length + self.epsilon, 1.0)\n            y_range = np.arange(0.0, truck_type[1] - width + self.epsilon, 1.0)\n            z_range = np.arange(0.0, truck_type[2] - height + self.epsilon, 1.0)\n            for x in x_range:\n                for y in y_range:\n                    for z in z_range:\n                        x, y, z = round(x, 6), round(y, 6), round(z, 6)\n                        if self._is_valid_placement((x, y, z), (length, width, height), truck_type, truck['occupied_volumes']):\n                            return x, y, z, orientation_index\n        return None, None, None, None\n\n    def _find_valid_position_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        for orientation_index, (ox, (length, width, height)) in enumerate(orientations):\n            x_range = np.arange(0.0, truck_type[0] - length + self.epsilon, 1.0)\n            y_range = np.arange(0.0, truck_type[1] - width + self.epsilon, 1.0)\n            z_range = np.arange(0.0, truck_type[2] - height + self.epsilon, 1.0)\n            for x in x_range:\n                for y in y_range:\n                    for z in z_range:\n                        x, y, z = round(x, 6), round(y, 6), round(z, 6)\n                        if self._is_within_container_bounds((x,y,z), (length, width, height), truck_type):\n                           return x, y, z, orientation_index\n        return None, None, None, None\nclass AlgorithmFIX2(AlgorithmFIX1):\n    def _find_valid_position(self, item_type, truck, truck_type):\n        orientations = self._get_orientations(item_type)\n        \n        for orientation_index, (ox, (length, width, height)) in enumerate(orientations):\n            x_max = truck_type[0] - length\n            y_max = truck_type[1] - width\n            z_max = truck_type[2] - height\n\n            for x in np.arange(0.0, x_max + self.epsilon, max(1.0, length/2)):\n                for y in np.arange(0.0, y_max + self.epsilon, max(1.0, width/2)):\n                    for z in np.arange(0.0, z_max + self.epsilon, max(1.0, height/2)):\n                        x, y, z = round(x, 6), round(y, 6), round(z, 6)\n                        if self._is_valid_placement((x, y, z), (length, width, height), truck_type, truck['occupied_volumes']):\n                            return x, y, z, orientation_index\n        return None, None, None, None\n\n    def _find_valid_position_new_truck(self, item_type, truck_type):\n        orientations = self._get_orientations(item_type)\n        \n        for orientation_index, (ox, (length, width, height)) in enumerate(orientations):\n            x_max = truck_type[0] - length\n            y_max = truck_type[1] - width\n            z_max = truck_type[2] - height\n\n            for x in np.arange(0.0, x_max + self.epsilon, max(1, length/2)):\n                for y in np.arange(0.0, y_max + self.epsilon, max(1, width/2)):\n                    for z in np.arange(0.0, z_max + self.epsilon, max(1, height/2)):\n                        x, y, z = round(x, 6), round(y, 6), round(z, 6)\n                        if self._is_within_container_bounds((x,y,z), (length, width, height), truck_type):\n                           return x, y, z, orientation_index\n        return None, None, None, None",
          "objective": 77.0,
          "other_inf": null,
          "class_name": "AlgorithmFIX2"
     }
]