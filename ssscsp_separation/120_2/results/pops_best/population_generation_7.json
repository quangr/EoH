{
     "algorithm": "Prioritizes placing items into partially filled trucks based on a volume utilization score, selecting the item that minimizes wasted space after placement and respects separation constraints.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Prioritizes placing items into partially filled trucks based on a volume utilization score, selecting the item that minimizes wasted space after placement and respects separation constraints.}\n\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_placement_score = float('inf')\n        \n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n            \n            for truck_index, truck in enumerate(trucks_in_use):\n                if (item.get('separation_set') is not None and truck.get('separation_set') is not None and\n                        item['separation_set'] != truck['separation_set']):\n                    continue\n                \n                x, y, z, orientation, score = self._evaluate_placement_in_truck(item, truck, truck_type)\n                \n                if x != -1 and score < best_placement_score:\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_placement_score = score\n        \n        if best_truck_index == -1:\n            best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation = self._find_placement_in_new_truck(unplaced_items, truck_type)\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n    \n    def _find_placement_in_new_truck(self, unplaced_items, truck_type):\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        \n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n            \n            x, y, z, orientation = self._find_first_position_for_item(item, truck_type)\n            \n            if x != -1:\n                best_item_index = item_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                break\n        \n        return -1, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _evaluate_placement_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_score = float('inf')\n        \n        for orientation_index, (orientation, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._find_bottom_left_back_position(item_dims, truck, truck_type)\n            \n            if x != -1:\n                \n                score = self._calculate_placement_score(item_dims, truck, truck_type)\n                \n                if score < best_score:\n                    best_score = score\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation_index\n        \n        return best_x, best_y, best_z, best_score\n    \n    def _calculate_placement_score(self, item_dims, truck, truck_type):\n        truck_volume = truck_type[0] * truck_type[1] * truck_type[2]\n        item_volume = item_dims[0] * item_dims[1] * item_dims[2]\n        occupied_volume = sum([v['length'] * v['width'] * v['height'] for v in truck['occupied_volumes']])\n        remaining_volume = truck_volume - occupied_volume\n        \n        wasted_space = remaining_volume - item_volume\n        \n        utilization = occupied_volume / truck_volume if truck_volume > 0 else 0\n        \n        return wasted_space \n\n    def _find_bottom_left_back_position(self, item_dims, truck, truck_type):\n        container_dims = truck_type\n        occupied_volumes = truck['occupied_volumes']\n\n        cl, cw, ch = container_dims\n        pl, pw, ph = item_dims\n\n        x_candidates = [0.0]\n        y_candidates = [0.0]\n        z_candidates = [0.0]\n\n        for placed_item in occupied_volumes:\n            x_candidates.append(placed_item['x'] + placed_item['length'])\n            y_candidates.append(placed_item['y'] + placed_item['width'])\n            z_candidates.append(placed_item['z'] + placed_item['height'])\n        \n        x_candidates = sorted(list(set([x for x in x_candidates if x >= 0 and x + pl <= cl + self.epsilon])))\n        y_candidates = sorted(list(set([y for y in y_candidates if y >= 0 and y + pw <= cw + self.epsilon])))\n        z_candidates = sorted(list(set([z for z in z_candidates if z >= 0 and z + ph <= ch + self.epsilon])))\n        \n        for z in z_candidates:\n            for y in y_candidates:\n                for x in x_candidates:\n                    if self._is_valid_placement((x, y, z), (pl, pw, ph), container_dims, occupied_volumes):\n                        return x, y, z\n        \n        return -1, -1, -1\n\n    def _find_first_position_for_item(self, item, truck_type):\n        for orientation_index, (orientation, item_dims) in enumerate(self._get_orientations(item)):\n            if self._is_within_container_bounds((0,0,0), item_dims, truck_type):\n                return 0, 0, 0, orientation_index\n        return -1, -1, -1, -1\nimport numpy as np\n\nclass AlgorithmFIX1(Algorithm):\n    def _evaluate_placement_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_score = float('inf')\n        \n        for orientation_index, (orientation, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._find_bottom_left_back_position(item_dims, truck, truck_type)\n            \n            if x != -1:\n                \n                score = self._calculate_placement_score(item_dims, truck, truck_type)\n                \n                if score < best_score:\n                    best_score = score\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation_index\n        \n        return best_x, best_y, best_z, best_orientation, best_score",
     "objective": 25.15,
     "other_inf": null,
     "class_name": "AlgorithmFIX1"
}