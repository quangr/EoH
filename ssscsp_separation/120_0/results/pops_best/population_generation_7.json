{
     "algorithm": "Selects the item with the largest volume, places it using a first-fit decreasing height heuristic, respecting separation constraints and minimizing wasted space below the item.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects the item with the largest volume, places it using a first-fit decreasing height heuristic, respecting separation constraints and minimizing wasted space below the item.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n\n        for i in range(len(unplaced_items)):\n            if unplaced_items[i]['quantity'] > 0:\n                volume = unplaced_items[i]['length'] * unplaced_items[i]['width'] * unplaced_items[i]['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_waste = float('inf')\n\n        item_type = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if item_type.get('separation_set') is not None and truck.get('separation_set') is not None and item_type['separation_set'] != truck['separation_set']:\n                continue\n\n            x, y, z, orientation, waste = self._find_position_in_truck(item_type, truck, truck_type)\n            if x != -1 and waste < min_waste:\n                min_waste = waste\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n\n        if best_truck_index == -1:\n            best_truck_index, best_x, best_y, best_z, best_orientation = self._create_new_truck(item_type, truck_type)\n            if best_truck_index == -2:\n                return -1, item_index, 0, 0, 0, 0\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_waste = float('inf')\n        occupied_volumes = truck['occupied_volumes']\n\n        for orientation_index, (length, width, height) in self._get_orientations(item_type):\n            for x in range(int(truck_type[0] - length + 1)):\n                for y in range(int(truck_type[1] - width + 1)):\n                    z = self._calculate_support_height((x, y), (length, width), occupied_volumes)\n                    if self._is_valid_placement((x, y, z), (length, width, height), truck_type, occupied_volumes):\n                      waste = z\n                      if waste < min_waste:\n                        min_waste = waste\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n\n        return best_x, best_y, best_z, best_orientation, min_waste\n\n    def _calculate_support_height(self, position, dimensions, occupied_volumes):\n        x, y = position\n        length, width = dimensions\n        max_z = 0\n        for item in occupied_volumes:\n            item_x = item['x']\n            item_y = item['y']\n            item_length = item['length']\n            item_width = item['width']\n            item_height = item['height']\n            item_z = item['z']\n            if (x < item_x + item_length and x + length > item_x and\n                    y < item_y + item_width and y + width > item_y):\n                max_z = max(max_z, item_z + item_height)\n        return max_z\n\n    def _create_new_truck(self, item_type, truck_type):\n        best_orientation = -1\n        min_height = float('inf')\n        best_z = 0\n\n        for orientation_index, (length, width, height) in self._get_orientations(item_type):\n            if self._is_within_container_bounds((0, 0, 0), (length, width, height), truck_type):\n                if height < min_height:\n                    min_height = height\n                    best_orientation = orientation_index\n\n        if best_orientation != -1:\n            separation_set = item_type.get('separation_set')\n            return -1, 0, 0, best_z, best_orientation\n        return -2, -1, -1, -1, -1",
     "objective": 22.7,
     "other_inf": null,
     "class_name": "Algorithm"
}