{
     "algorithm": "This algorithm uses a height-map representation of the container space to guide item placement, prioritizing the lowest available space and respecting separation constraints.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm uses a height-map representation of the container space to guide item placement, prioritizing the lowest available space and respecting separation constraints.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index = -1\n        item_index = -1\n        x, y, z = 0.0, 0.0, 0.0\n        orientation = 0\n\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_height = float('inf')\n\n        for item_idx, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n\n            for truck_idx, truck in enumerate(trucks_in_use):\n                if item.get('separation_set') is not None and truck.get('separation_set') is not None and item['separation_set'] != truck['separation_set']:\n                    continue\n\n                x, y, z, orientation, height = self._find_position_for_item_in_truck(item, truck, truck_type)\n\n                if x is not None and height < min_height:\n                    min_height = height\n                    best_truck_index = truck_idx\n                    best_item_index = item_idx\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation\n\n        if best_truck_index == -1:\n            best_item_index, best_x, best_y, best_z, best_orientation, height = self._find_best_placement_in_new_truck(unplaced_items, truck_type)\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_placement_in_new_truck(self, unplaced_items, truck_type):\n        best_item_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_height = float('inf')\n\n        for item_idx, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n\n            x, y, z, orientation, height = self._find_position_for_item_new_truck(item, truck_type)\n            if x is not None and height < min_height:\n                min_height = height\n                best_item_index = item_idx\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n\n        return best_item_index, best_x, best_y, best_z, best_orientation, min_height\n\n    def _find_position_for_item_new_truck(self, item, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        min_height = float('inf')\n\n        for orientation_idx, (orientation, dims) in enumerate(self._get_orientations(item)):\n            if self._is_within_container_bounds((0.0, 0.0, 0.0), dims, truck_type):\n                height = dims[2]\n                if height < min_height:\n                    min_height = height\n                    best_x, best_y, best_z = 0.0, 0.0, 0.0\n                    best_orientation = orientation_idx\n\n        return best_x, best_y, best_z, best_orientation, min_height\n\n    def _find_position_for_item_in_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        min_height = float('inf')\n        \n        height_map = self._create_height_map(truck, truck_type)\n\n        for orientation_idx, (orientation, dims) in enumerate(self._get_orientations(item)):\n            possible_positions = self._find_possible_positions_height_map(height_map, dims, truck_type)\n\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), dims, truck_type, truck['occupied_volumes']):\n                    height = z + dims[2]\n                    if height < min_height:\n                        min_height = height\n                        best_x, best_y, best_z = x, y, z\n                        best_orientation = orientation_idx\n\n        return best_x, best_y, best_z, best_orientation, min_height\n\n    def _create_height_map(self, truck, truck_type):\n        length, width, height = truck_type\n        height_map = np.zeros((int(length), int(width)))\n        for item in truck['occupied_volumes']:\n            x, y, z = item['x'], item['y'], item['z']\n            l, w, h = item['length'], item['width'], item['height']\n            for i in range(int(x), int(x + l)):\n                for j in range(int(y), int(y + w)):\n                    height_map[i, j] = max(height_map[i, j], z + h)\n        return height_map\n\n    def _find_possible_positions_height_map(self, height_map, item_dims, truck_type):\n        positions = []\n        length, width, height = truck_type\n        item_length, item_width, item_height = item_dims\n\n        for x in range(int(length - item_length + 1)):\n            for y in range(int(width - item_width + 1)):\n                z = height_map[x:int(x+item_length), y:int(y+item_width)].max()\n                positions.append((float(x), float(y), float(z)))\n\n        return positions",
     "objective": 24.5,
     "other_inf": null,
     "class_name": "Algorithm"
}