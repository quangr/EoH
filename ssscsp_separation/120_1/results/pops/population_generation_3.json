[
     {
          "algorithm": "This algorithm iteratively places the largest volume item in the tightest-fit position within existing trucks or a new truck, prioritizing space utilization and separation constraints.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm iteratively places the largest volume item in the tightest-fit position within existing trucks or a new truck, prioritizing space utilization and separation constraints.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_fit = float('inf')\n\n        item_indices = self._sort_items_by_volume(unplaced_items)\n\n        for item_index in item_indices:\n            item_type = unplaced_items[item_index]\n            if item_type['quantity'] <= 0:\n                continue\n\n            for truck_index in range(-1, len(trucks_in_use)):\n                if truck_index == -1:\n                    separation_set = None\n                    occupied_volumes = []\n                else:\n                    separation_set = trucks_in_use[truck_index]['separation_set']\n                    occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n                if separation_set is not None and item_type.get('separation_set') is not None and separation_set != item_type['separation_set']:\n                    continue\n\n                x, y, z, orientation, fit = self._find_best_position_for_item(item_type, truck_type, occupied_volumes)\n\n                if x != -1 and fit < best_fit:\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_fit = fit\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _sort_items_by_volume(self, unplaced_items):\n        return sorted(range(len(unplaced_items)), key=lambda k: unplaced_items[k]['length'] * unplaced_items[k]['width'] * unplaced_items[k]['height'], reverse=True)\n\n    def _find_best_position_for_item(self, item_type, container_dims, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_fit = float('inf')\n\n        for orientation, dims in self._get_orientations(item_type):\n            l, w, h = dims\n\n            positions = self._generate_candidate_positions(container_dims, occupied_volumes, dims)\n\n            for x, y, z in positions:\n                if self._is_valid_placement((x, y, z), (l, w, h), container_dims, occupied_volumes):\n                    fit = self._calculate_fit((x, y, z), (l, w, h), container_dims, occupied_volumes)\n                    if fit < best_fit:\n                        best_fit = fit\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation\n\n        return best_x, best_y, best_z, best_orientation, best_fit\n\n    def _calculate_fit(self, item_pos, item_dims, container_dims, occupied_volumes):\n        x, y, z = item_pos\n        l, w, h = item_dims\n        cl, cw, ch = container_dims\n\n        space_on_sides = cl - (x + l) + cw - (y + w) + ch - (z + h)\n        touching_sides = 0\n\n        if x == 0 or y == 0 or z == 0:\n            touching_sides +=1\n        if x+l == cl or y+w == cw or z+h ==ch:\n            touching_sides +=1\n    \n        for placed_item in occupied_volumes:\n                px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n                pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n\n                if x + l == px and self._is_overlapped(y, y + w, py, py + pw) and self._is_overlapped(z, z + h, pz, pz + ph):\n                    touching_sides +=1\n                if px + pl == x and self._is_overlapped(y, y + w, py, py + pw) and self._is_overlapped(z, z + h, pz, pz + ph):\n                    touching_sides +=1\n                if y + w == py and self._is_overlapped(x, x + l, px, px + pl) and self._is_overlapped(z, z + h, pz, pz + ph):\n                    touching_sides +=1\n                if py + pw == y and self._is_overlapped(x, x + l, px, px + pl) and self._is_overlapped(z, z + h, pz, pz + ph):\n                   touching_sides +=1\n                if z + h == pz and self._is_overlapped(x, x + l, px, px + pl) and self._is_overlapped(y, y + w, py, py + pw):\n                    touching_sides +=1\n                if pz + ph == z and self._is_overlapped(x, x + l, px, px + pl) and self._is_overlapped(y, y + w, py, py + pw):\n                    touching_sides +=1\n                    \n        return space_on_sides - touching_sides\n\n\n    def _is_overlapped(self, start1, end1, start2, end2):\n        return max(start1, start2) < min(end1, end2)\n    \n    def _generate_candidate_positions(self, container_dims, occupied_volumes, item_dims):\n        candidate_positions = []\n\n        if not occupied_volumes:\n            return [(0, 0, 0)]\n\n        for placed_item in occupied_volumes:\n            x, y, z = placed_item['x'], placed_item['y'], placed_item['z']\n            l, w, h = placed_item['length'], placed_item['width'], placed_item['height']\n\n            candidate_positions.extend([(x + l, y, z), (x, y + w, z), (x, y, z + h)])\n\n        candidate_positions.append((0, 0, 0))\n\n        valid_positions = []\n        for x, y, z in candidate_positions:\n            if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                valid_positions.append((x, y, z))\n\n        return valid_positions",
          "objective": 23.75,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes placing items in existing trucks, selecting the item with the highest remaining quantity and favoring positions that maximize contact with existing items while minimizing wasted space.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes placing items in existing trucks, selecting the item with the highest remaining quantity and favoring positions that maximize contact with existing items while minimizing wasted space.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_score = float('-inf')\n\n        item_indices = self._sort_items_by_quantity(unplaced_items)\n\n        for item_index in item_indices:\n            item_type = unplaced_items[item_index]\n            if item_type['quantity'] <= 0:\n                continue\n\n            for truck_index in range(-1, len(trucks_in_use)):\n                if truck_index == -1:\n                    separation_set = None\n                    occupied_volumes = []\n                else:\n                    separation_set = trucks_in_use[truck_index]['separation_set']\n                    occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n                if separation_set is not None and item_type.get('separation_set') is not None and separation_set != item_type['separation_set']:\n                    continue\n\n                x, y, z, orientation, score = self._find_best_position_for_item(item_type, truck_type, occupied_volumes)\n\n                if x != -1 and score > best_score:\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_score = score\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _sort_items_by_quantity(self, unplaced_items):\n        return sorted(range(len(unplaced_items)), key=lambda k: unplaced_items[k]['quantity'], reverse=True)\n\n    def _find_best_position_for_item(self, item_type, container_dims, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_score = float('-inf')\n\n        for orientation, dims in self._get_orientations(item_type):\n            l, w, h = dims\n\n            positions = self._generate_candidate_positions(container_dims, occupied_volumes, dims)\n\n            for x, y, z in positions:\n                if self._is_valid_placement((x, y, z), (l, w, h), container_dims, occupied_volumes):\n                    score = self._calculate_score((x, y, z), (l, w, h), container_dims, occupied_volumes)\n                    if score > best_score:\n                        best_score = score\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation\n\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _calculate_score(self, item_pos, item_dims, container_dims, occupied_volumes):\n        x, y, z = item_pos\n        l, w, h = item_dims\n        cl, cw, ch = container_dims\n\n        space_utilization = (l * w * h) / (cl * cw * ch)\n\n        touching_sides = 0\n\n        if x == 0 or y == 0 or z == 0:\n            touching_sides += 1\n        if x + l == cl or y + w == cw or z + h == ch:\n            touching_sides += 1\n\n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n\n            if x + l == px and self._is_overlapped(y, y + w, py, py + pw) and self._is_overlapped(z, z + h, pz, pz + ph):\n                touching_sides += 1\n            if px + pl == x and self._is_overlapped(y, y + w, py, py + pw) and self._is_overlapped(z, z + h, pz, pz + ph):\n                touching_sides += 1\n            if y + w == py and self._is_overlapped(x, x + l, px, px + pl) and self._is_overlapped(z, z + h, pz, pz + ph):\n                touching_sides += 1\n            if py + pw == y and self._is_overlapped(x, x + l, px, px + pl) and self._is_overlapped(z, z + h, pz, pz + ph):\n                touching_sides += 1\n            if z + h == pz and self._is_overlapped(x, x + l, px, px + pl) and self._is_overlapped(y, y + w, py, py + pw):\n                touching_sides += 1\n            if pz + ph == z and self._is_overlapped(x, x + l, px, px + pl) and self._is_overlapped(y, y + w, py, py + pw):\n                touching_sides += 1\n\n        return  touching_sides + space_utilization * 0.1\n\n    def _is_overlapped(self, start1, end1, start2, end2):\n        return max(start1, start2) < min(end1, end2)\n\n    def _generate_candidate_positions(self, container_dims, occupied_volumes, item_dims):\n        candidate_positions = []\n\n        if not occupied_volumes:\n            return [(0, 0, 0)]\n\n        for placed_item in occupied_volumes:\n            x, y, z = placed_item['x'], placed_item['y'], placed_item['z']\n            l, w, h = placed_item['length'], placed_item['width'], placed_item['height']\n\n            candidate_positions.extend([(x + l, y, z), (x, y + w, z), (x, y, z + h)])\n\n        candidate_positions.append((0, 0, 0))\n\n        valid_positions = []\n        for x, y, z in candidate_positions:\n            if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                valid_positions.append((x, y, z))\n\n        return valid_positions",
          "objective": 23.85,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm uses a height-map representation of the container space to guide item placement, prioritizing the lowest available space and respecting separation constraints.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm uses a height-map representation of the container space to guide item placement, prioritizing the lowest available space and respecting separation constraints.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index = -1\n        item_index = -1\n        x, y, z = 0.0, 0.0, 0.0\n        orientation = 0\n\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_height = float('inf')\n\n        for item_idx, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n\n            for truck_idx, truck in enumerate(trucks_in_use):\n                if item.get('separation_set') is not None and truck.get('separation_set') is not None and item['separation_set'] != truck['separation_set']:\n                    continue\n\n                x, y, z, orientation, height = self._find_position_for_item_in_truck(item, truck, truck_type)\n\n                if x is not None and height < min_height:\n                    min_height = height\n                    best_truck_index = truck_idx\n                    best_item_index = item_idx\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation\n\n        if best_truck_index == -1:\n            best_item_index, best_x, best_y, best_z, best_orientation, height = self._find_best_placement_in_new_truck(unplaced_items, truck_type)\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_placement_in_new_truck(self, unplaced_items, truck_type):\n        best_item_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_height = float('inf')\n\n        for item_idx, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n\n            x, y, z, orientation, height = self._find_position_for_item_new_truck(item, truck_type)\n            if x is not None and height < min_height:\n                min_height = height\n                best_item_index = item_idx\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n\n        return best_item_index, best_x, best_y, best_z, best_orientation, min_height\n\n    def _find_position_for_item_new_truck(self, item, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        min_height = float('inf')\n\n        for orientation_idx, (orientation, dims) in enumerate(self._get_orientations(item)):\n            if self._is_within_container_bounds((0.0, 0.0, 0.0), dims, truck_type):\n                height = dims[2]\n                if height < min_height:\n                    min_height = height\n                    best_x, best_y, best_z = 0.0, 0.0, 0.0\n                    best_orientation = orientation_idx\n\n        return best_x, best_y, best_z, best_orientation, min_height\n\n    def _find_position_for_item_in_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        min_height = float('inf')\n        \n        height_map = self._create_height_map(truck, truck_type)\n\n        for orientation_idx, (orientation, dims) in enumerate(self._get_orientations(item)):\n            possible_positions = self._find_possible_positions_height_map(height_map, dims, truck_type)\n\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), dims, truck_type, truck['occupied_volumes']):\n                    height = z + dims[2]\n                    if height < min_height:\n                        min_height = height\n                        best_x, best_y, best_z = x, y, z\n                        best_orientation = orientation_idx\n\n        return best_x, best_y, best_z, best_orientation, min_height\n\n    def _create_height_map(self, truck, truck_type):\n        length, width, height = truck_type\n        height_map = np.zeros((int(length), int(width)))\n        for item in truck['occupied_volumes']:\n            x, y, z = item['x'], item['y'], item['z']\n            l, w, h = item['length'], item['width'], item['height']\n            for i in range(int(x), int(x + l)):\n                for j in range(int(y), int(y + w)):\n                    height_map[i, j] = max(height_map[i, j], z + h)\n        return height_map\n\n    def _find_possible_positions_height_map(self, height_map, item_dims, truck_type):\n        positions = []\n        length, width, height = truck_type\n        item_length, item_width, item_height = item_dims\n\n        for x in range(int(length - item_length + 1)):\n            for y in range(int(width - item_width + 1)):\n                z = height_map[x:int(x+item_length), y:int(y+item_width)].max()\n                positions.append((float(x), float(y), float(z)))\n\n        return positions",
          "objective": 24.5,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes placing items into existing trucks using a first-fit decreasing height strategy, selecting the most constrained item type and orientation that minimizes remaining space and respects separation constraints, while creating new trucks only when necessary.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes placing items into existing trucks using a first-fit decreasing height strategy, selecting the most constrained item type and orientation that minimizes remaining space and respects separation constraints, while creating new trucks only when necessary.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index = -1\n        item_index = -1\n        x, y, z = 0.0, 0.0, 0.0\n        orientation = 0\n\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_waste = float('inf')\n\n        \n        for item_idx, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n            \n            for truck_idx, truck in enumerate(trucks_in_use):\n                if item.get('separation_set') is not None and truck.get('separation_set') is not None and item['separation_set'] != truck['separation_set']:\n                    continue\n                \n                x, y, z, orientation, waste = self._find_position_for_item_in_truck(item, truck, truck_type)\n                \n                if x is not None and waste < min_waste:\n                    min_waste = waste\n                    best_truck_index = truck_idx\n                    best_item_index = item_idx\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation\n\n        if best_truck_index == -1:\n            best_item_index, best_x, best_y, best_z, best_orientation, waste = self._find_best_placement_in_new_truck(unplaced_items, truck_type)\n        \n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_placement_in_new_truck(self, unplaced_items, truck_type):\n        best_item_index = -1\n        best_x, best_y, best_z = 0.0, 0.0, 0.0\n        best_orientation = 0\n        min_waste = float('inf')\n        \n        for item_idx, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n            \n            x, y, z, orientation, waste = self._find_position_for_item_new_truck(item, truck_type)\n            if x is not None and waste < min_waste:\n                min_waste = waste\n                best_item_index = item_idx\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n\n        return best_item_index, best_x, best_y, best_z, best_orientation, min_waste\n\n    def _find_position_for_item_new_truck(self, item, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        min_waste = float('inf')\n\n        for orientation_idx, (orientation, dims) in enumerate(self._get_orientations(item)):\n            if self._is_within_container_bounds((0.0, 0.0, 0.0), dims, truck_type):\n                waste = self._calculate_waste(dims, truck_type)\n                if waste < min_waste:\n                    min_waste = waste\n                    best_x, best_y, best_z = 0.0, 0.0, 0.0\n                    best_orientation = orientation_idx\n\n        return best_x, best_y, best_z, best_orientation, min_waste\n\n    def _find_position_for_item_in_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        min_waste = float('inf')\n\n        for orientation_idx, (orientation, dims) in enumerate(self._get_orientations(item)):\n            possible_positions = self._find_possible_positions(truck, truck_type, dims)\n                \n            for x, y, z in possible_positions:                    \n                if self._is_valid_placement((x, y, z), dims, truck_type, truck['occupied_volumes']):\n                    waste = self._calculate_waste(dims, truck_type)\n                    if waste < min_waste:\n                        min_waste = waste\n                        best_x, best_y, best_z = x, y, z\n                        best_orientation = orientation_idx\n\n        return best_x, best_y, best_z, best_orientation, min_waste\n\n    def _find_possible_positions(self, truck, truck_type, item_dims):\n        positions = []\n        \n        if not truck['occupied_volumes']:\n            return [(0.0, 0.0, 0.0)]\n\n        \n        for placed_item in truck['occupied_volumes']:\n            x = placed_item['x'] + placed_item['length']\n            y = placed_item['y']\n            z = placed_item['z']\n            if self._is_within_container_bounds((x, y, z), item_dims, truck_type):\n                positions.append((x, y, z))\n\n            x = placed_item['x']\n            y = placed_item['y'] + placed_item['width']\n            z = placed_item['z']\n            if self._is_within_container_bounds((x, y, z), item_dims, truck_type):\n                positions.append((x, y, z))\n\n            x = placed_item['x']\n            y = placed_item['y']\n            z = placed_item['z'] + placed_item['height']\n            if self._is_within_container_bounds((x, y, z), item_dims, truck_type):\n                positions.append((x, y, z))\n        return positions\n        \n\n    def _calculate_waste(self, item_dims, container_dims):\n        item_volume = item_dims[0] * item_dims[1] * item_dims[2]\n        container_volume = container_dims[0] * container_dims[1] * container_dims[2]\n        return container_volume - item_volume",
          "objective": 25.2,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes items by remaining quantity, then attempts to place them using a bottom-left-back strategy, favoring placements that minimize wasted space and respect separation constraints.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes items by remaining quantity, then attempts to place them using a bottom-left-back strategy, favoring placements that minimize wasted space and respect separation constraints.}\n    def __init__(self, epsilon=1e-6):\n        super().__init__(epsilon)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_space_utilization = float('inf')\n\n        sorted_item_indices = sorted(range(len(unplaced_items)), key=lambda k: unplaced_items[k]['quantity'], reverse=True)\n\n        for item_index in sorted_item_indices:\n            item_type = unplaced_items[item_index]\n            if item_type['quantity'] <= 0:\n                continue\n\n            for truck_index in range(-1, len(trucks_in_use)):\n                if truck_index == -1:\n                    separation_set = None\n                    occupied_volumes = []\n                else:\n                    separation_set = trucks_in_use[truck_index]['separation_set']\n                    occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n                if separation_set is not None and item_type.get('separation_set') is not None and separation_set != item_type['separation_set']:\n                    continue\n\n                x, y, z, orientation = self._find_placement_position(item_type, truck_type, occupied_volumes)\n\n                if x != -1:\n                    item_dims = self._get_orientations(item_type)[orientation][1]\n                    \n                    waste = self._calculate_waste(truck_type, occupied_volumes, (x,y,z), item_dims)\n                    \n                    if best_truck_index == -1 or waste < best_space_utilization:\n                        best_truck_index = truck_index\n                        best_item_index = item_index\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation\n                        best_space_utilization = waste\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _calculate_waste(self, container_dims, occupied_volumes, item_pos, item_dims):\n            total_volume = container_dims[0] * container_dims[1] * container_dims[2]\n            occupied_volume = 0\n            \n            for placed_item in occupied_volumes:\n                occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n                \n            occupied_volume += item_dims[0] * item_dims[1] * item_dims[2]\n\n            return total_volume - occupied_volume\n\n    def _find_placement_position(self, item_type, container_dims, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        for orientation, dims in self._get_orientations(item_type):\n            l, w, h = dims\n\n            positions = self._generate_candidate_positions(container_dims, occupied_volumes, dims)\n\n            if positions:\n                for pos in positions:\n                    x, y, z = pos\n                    if self._is_valid_placement((x, y, z), (l, w, h), container_dims, occupied_volumes):\n                        return x, y, z, orientation\n\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_candidate_positions(self, container_dims, occupied_volumes, item_dims):\n        candidate_positions = []\n        \n        if not occupied_volumes:\n            return [(0, 0, 0)]\n        \n        z_values = sorted(list(set([0] + [item['z'] + item['height'] for item in occupied_volumes])))\n        \n        for z in z_values:\n            y_values = sorted(list(set([0] + [item['y'] + item['width'] if item['z'] <= z < item['z'] + item['height'] else 0 for item in occupied_volumes])))\n\n            for y in y_values:\n                x_values = sorted(list(set([0] + [item['x'] + item['length'] if item['y'] <= y < item['y'] + item['width'] and item['z'] <= z < item['z'] + item['height'] else 0 for item in occupied_volumes])))\n\n                for x in x_values:\n                    candidate_positions.append((x, y, z))\n\n        return candidate_positions",
          "objective": 25.25,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]