{
     "algorithm": "Places the item that maximizes the ratio of volume to combined surface area, prioritizing compact shapes for better space utilization.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Places the item that maximizes the ratio of volume to combined surface area, prioritizing compact shapes for better space utilization.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = 0.0\n        best_y = 0.0\n        best_z = 0.0\n        best_orientation = 0\n        best_score = -1.0\n\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_best_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x is not None:\n                dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n                new_item = {\n                    'item_type_id': unplaced_items[item_index]['item_id'],\n                    'x': x,\n                    'y': y,\n                    'z': z,\n                    'length': dims[0],\n                    'width': dims[1],\n                    'height': dims[2]\n                }\n\n                if truck_index == -1:\n                    new_volumes = [new_item]\n                else:\n                    new_volumes = occupied_volumes + [new_item]\n                score = self._evaluate_placement(truck_type, new_volumes)\n\n                if score > best_score:\n                    best_score = score\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item_to_place(self, unplaced_items):\n        best_item_index = -1\n        max_volume_to_sa_ratio = -1.0\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                l, w, h = item_type['length'], item_type['width'], item_type['height']\n                volume = l * w * h\n                surface_area = 2 * (l * w + l * h + w * h)\n                if surface_area > 0:\n                    volume_to_sa_ratio = volume / surface_area\n                else:\n                    volume_to_sa_ratio = 0.0\n                if volume_to_sa_ratio > max_volume_to_sa_ratio:\n                    max_volume_to_sa_ratio = volume_to_sa_ratio\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fit_score = float('inf')\n\n        for orientation_index, dims in self._get_orientations(item_type):\n            possible_positions = self._generate_potential_positions(truck_type, occupied_volumes, dims[0], dims[1], dims[2])\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), dims, truck_type, occupied_volumes):\n                    fit_score = self._calculate_fit_score((x, y, z), dims, truck_type)\n\n                    if fit_score < best_fit_score:\n                        best_fit_score = fit_score\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_potential_positions(self, truck_dims, occupied_volumes, length, width, height):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n        return positions\n\n    def _calculate_fit_score(self, position, dims, truck_dims):\n        length, width, height = dims\n        x, y, z = position\n        length_diff = abs(truck_dims[0] - (x + length))\n        width_diff = abs(truck_dims[1] - (y + width))\n        return length_diff + width_diff\n\n    def _evaluate_placement(self, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return occupied_volume / total_volume",
     "objective": 21.95,
     "other_inf": null,
     "class_name": "Algorithm"
}