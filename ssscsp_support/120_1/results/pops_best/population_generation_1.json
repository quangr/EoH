{
     "algorithm": "Iteratively select the item type with the largest volume and attempt to place it in the first available truck or a new truck, trying all 6 orientations at the lowest feasible position, using a heuristic based on minimum wasted space.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively select the item type with the largest volume and attempt to place it in the first available truck or a new truck, trying all 6 orientations at the lowest feasible position, using a heuristic based on minimum wasted space.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = 0.0\n        best_y = 0.0\n        best_z = 0.0\n        best_orientation = 0\n        min_wasted_space = float('inf')\n\n        item_index = self._select_item(unplaced_items)\n\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0  # No items left to place\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x is not None:\n                item_dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n\n                item_placement = {\n                    'item_type_id': unplaced_items[item_index]['item_id'],\n                    'x': x,\n                    'y': y,\n                    'z': z,\n                    'length': item_dims[0],\n                    'width': item_dims[1],\n                    'height': item_dims[2]\n                }\n\n                if truck_index == -1:\n                    new_truck_volumes = [item_placement]\n                else:\n                    new_truck_volumes = trucks_in_use[truck_index]['occupied_volumes'] + [item_placement]\n\n                wasted_space = self._calculate_wasted_space(truck_type, new_truck_volumes)\n\n                if wasted_space < min_wasted_space:\n                    min_wasted_space = wasted_space\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n\n        return best_item_index\n\n\n    def _find_position_for_item(self, item_type, truck_type, occupied_volumes):\n        possible_positions = self._generate_possible_positions(truck_type, occupied_volumes)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n\n        for orientation_index, item_dims in self._get_orientations(item_type):\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                    return x, y, z, orientation_index\n\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_possible_positions(self, truck_dims, occupied_volumes):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n\n        return positions\n\n    def _calculate_wasted_space(self, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return total_volume - occupied_volume",
     "objective": 24.85,
     "other_inf": null,
     "class_name": "Algorithm"
}