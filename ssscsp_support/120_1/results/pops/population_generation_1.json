[
     {
          "algorithm": "Iteratively select the item type with the largest volume and attempt to place it in the first available truck or a new truck, trying all 6 orientations at the lowest feasible position, using a heuristic based on minimum wasted space.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively select the item type with the largest volume and attempt to place it in the first available truck or a new truck, trying all 6 orientations at the lowest feasible position, using a heuristic based on minimum wasted space.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = 0.0\n        best_y = 0.0\n        best_z = 0.0\n        best_orientation = 0\n        min_wasted_space = float('inf')\n\n        item_index = self._select_item(unplaced_items)\n\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0  # No items left to place\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x is not None:\n                item_dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n\n                item_placement = {\n                    'item_type_id': unplaced_items[item_index]['item_id'],\n                    'x': x,\n                    'y': y,\n                    'z': z,\n                    'length': item_dims[0],\n                    'width': item_dims[1],\n                    'height': item_dims[2]\n                }\n\n                if truck_index == -1:\n                    new_truck_volumes = [item_placement]\n                else:\n                    new_truck_volumes = trucks_in_use[truck_index]['occupied_volumes'] + [item_placement]\n\n                wasted_space = self._calculate_wasted_space(truck_type, new_truck_volumes)\n\n                if wasted_space < min_wasted_space:\n                    min_wasted_space = wasted_space\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n\n        return best_item_index\n\n\n    def _find_position_for_item(self, item_type, truck_type, occupied_volumes):\n        possible_positions = self._generate_possible_positions(truck_type, occupied_volumes)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n\n        for orientation_index, item_dims in self._get_orientations(item_type):\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                    return x, y, z, orientation_index\n\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_possible_positions(self, truck_dims, occupied_volumes):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n\n        return positions\n\n    def _calculate_wasted_space(self, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return total_volume - occupied_volume",
          "objective": 24.85,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Iteratively place items by selecting the item with the maximum demand and finding the best position in existing trucks or a new truck based on a scoring function that considers stability and space utilization.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively place items by selecting the item with the maximum demand and finding the best position in existing trucks or a new truck based on a scoring function that considers stability and space utilization.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = 0.0\n        best_y = 0.0\n        best_z = 0.0\n        best_orientation = 0\n        best_score = -1.0\n\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_best_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x is not None:\n                dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n                new_item = {\n                    'item_type_id': unplaced_items[item_index]['item_id'],\n                    'x': x,\n                    'y': y,\n                    'z': z,\n                    'length': dims[0],\n                    'width': dims[1],\n                    'height': dims[2]\n                }\n\n                if truck_index == -1:\n                    new_volumes = [new_item]\n                else:\n                    new_volumes = occupied_volumes + [new_item]\n                score = self._evaluate_placement(truck_type, new_volumes)\n\n                if score > best_score:\n                    best_score = score\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item_to_place(self, unplaced_items):\n        best_item_index = -1\n        max_quantity = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                if item_type['quantity'] > max_quantity:\n                    max_quantity = item_type['quantity']\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_area_utilization = -1.0\n\n        for orientation_index, dims in self._get_orientations(item_type):\n            possible_positions = self._generate_potential_positions(truck_type, occupied_volumes, dims[0], dims[1], dims[2])\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), dims, truck_type, occupied_volumes):\n                    area_utilization = self._calculate_area_utilization((x,y,z), dims, truck_type, occupied_volumes)\n\n                    if area_utilization > best_area_utilization:\n                        best_area_utilization = area_utilization\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_potential_positions(self, truck_dims, occupied_volumes, length, width, height):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n        return positions\n\n    def _calculate_area_utilization(self, position, dims, truck_dims, occupied_volumes):\n        length, width, height = dims\n        x, y, z = position\n        return (length * width * height) / (truck_dims[0] * truck_dims[1] * truck_dims[2])\n\n    def _evaluate_placement(self, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return occupied_volume / total_volume",
          "objective": 25.35,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects an item and attempts to place it using a best-fit heuristic based on minimizing wasted space around the item within existing or new trucks.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects an item and attempts to place it using a best-fit heuristic based on minimizing wasted space around the item within existing or new trucks.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0, 0, 0, 0\n\n        item_type = unplaced_items[item_index]\n        truck_index, x, y, z, orientation = self._find_best_placement(item_type, trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        available_items = [i for i, item in enumerate(unplaced_items) if item['quantity'] > 0]\n        if not available_items:\n            return -1\n        return available_items[0]\n\n    def _find_best_placement(self, item_type, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_x, best_y, best_z = 0, 0, 0\n        best_orientation = 0\n        min_waste = float('inf')\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            occupied_volumes = truck['occupied_volumes']\n            x, y, z, orientation, waste = self._find_position_in_truck(item_type, truck_type, occupied_volumes)\n            if x is not None and waste < min_waste:\n                min_waste = waste\n                best_truck_index = truck_index\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n        \n        new_truck_index, new_x, new_y, new_z, new_orientation, new_waste = self._place_in_new_truck(item_type, truck_type)\n        if new_truck_index != -2 and new_waste < min_waste:\n            return new_truck_index, new_x, new_y, new_z, new_orientation\n\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item_type, truck_type, occupied_volumes):\n       \n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        min_waste = float('inf')\n        \n        orientations = self._get_orientations(item_type)\n        for orientation_index, (orientation, (l, w, h)) in enumerate(orientations):\n            for x in np.arange(0, truck_type[0] - l + self.epsilon, 1.0):\n                for y in np.arange(0, truck_type[1] - w + self.epsilon, 1.0):\n                    for z in np.arange(0, truck_type[2] - h + self.epsilon, 1.0):\n                        potential_position = (x, y, z)\n                        potential_dimensions = (l, w, h)\n                        if self._is_valid_placement(potential_position, potential_dimensions, truck_type, occupied_volumes):\n                            waste = self._calculate_waste(potential_position, potential_dimensions, truck_type)\n                            if waste < min_waste:\n                                min_waste = waste\n                                best_x, best_y, best_z = x, y, z\n                                best_orientation = orientation_index\n\n        if best_x is not None:\n            return best_x, best_y, best_z, best_orientation, min_waste\n        else:\n            return None, None, None, None, float('inf')\n\n    def _calculate_waste(self, position, dimensions, container_dims):\n        x, y, z = position\n        l, w, h = dimensions\n        cl, cw, ch = container_dims\n        waste = (cl - (x + l)) * cw * ch + (cw - (y + w)) * cl * ch + (ch - (z + h)) * cl * cw\n        return waste\n\n    def _place_in_new_truck(self, item_type, truck_type):\n        \n        best_orientation = -1\n        min_waste = float('inf')\n        best_x, best_y, best_z = 0,0,0\n        \n        orientations = self._get_orientations(item_type)\n        for orientation_index, (orientation, (l, w, h)) in enumerate(orientations):\n            if l <= truck_type[0] and w <= truck_type[1] and h <= truck_type[2]:\n                waste = self._calculate_waste((0, 0, 0), (l, w, h), truck_type)\n                if waste < min_waste:\n                    min_waste = waste\n                    best_orientation = orientation_index\n        \n        if best_orientation != -1:\n            return -1, 0, 0, 0, best_orientation, min_waste\n        else:\n            return -2, 0, 0, 0, 0, float('inf')\nimport numpy as np\n\nclass AlgorithmFIX1(Algorithm):\n    def _find_position_in_truck(self, item_type, truck_type, occupied_volumes):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        min_waste = float('inf')\n        \n        orientations = self._get_orientations(item_type)\n        \n        max_steps = 10\n        \n        for orientation_index, (orientation, (l, w, h)) in enumerate(orientations):\n            \n            num_positions = int(np.ceil(truck_type[0] / max(1.0,l)) * np.ceil(truck_type[1] / max(1.0,w)) * np.ceil(truck_type[2] / max(1.0,h)))\n            \n            \n            x_step = max(1.0, l)\n            y_step = max(1.0, w)\n            z_step = max(1.0, h)\n            \n            x_range = np.arange(0, truck_type[0] - l + self.epsilon, x_step)\n            y_range = np.arange(0, truck_type[1] - w + self.epsilon, y_step)\n            z_range = np.arange(0, truck_type[2] - h + self.epsilon, z_step)\n            \n            \n            \n            if len(x_range) * len(y_range) * len(z_range) > max_steps:\n                \n                x_range = np.linspace(0, truck_type[0] - l + self.epsilon, min(len(x_range), int(np.sqrt(max_steps) )) )\n                y_range = np.linspace(0, truck_type[1] - w + self.epsilon, min(len(y_range), int(np.sqrt(max_steps))) )\n                z_range = np.array([0.0])\n            \n\n            for x in x_range:\n                for y in y_range:\n                    for z in z_range:\n                        potential_position = (x, y, z)\n                        potential_dimensions = (l, w, h)\n                        if self._is_valid_placement(potential_position, potential_dimensions, truck_type, occupied_volumes):\n                            waste = self._calculate_waste(potential_position, potential_dimensions, truck_type)\n                            if waste < min_waste:\n                                min_waste = waste\n                                best_x, best_y, best_z = x, y, z\n                                best_orientation = orientation_index\n\n        if best_x is not None:\n            return best_x, best_y, best_z, best_orientation, min_waste\n        else:\n            return None, None, None, None, float('inf')",
          "objective": 27.15,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     },
     {
          "algorithm": "The algorithm iterates through unplaced items, tries all orientations and positions in existing trucks, and if no valid placement is found, opens a new truck and places the item there using a bottom-left-fill strategy.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {The algorithm iterates through unplaced items, tries all orientations and positions in existing trucks, and if no valid placement is found, opens a new truck and places the item there using a bottom-left-fill strategy.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        for item_index, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] <= 0:\n                continue\n\n            for truck_index, truck in enumerate(trucks_in_use):\n                x, y, z, orientation = self._find_placement_in_truck(item_type, truck_type, truck['occupied_volumes'])\n                if x != -1:\n                    return truck_index, item_index, x, y, z, orientation\n            \n\n            x, y, z, orientation = self._find_placement_in_new_truck(item_type, truck_type)\n            if x != -1:\n                return -1, item_index, x, y, z, orientation\n            \n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n\n    def _find_placement_in_truck(self, item_type, truck_type, occupied_volumes):\n        for orientation, item_dims in self._get_orientations(item_type):\n            length, width, height = item_dims\n            \n            positions = self._generate_potential_positions(truck_type, occupied_volumes, length, width, height)\n            for x, y, z in positions:\n                if self._is_valid_placement((x, y, z), (length, width, height), truck_type, occupied_volumes):\n                    return x, y, z, orientation\n        return -1, -1, -1, -1\n\n    def _find_placement_in_new_truck(self, item_type, truck_type):\n        for orientation, item_dims in self._get_orientations(item_type):\n            length, width, height = item_dims\n            if self._is_valid_placement((0, 0, 0), (length, width, height), truck_type, []):\n                return 0, 0, 0, orientation\n        return -1, -1, -1, -1\n    \n    def _generate_potential_positions(self, truck_dims, occupied_volumes, length, width, height):\n        cl, cw, ch = truck_dims\n        potential_positions = []\n\n        if not occupied_volumes:\n            return [(0, 0, 0)]\n\n        for item in occupied_volumes:\n            ix, iy, iz = item['x'], item['y'], item['z']\n            il, iw, ih = item['length'], item['width'], item['height']\n\n\n            potential_positions.append((ix + il, iy, iz))\n            potential_positions.append((ix, iy + iw, iz))\n            potential_positions.append((ix, iy, iz + ih))\n\n        potential_positions.append((0, 0, 0))\n\n        cleaned_positions = []\n        for x, y, z in potential_positions:\n            is_duplicate = False\n            for cx, cy, cz in cleaned_positions:\n                if abs(x - cx) < self.epsilon and abs(y - cy) < self.epsilon and abs(z - cz) < self.epsilon:\n                    is_duplicate = True\n                    break\n            if not is_duplicate:\n                cleaned_positions.append((x, y, z))\n\n        return cleaned_positions",
          "objective": 27.35,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes filling existing trucks by iterating through item types and orientations, placing the first valid stable placement found, or opens a new truck if no placement is possible.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes filling existing trucks by iterating through item types and orientations, placing the first valid stable placement found, or opens a new truck if no placement is possible.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_placement(self, unplaced_items, trucks_in_use, truck_type):\n        for item_index, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                for truck_index in range(len(trucks_in_use)):\n                    found_placement = self._attempt_placement_in_truck(item_index, item_type, trucks_in_use[truck_index], truck_type)\n                    if found_placement:\n                        return truck_index, item_index, found_placement['x'], found_placement['y'], found_placement['z'], found_placement['orientation']\n\n                new_truck_placement = self._attempt_placement_in_new_truck(item_index, item_type, truck_type)\n                if new_truck_placement:\n                    return -1, item_index, new_truck_placement['x'], new_truck_placement['y'], new_truck_placement['z'], new_truck_placement['orientation']\n        return -1, 0, 0, 0, 0, 0\n\n    def _attempt_placement_in_truck(self, item_index, item_type, truck, truck_type):\n        for orientation, dims in self._get_orientations(item_type):\n            length, width, height = dims\n            for x in np.arange(0, truck_type[0], 1.0):\n                for y in np.arange(0, truck_type[1], 1.0):\n                    z = 0.0\n                    item_pos = (x, y, z)\n                    item_dims = (length, width, height)\n                    if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                        return {'x': x, 'y': y, 'z': z, 'orientation': orientation}\n                    \n                    z=0.0\n                    for placed_item in truck['occupied_volumes']:\n                      placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                      placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])   \n                      if x >= placed_item_pos[0] and x+ length <= placed_item_pos[0]+placed_item_dims[0] and y >= placed_item_pos[1] and y + width <= placed_item_pos[1]+placed_item_dims[1]:\n                        z= placed_item_pos[2] + placed_item_dims[2]\n                        item_pos = (x, y, z)\n                        item_dims = (length, width, height)\n                        if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                            return {'x': x, 'y': y, 'z': z, 'orientation': orientation}\n        return None\n\n    def _attempt_placement_in_new_truck(self, item_index, item_type, truck_type):\n        for orientation, dims in self._get_orientations(item_type):\n            length, width, height = dims\n            x, y, z = 0.0, 0.0, 0.0\n            item_pos = (x, y, z)\n            item_dims = (length, width, height)\n            if self._is_within_container_bounds(item_pos, item_dims, truck_type):\n                return {'x': x, 'y': y, 'z': z, 'orientation': orientation}\n        return None\nclass AlgorithmFIX1(Algorithm):\n    def _attempt_placement_in_truck(self, item_index, item_type, truck, truck_type):\n        for orientation, dims in self._get_orientations(item_type):\n            length, width, height = dims\n            for x in np.arange(0, truck_type[0] - length + self.epsilon, 1.0):\n                for y in np.arange(0, truck_type[1] - width + self.epsilon, 1.0):\n                    z = 0.0\n                    item_pos = (x, y, z)\n                    item_dims = (length, width, height)\n                    if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                        return {'x': x, 'y': y, 'z': z, 'orientation': orientation}\n                    \n                    z=0.0\n                    for placed_item in truck['occupied_volumes']:\n                      placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                      placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])   \n                      if x >= placed_item_pos[0] and x+ length <= placed_item_pos[0]+placed_item_dims[0] and y >= placed_item_pos[1] and y + width <= placed_item_pos[1]+placed_item_dims[1]:\n                        z= placed_item_pos[2] + placed_item_dims[2]\n                        item_pos = (x, y, z)\n                        item_dims = (length, width, height)\n                        if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                            return {'x': x, 'y': y, 'z': z, 'orientation': orientation}\n        return None",
          "objective": 28.35,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     }
]