[
     {
          "algorithm": "Iteratively selects the item type with the smallest base area and attempts to place it, prioritizing the lowest available z-coordinate and best supporting area, using a skyline heuristic to find potential positions.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively selects the item type with the smallest base area and attempts to place it, prioritizing the lowest available z-coordinate and best supporting area, using a skyline heuristic to find potential positions.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_support_area = -1\n\n        item_index = self._select_item(unplaced_items)\n\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation, support_area = self._find_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x != -1:\n                if best_truck_index == -1 or z < best_z or (z == best_z and support_area > best_support_area):\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_support_area = support_area\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        min_base_area = float('inf')\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                base_area = item_type['length'] * item_type['width']\n                if base_area < min_base_area:\n                    min_base_area = base_area\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_support_area = -1\n\n        for orientation_index, item_dims in self._get_orientations(item_type):\n            possible_positions = self._generate_possible_positions(truck_type, occupied_volumes, item_dims)\n\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                    support_area = self._calculate_support_area((x, y, z), item_dims, occupied_volumes)\n\n                    if best_x == -1 or z < best_z or (z == best_z and support_area > best_support_area):\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n                        best_support_area = support_area\n\n        return best_x, best_y, best_z, best_orientation, best_support_area\n\n    def _generate_possible_positions(self, truck_dims, occupied_volumes, item_dims):\n        positions = []\n        if not occupied_volumes:\n            positions.append((0.0, 0.0, 0.0))\n            return positions\n\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n\n        valid_positions = []\n\n        for x, y, z in positions:\n            is_valid = True\n            for placed_item in occupied_volumes:\n                 placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                 placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                 if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                      is_valid = False\n                      break\n            if is_valid:\n                valid_positions.append((x, y, z))\n\n        return valid_positions\n    \n    def _calculate_support_area(self, item_to_place_pos, item_to_place_dims, occupied_volumes):\n        px, py, pz = item_to_place_pos\n        pl, pw, _ = item_to_place_dims\n        if abs(pz) < self.epsilon:\n            return pl * pw\n\n        total_support_area = 0.0\n        for placed_item in occupied_volumes:\n            placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n            placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n\n            if abs((placed_item_pos[2] + placed_item_dims[2]) - pz) < self.epsilon:\n                overlap_x = max(0, min(px + pl, placed_item_pos[0] + placed_item_dims[0]) - max(px, placed_item_pos[0]))\n                overlap_y = max(0, min(py + pw, placed_item_pos[1] + placed_item_dims[1]) - max(py, placed_item_pos[1]))\n                total_support_area += overlap_x * overlap_y\n\n        return total_support_area",
          "objective": 23.7,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects the item type with the largest volume, places it in the best available position based on height minimization, and opens a new truck only if no suitable position is found in existing trucks.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects the item type with the largest volume, places it in the best available position based on height minimization, and opens a new truck only if no suitable position is found in existing trucks.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_height = float('inf')\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            x, y, z, orientation = self._find_best_position_in_truck(unplaced_items[item_index], truck_type, truck['occupied_volumes'])\n            if x != -1:\n                dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n                if z + dims[2] < min_height:\n                    min_height = z + dims[2]\n                    best_truck_index = truck_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        if best_truck_index == -1:\n            x, y, z, orientation = self._find_best_position_in_new_truck(unplaced_items[item_index], truck_type)\n            if x != -1:\n                return -1, item_index, x, y, z, orientation\n            else:\n                return -1, -1, -1, -1, -1, -1\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item_to_place(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_position_in_truck(self, item_type, truck_type, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_height = float('inf')\n\n        for orientation, dims in self._get_orientations(item_type):\n            positions = self._generate_potential_positions(truck_type, occupied_volumes, dims[0], dims[1], dims[2])\n            for x, y, z in positions:\n                if self._is_valid_placement((x, y, z), dims, truck_type, occupied_volumes):\n                    if z + dims[2] < min_height:\n                        min_height = z + dims[2]\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation\n        return best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_new_truck(self, item_type, truck_type):\n        for orientation, dims in self._get_orientations(item_type):\n            if self._is_valid_placement((0, 0, 0), dims, truck_type, []):\n                return 0, 0, 0, orientation\n        return -1, -1, -1, -1\n\n    def _generate_potential_positions(self, truck_dims, occupied_volumes, length, width, height):\n        potential_positions = [(0, 0, 0)]\n        for item in occupied_volumes:\n            potential_positions.append((item['x'] + item['length'], item['y'], item['z']))\n            potential_positions.append((item['x'], item['y'] + item['width'], item['z']))\n            potential_positions.append((item['x'], item['y'], item['z'] + item['height']))\n\n        cleaned_positions = []\n        for x, y, z in potential_positions:\n            is_duplicate = False\n            for cx, cy, cz in cleaned_positions:\n                if abs(x - cx) < self.epsilon and abs(y - cy) < self.epsilon and abs(z - cz) < self.epsilon:\n                    is_duplicate = True\n                    break\n            if not is_duplicate:\n                cleaned_positions.append((x, y, z))\n\n        return cleaned_positions",
          "objective": 24.75,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Iteratively select the item type with the largest volume and attempt to place it in the first available truck or a new truck, trying all 6 orientations at the lowest feasible position, using a heuristic based on minimum wasted space.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively select the item type with the largest volume and attempt to place it in the first available truck or a new truck, trying all 6 orientations at the lowest feasible position, using a heuristic based on minimum wasted space.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = 0.0\n        best_y = 0.0\n        best_z = 0.0\n        best_orientation = 0\n        min_wasted_space = float('inf')\n\n        item_index = self._select_item(unplaced_items)\n\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0  # No items left to place\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x is not None:\n                item_dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n\n                item_placement = {\n                    'item_type_id': unplaced_items[item_index]['item_id'],\n                    'x': x,\n                    'y': y,\n                    'z': z,\n                    'length': item_dims[0],\n                    'width': item_dims[1],\n                    'height': item_dims[2]\n                }\n\n                if truck_index == -1:\n                    new_truck_volumes = [item_placement]\n                else:\n                    new_truck_volumes = trucks_in_use[truck_index]['occupied_volumes'] + [item_placement]\n\n                wasted_space = self._calculate_wasted_space(truck_type, new_truck_volumes)\n\n                if wasted_space < min_wasted_space:\n                    min_wasted_space = wasted_space\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n\n        return best_item_index\n\n\n    def _find_position_for_item(self, item_type, truck_type, occupied_volumes):\n        possible_positions = self._generate_possible_positions(truck_type, occupied_volumes)\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n\n        for orientation_index, item_dims in self._get_orientations(item_type):\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                    return x, y, z, orientation_index\n\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_possible_positions(self, truck_dims, occupied_volumes):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n\n        return positions\n\n    def _calculate_wasted_space(self, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return total_volume - occupied_volume",
          "objective": 24.85,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Iteratively place items by selecting the item with the maximum demand and finding the best position in existing trucks or a new truck based on a scoring function that considers stability and space utilization.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively place items by selecting the item with the maximum demand and finding the best position in existing trucks or a new truck based on a scoring function that considers stability and space utilization.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = 0.0\n        best_y = 0.0\n        best_z = 0.0\n        best_orientation = 0\n        best_score = -1.0\n\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_best_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x is not None:\n                dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n                new_item = {\n                    'item_type_id': unplaced_items[item_index]['item_id'],\n                    'x': x,\n                    'y': y,\n                    'z': z,\n                    'length': dims[0],\n                    'width': dims[1],\n                    'height': dims[2]\n                }\n\n                if truck_index == -1:\n                    new_volumes = [new_item]\n                else:\n                    new_volumes = occupied_volumes + [new_item]\n                score = self._evaluate_placement(truck_type, new_volumes)\n\n                if score > best_score:\n                    best_score = score\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item_to_place(self, unplaced_items):\n        best_item_index = -1\n        max_quantity = -1\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                if item_type['quantity'] > max_quantity:\n                    max_quantity = item_type['quantity']\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_area_utilization = -1.0\n\n        for orientation_index, dims in self._get_orientations(item_type):\n            possible_positions = self._generate_potential_positions(truck_type, occupied_volumes, dims[0], dims[1], dims[2])\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), dims, truck_type, occupied_volumes):\n                    area_utilization = self._calculate_area_utilization((x,y,z), dims, truck_type, occupied_volumes)\n\n                    if area_utilization > best_area_utilization:\n                        best_area_utilization = area_utilization\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_potential_positions(self, truck_dims, occupied_volumes, length, width, height):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n        return positions\n\n    def _calculate_area_utilization(self, position, dims, truck_dims, occupied_volumes):\n        length, width, height = dims\n        x, y, z = position\n        return (length * width * height) / (truck_dims[0] * truck_dims[1] * truck_dims[2])\n\n    def _evaluate_placement(self, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return occupied_volume / total_volume",
          "objective": 25.35,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects the largest volume item and places it in the best available position, prioritizing bottom-left corner placement and stability, creating new trucks when necessary.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects the largest volume item and places it in the best available position, prioritizing bottom-left corner placement and stability, creating new trucks when necessary.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_volume = -1\n\n        item_index = self._select_item(unplaced_items)\n\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation, volume = self._find_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x != -1:\n                if best_truck_index == -1 or volume>best_volume:\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_volume = volume\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_volume = -1\n\n        for orientation_index, item_dims in self._get_orientations(item_type):\n            possible_positions = self._generate_possible_positions(truck_type, occupied_volumes)\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                    volume = item_dims[0]*item_dims[1]*item_dims[2]\n                    if best_x == -1 or volume > best_volume:\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n                        best_volume = volume\n\n        return best_x, best_y, best_z, best_orientation, best_volume\n\n    def _generate_possible_positions(self, truck_dims, occupied_volumes):\n        positions = []\n        if not occupied_volumes:\n            positions.append((0.0, 0.0, 0.0))\n            return positions\n\n        occupied_volumes.sort(key=lambda item: (item['z'], item['y'], item['x']))\n\n        z_levels = sorted(list(set([item['z'] + item['height'] for item in occupied_volumes])))\n        if 0.0 not in z_levels:\n            z_levels.insert(0,0.0)\n\n        for z in z_levels:\n            level_items = [item for item in occupied_volumes if abs(item['z'] - z) < self.epsilon]\n            level_items.sort(key=lambda item: (item['y'],item['x']))\n\n            y_levels = sorted(list(set([item['y'] + item['width'] for item in level_items])))\n            if 0.0 not in y_levels :\n                y_levels.insert(0,0.0)\n\n            for y in y_levels:\n                line_items = [item for item in level_items if abs(item['y'] - y) < self.epsilon ]\n                line_items.sort(key=lambda item:item['x'])\n\n                x_levels = sorted(list(set([item['x'] + item['length'] for item in line_items])))\n                if 0.0 not in x_levels:\n                    x_levels.insert(0,0.0)\n                for x in x_levels:\n                    positions.append((x,y,z))\n            \n        return positions",
          "objective": 26.25,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]