[
     {
          "algorithm": "Places the item that maximizes the ratio of volume to combined surface area, prioritizing compact shapes for better space utilization.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Places the item that maximizes the ratio of volume to combined surface area, prioritizing compact shapes for better space utilization.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = 0.0\n        best_y = 0.0\n        best_z = 0.0\n        best_orientation = 0\n        best_score = -1.0\n\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_best_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x is not None:\n                dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n                new_item = {\n                    'item_type_id': unplaced_items[item_index]['item_id'],\n                    'x': x,\n                    'y': y,\n                    'z': z,\n                    'length': dims[0],\n                    'width': dims[1],\n                    'height': dims[2]\n                }\n\n                if truck_index == -1:\n                    new_volumes = [new_item]\n                else:\n                    new_volumes = occupied_volumes + [new_item]\n                score = self._evaluate_placement(truck_type, new_volumes)\n\n                if score > best_score:\n                    best_score = score\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item_to_place(self, unplaced_items):\n        best_item_index = -1\n        max_volume_to_sa_ratio = -1.0\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                l, w, h = item_type['length'], item_type['width'], item_type['height']\n                volume = l * w * h\n                surface_area = 2 * (l * w + l * h + w * h)\n                if surface_area > 0:\n                    volume_to_sa_ratio = volume / surface_area\n                else:\n                    volume_to_sa_ratio = 0.0\n                if volume_to_sa_ratio > max_volume_to_sa_ratio:\n                    max_volume_to_sa_ratio = volume_to_sa_ratio\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fit_score = float('inf')\n\n        for orientation_index, dims in self._get_orientations(item_type):\n            possible_positions = self._generate_potential_positions(truck_type, occupied_volumes, dims[0], dims[1], dims[2])\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), dims, truck_type, occupied_volumes):\n                    fit_score = self._calculate_fit_score((x, y, z), dims, truck_type)\n\n                    if fit_score < best_fit_score:\n                        best_fit_score = fit_score\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_potential_positions(self, truck_dims, occupied_volumes, length, width, height):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n        return positions\n\n    def _calculate_fit_score(self, position, dims, truck_dims):\n        length, width, height = dims\n        x, y, z = position\n        length_diff = abs(truck_dims[0] - (x + length))\n        width_diff = abs(truck_dims[1] - (y + width))\n        return length_diff + width_diff\n\n    def _evaluate_placement(self, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return occupied_volume / total_volume",
          "objective": 21.95,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects items based on a combination of remaining quantity and volume, iteratively placing them at the lowest available Z, maximizing contact area, and penalizing unused space.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects items based on a combination of remaining quantity and volume, iteratively placing them at the lowest available Z, maximizing contact area, and penalizing unused space.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_score = -1.0\n\n        item_index = self._select_item(unplaced_items)\n\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x != -1:\n                dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n                score = self._evaluate_placement((x, y, z), dims, truck_type, occupied_volumes)\n\n                if score > best_score:\n                    best_score = score\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_priority = -1.0\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                priority = (item_type['quantity'] / 60.0) + (volume / (40.0 * 32.0 * 35.0))  # Normalize and combine factors\n                if priority > best_priority:\n                    best_priority = priority\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_contact_area = -1\n\n        for orientation_index, item_dims in self._get_orientations(item_type):\n            possible_positions = self._generate_possible_positions(truck_type, occupied_volumes, item_dims)\n\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                    contact_area = self._calculate_contact_area((x, y, z), item_dims, occupied_volumes)\n\n                    if best_x == -1 or z < best_z or (z == best_z and contact_area > best_contact_area):\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n                        best_contact_area = contact_area\n\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_possible_positions(self, truck_dims, occupied_volumes, item_dims):\n        positions = []\n        if not occupied_volumes:\n            positions.append((0.0, 0.0, 0.0))\n            return positions\n\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n        tolerance = 1e-6\n        valid_positions = []\n\n        for x, y, z in positions:\n            is_valid = True\n            for placed_item in occupied_volumes:\n                 placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                 placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                 if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                      is_valid = False\n                      break\n            if is_valid:\n               if (x >= 0.0 - tolerance and x + item_dims[0] <= truck_dims[0] + tolerance and\n                     y >= 0.0 - tolerance and y + item_dims[1] <= truck_dims[1] + tolerance and\n                     z >= 0.0 - tolerance and z + item_dims[2] <= truck_dims[2] + tolerance):\n                    valid_positions.append((x, y, z))\n\n        return valid_positions\n    \n    def _calculate_contact_area(self, item_to_place_pos, item_to_place_dims, occupied_volumes):\n        px, py, pz = item_to_place_pos\n        pl, pw, _ = item_to_place_dims\n        if abs(pz) < self.epsilon:\n            return pl * pw\n\n        total_contact_area = 0.0\n        for placed_item in occupied_volumes:\n            placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n            placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n\n            if abs((placed_item_pos[2] + placed_item_dims[2]) - pz) < self.epsilon:\n                overlap_x = max(0, min(px + pl, placed_item_pos[0] + placed_item_dims[0]) - max(px, placed_item_pos[0]))\n                overlap_y = max(0, min(py + pw, placed_item_pos[1] + placed_item_dims[1]) - max(py, placed_item_pos[1]))\n                total_contact_area += overlap_x * overlap_y\n\n        return total_contact_area\n\n    def _evaluate_placement(self, item_pos, item_dims, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        current_item_volume = item_dims[0] * item_dims[1] * item_dims[2]\n\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n\n        empty_space_penalty = (total_volume - (occupied_volume + current_item_volume)) / total_volume\n        x, y, z = item_pos\n        utilization_reward = self._calculate_contact_area((x, y, z), item_dims, occupied_volumes) / (item_dims[0] * item_dims[1])\n        return utilization_reward - 0.1 * empty_space_penalty",
          "objective": 22.7,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Places the item with the smallest footprint (length * width), prioritizing items that neatly fill container dimensions and using a skyline approach.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Places the item with the smallest footprint (length * width), prioritizing items that neatly fill container dimensions and using a skyline approach.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = 0.0\n        best_y = 0.0\n        best_z = 0.0\n        best_orientation = 0\n        best_score = -1.0\n\n        item_index = self._select_item_to_place(unplaced_items)\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation = self._find_best_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x is not None:\n                dims = self._get_orientations(unplaced_items[item_index])[orientation][1]\n                new_item = {\n                    'item_type_id': unplaced_items[item_index]['item_id'],\n                    'x': x,\n                    'y': y,\n                    'z': z,\n                    'length': dims[0],\n                    'width': dims[1],\n                    'height': dims[2]\n                }\n\n                if truck_index == -1:\n                    new_volumes = [new_item]\n                else:\n                    new_volumes = occupied_volumes + [new_item]\n                score = self._evaluate_placement(truck_type, new_volumes)\n\n                if score > best_score:\n                    best_score = score\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item_to_place(self, unplaced_items):\n        best_item_index = -1\n        min_footprint = float('inf')\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                footprint = item_type['length'] * item_type['width']\n                if footprint < min_footprint:\n                    min_footprint = footprint\n                    best_item_index = i\n        return best_item_index\n\n    def _find_best_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_fit_score = float('inf')\n\n        for orientation_index, dims in self._get_orientations(item_type):\n            possible_positions = self._generate_potential_positions(truck_type, occupied_volumes, dims[0], dims[1], dims[2])\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), dims, truck_type, occupied_volumes):\n                    fit_score = self._calculate_fit_score((x, y, z), dims, truck_type)\n\n                    if fit_score < best_fit_score:\n                        best_fit_score = fit_score\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n        return best_x, best_y, best_z, best_orientation\n\n    def _generate_potential_positions(self, truck_dims, occupied_volumes, length, width, height):\n        positions = [(0.0, 0.0, 0.0)]\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n        return positions\n\n    def _calculate_fit_score(self, position, dims, truck_dims):\n        length, width, height = dims\n        x, y, z = position\n        length_diff = abs(truck_dims[0] - (x + length))\n        width_diff = abs(truck_dims[1] - (y + width))\n        return length_diff + width_diff\n\n    def _evaluate_placement(self, truck_dims, occupied_volumes):\n        total_volume = truck_dims[0] * truck_dims[1] * truck_dims[2]\n        occupied_volume = 0.0\n        for item in occupied_volumes:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return occupied_volume / total_volume",
          "objective": 23.65,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Iteratively selects the item type with the smallest base area and attempts to place it, prioritizing the lowest available z-coordinate and best supporting area, using a skyline heuristic to find potential positions.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively selects the item type with the smallest base area and attempts to place it, prioritizing the lowest available z-coordinate and best supporting area, using a skyline heuristic to find potential positions.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_support_area = -1\n\n        item_index = self._select_item(unplaced_items)\n\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation, support_area = self._find_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x != -1:\n                if best_truck_index == -1 or z < best_z or (z == best_z and support_area > best_support_area):\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_support_area = support_area\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        min_base_area = float('inf')\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                base_area = item_type['length'] * item_type['width']\n                if base_area < min_base_area:\n                    min_base_area = base_area\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_support_area = -1\n\n        for orientation_index, item_dims in self._get_orientations(item_type):\n            possible_positions = self._generate_possible_positions(truck_type, occupied_volumes, item_dims)\n\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                    support_area = self._calculate_support_area((x, y, z), item_dims, occupied_volumes)\n\n                    if best_x == -1 or z < best_z or (z == best_z and support_area > best_support_area):\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n                        best_support_area = support_area\n\n        return best_x, best_y, best_z, best_orientation, best_support_area\n\n    def _generate_possible_positions(self, truck_dims, occupied_volumes, item_dims):\n        positions = []\n        if not occupied_volumes:\n            positions.append((0.0, 0.0, 0.0))\n            return positions\n\n        for item in occupied_volumes:\n            positions.append((item['x'] + item['length'], item['y'], item['z']))\n            positions.append((item['x'], item['y'] + item['width'], item['z']))\n            positions.append((item['x'], item['y'], item['z'] + item['height']))\n\n        valid_positions = []\n\n        for x, y, z in positions:\n            is_valid = True\n            for placed_item in occupied_volumes:\n                 placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                 placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                 if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                      is_valid = False\n                      break\n            if is_valid:\n                valid_positions.append((x, y, z))\n\n        return valid_positions\n    \n    def _calculate_support_area(self, item_to_place_pos, item_to_place_dims, occupied_volumes):\n        px, py, pz = item_to_place_pos\n        pl, pw, _ = item_to_place_dims\n        if abs(pz) < self.epsilon:\n            return pl * pw\n\n        total_support_area = 0.0\n        for placed_item in occupied_volumes:\n            placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n            placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n\n            if abs((placed_item_pos[2] + placed_item_dims[2]) - pz) < self.epsilon:\n                overlap_x = max(0, min(px + pl, placed_item_pos[0] + placed_item_dims[0]) - max(px, placed_item_pos[0]))\n                overlap_y = max(0, min(py + pw, placed_item_pos[1] + placed_item_dims[1]) - max(py, placed_item_pos[1]))\n                total_support_area += overlap_x * overlap_y\n\n        return total_support_area",
          "objective": 23.7,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Iteratively selects item types based on a combination of volume and remaining quantity, places them using a bottom-left heuristic, and prioritizes placements that maximize space utilization.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Iteratively selects item types based on a combination of volume and remaining quantity, places them using a bottom-left heuristic, and prioritizes placements that maximize space utilization.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index = -1\n        best_item_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_space_utilization = -1\n\n        item_index = self._select_item(unplaced_items)\n\n        if item_index == -1:\n            return -1, -1, 0.0, 0.0, 0.0, 0\n\n        for truck_index in range(-1, len(trucks_in_use)):\n            if truck_index == -1:\n                occupied_volumes = []\n            else:\n                occupied_volumes = trucks_in_use[truck_index]['occupied_volumes']\n\n            x, y, z, orientation, space_utilization = self._find_position_for_item(unplaced_items[item_index], truck_type, occupied_volumes)\n\n            if x != -1:\n                if best_truck_index == -1 or space_utilization > best_space_utilization:\n                    best_truck_index = truck_index\n                    best_item_index = item_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_space_utilization = space_utilization\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_score = -1\n\n        for i, item_type in enumerate(unplaced_items):\n            if item_type['quantity'] > 0:\n                volume = item_type['length'] * item_type['width'] * item_type['height']\n                quantity = item_type['quantity']\n                score = volume * np.log1p(quantity)\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_position_for_item(self, item_type, truck_type, occupied_volumes):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_space_utilization = -1\n\n        for orientation_index, item_dims in self._get_orientations(item_type):\n            possible_positions = self._generate_possible_positions(truck_type, occupied_volumes, item_dims)\n\n            for x, y, z in possible_positions:\n                if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                    space_utilization = self._calculate_space_utilization((x, y, z), item_dims, truck_type, occupied_volumes)\n\n                    if best_x == -1 or space_utilization > best_space_utilization:\n                        best_x = x\n                        best_y = y\n                        best_z = z\n                        best_orientation = orientation_index\n                        best_space_utilization = space_utilization\n\n        return best_x, best_y, best_z, best_orientation, best_space_utilization\n\n    def _generate_possible_positions(self, truck_dims, occupied_volumes, item_dims):\n        positions = []\n        if not occupied_volumes:\n            positions.append((0.0, 0.0, 0.0))\n            return positions\n\n        min_x = float('inf')\n        min_y = float('inf')\n        min_z = float('inf')\n\n        for x in sorted(list(set([0.0] + [item['x'] + item['length'] for item in occupied_volumes]))):\n            for y in sorted(list(set([0.0] + [item['y'] + item['width'] for item in occupied_volumes]))):\n                for z in sorted(list(set([0.0] + [item['z'] + item['height'] for item in occupied_volumes]))):\n                    is_valid = True\n                    for placed_item in occupied_volumes:\n                        placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                        placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                        if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                            is_valid = False\n                            break\n                    if is_valid and self._is_within_container_bounds((x,y,z), item_dims, truck_dims):\n                        positions.append((x, y, z))\n\n        return positions\n\n    def _calculate_space_utilization(self, item_to_place_pos, item_to_place_dims, truck_dims, occupied_volumes):\n        truck_length, truck_width, truck_height = truck_dims\n        item_volume = item_to_place_dims[0] * item_to_place_dims[1] * item_to_place_dims[2]\n        \n        total_volume = truck_length* truck_width*truck_height\n\n        used_volume = 0\n        for item in occupied_volumes:\n            used_volume += item['length'] * item['width'] * item['height']\n            \n        used_volume += item_volume\n        \n        return used_volume/total_volume",
          "objective": 24.7,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]