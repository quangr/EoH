{
     "algorithm": "This algorithm prioritizes items with higher volume, tries to place them lower in the container, and selects the position with the least remaining horizontal space.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes items with higher volume, tries to place them lower in the container, and selects the position with the least remaining horizontal space.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return -1, -1, 0, 0, 0, 0\n\n        best_truck_index = -1\n        best_x = 0\n        best_y = 0\n        best_z = 0\n        best_orientation = 0\n        best_score = float('inf')\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            x, y, z, orientation, score = self._find_best_position_in_truck(unplaced_items, item_index, truck['occupied_volumes'], truck_type)\n            if x is not None and score < best_score:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_score = score\n\n        if best_truck_index == -1:\n            x, y, z, orientation, score = self._find_best_position_new_truck(unplaced_items, item_index, truck_type)\n            if orientation is not None:\n                best_truck_index = -1\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_score = score\n            else:\n                return -1, -1, 0, 0, 0, 0\n\n        return best_truck_index, item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = -1\n        for i, item in enumerate(unplaced_items):\n            volume = item['length'] * item['width'] * item['height']\n            if volume > max_volume and item['quantity'] > 0:\n                max_volume = volume\n                best_item_index = i\n        return best_item_index\n\n    def _find_best_position_in_truck(self, unplaced_items, item_index, occupied_volumes, truck_type):\n        item_type = unplaced_items[item_index]\n        orientations = self._get_orientations(item_type)\n\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = float('inf')\n\n        for orientation_index, (L, W, H) in orientations:\n            x, y, z, score = self._find_position_with_score(item_type, (L, W, H), occupied_volumes, truck_type)\n            if x is not None and score < best_score:\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation_index\n                best_score = score\n\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _find_best_position_new_truck(self, unplaced_items, item_index, truck_type):\n        item_type = unplaced_items[item_index]\n        orientations = self._get_orientations(item_type)\n\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = float('inf')\n\n        for orientation_index, (L, W, H) in orientations:\n            if self._is_within_container_bounds((0, 0, 0), (L, W, H), truck_type):\n                score = H\n                if score < best_score:\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n                    best_orientation = orientation_index\n                    best_score = score\n\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _find_position_with_score(self, item_type, item_dims, occupied_volumes, truck_type):\n        L, W, H = item_dims\n        tl, tw, th = truck_type\n\n        best_x = None\n        best_y = None\n        best_z = None\n        best_score = float('inf')\n\n        potential_positions = []\n        if not occupied_volumes:\n            if self._is_valid_placement((0, 0, 0), (L, W, H), truck_type, occupied_volumes):\n                potential_positions.append((0,0,0))\n        else:\n            for placed_item in occupied_volumes:\n                px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n                pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n\n                possible_positions = [(px + pl, py, pz), (px, py + pw, pz), (px, py, pz + ph)]\n\n                for x, y, z in possible_positions:\n                    if self._is_valid_placement((x, y, z), (L, W, H), truck_type, occupied_volumes):\n                        potential_positions.append((x,y,z))\n\n        for x, y, z in potential_positions:\n          remaining_space = (tl - (x + L)) * (tw - (y + W))\n          score = z + remaining_space\n          if score < best_score:\n            best_x = x\n            best_y = y\n            best_z = z\n            best_score = score\n\n        return best_x, best_y, best_z, best_score",
     "objective": 22.4,
     "other_inf": null,
     "class_name": "Algorithm"
}