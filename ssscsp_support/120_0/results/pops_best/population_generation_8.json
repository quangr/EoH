{
     "algorithm": "This algorithm selects items based on a scoring system that prioritizes items with high volume and quantity, attempts to place them into existing trucks or a new truck based on a best-fit approach, and manages space efficiently by tracking occupied volumes.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm selects items based on a scoring system that prioritizes items with high volume and quantity, attempts to place them into existing trucks or a new truck based on a best-fit approach, and manages space efficiently by tracking occupied volumes.}\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        truck_index, item_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type):\n        best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation, best_score = None, None, None, None, None, None, -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n\n            for truck_index, truck in enumerate(trucks_in_use):\n                x, y, z, orientation, score = self._find_best_position_in_truck(item, truck['occupied_volumes'], truck_type, unplaced_items)\n                if score > best_score:\n                    best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation, best_score = truck_index, item_index, x, y, z, orientation, score\n\n        if best_truck_index is None:\n            item_index, x, y, z, orientation, score = self._find_best_position_new_truck(unplaced_items, truck_type)\n            if item_index is not None:\n                return -1, item_index, x, y, z, orientation\n            else:\n                return -1, -1, 0, 0, 0, 0\n\n        return best_truck_index, best_item_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, occupied_volumes, truck_type, unplaced_items):\n        best_x, best_y, best_z, best_orientation, best_score = None, None, None, None, -1\n        for orientation_index, (length, width, height) in self._get_orientations(item):\n            x, y, z, score = self._find_position_with_best_score(item, (length, width, height), occupied_volumes, truck_type, unplaced_items)\n            if score > best_score:\n                best_x, best_y, best_z, best_orientation, best_score = x, y, z, orientation_index, score\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _find_best_position_new_truck(self, unplaced_items, truck_type):\n        best_item_index, best_x, best_y, best_z, best_orientation, best_score = None, None, None, None, None, -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] <= 0:\n                continue\n            for orientation_index, (length, width, height) in self._get_orientations(item):\n                if self._is_valid_placement((0, 0, 0), (length, width, height), truck_type, []):\n                    score = self._calculate_item_score(item, (length, width, height), 0, unplaced_items)\n                    if score > best_score:\n                        best_item_index, best_x, best_y, best_z, best_orientation, best_score = item_index, 0, 0, 0, orientation_index, score\n\n        return best_item_index, best_x, best_y, best_z, best_orientation, best_score\n\n    def _find_position_with_best_score(self, item, item_dims, occupied_volumes, truck_type, unplaced_items):\n        best_x, best_y, best_z, best_score = None, None, None, -1\n\n        potential_positions = self._generate_potential_positions(occupied_volumes, truck_type)\n\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), item_dims, truck_type, occupied_volumes):\n                score = self._calculate_item_score(item, item_dims, len(occupied_volumes), unplaced_items)\n                if score > best_score:\n                    best_x, best_y, best_z, best_score = x, y, z, score\n\n        return best_x, best_y, best_z, best_score\n\n    def _generate_potential_positions(self, occupied_volumes, truck_type):\n        if not occupied_volumes:\n            return [(0, 0, 0)]\n\n        potential_positions = []\n        for item in occupied_volumes:\n            potential_positions.append((item['x'] + item['length'], item['y'], item['z']))\n            potential_positions.append((item['x'], item['y'] + item['width'], item['z']))\n            potential_positions.append((item['x'], item['y'], item['z'] + item['height']))\n\n        return potential_positions\n\n    def _calculate_item_score(self, item, item_dims, num_items, unplaced_items):\n        length, width, height = item_dims\n        volume = length * width * height\n        quantity = item['quantity']\n        stability_factor = length * width\n        density_factor = volume / (length*width*height if length*width*height !=0 else 1)\n        utilization_factor = (num_items + 1) ** 0.5\n\n        return volume * quantity * stability_factor / utilization_factor * density_factor",
     "objective": 22.15,
     "other_inf": null,
     "class_name": "Algorithm"
}