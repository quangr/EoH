[
     {
          "algorithm": "Selects the largest unplaced item, iterates through trucks, and attempts to place it using a bottom-left-back heuristic, creating a new truck if necessary.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n        # {Selects the largest unplaced item, iterates through trucks, and attempts to place it using a bottom-left-back heuristic, creating a new truck if necessary.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _find_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation = self._find_position_in_truck(item, truck, truck_type)\n            if x != -1:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item, truck_type)\n        if x != -1:\n            return -1, x, y, z, orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item, truck, truck_type):\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._bottom_left_back(item_dims, truck_type, truck['occupied_volumes'])\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    return float(x), float(y), float(z), orientation_index\n        return -1, -1, -1, -1\n\n    def _find_position_in_new_truck(self, item, truck_type):\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n                return float(x), float(y), float(z), orientation_index\n\n        return -1, -1, -1, -1\n\n    def _bottom_left_back(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n\n        potential_positions = []\n\n        if not occupied_volumes:\n            return 0, 0, 0\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x'] + placed_item['length']\n            y = placed_item['y'] + placed_item['width']\n            z = placed_item['z'] + placed_item['height']\n\n            potential_positions.append((x, placed_item['y'], placed_item['z']))\n            potential_positions.append((placed_item['x'], y, placed_item['z']))\n            potential_positions.append((placed_item['x'], placed_item['y'], z))\n\n        potential_positions.append((0,0,0))\n        valid_positions = []\n        for x, y, z in potential_positions:\n              if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                  is_valid = True\n                  for placed_item in occupied_volumes:\n                      placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                      placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                      if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                          is_valid = False\n                          break\n                  if is_valid:\n                      valid_positions.append((x,y,z))\n        \n        best_x, best_y, best_z = -1, -1, -1\n        if valid_positions:\n            best_x, best_y, best_z = min(valid_positions, key=lambda p: (p[2], p[1], p[0]))\n\n        return best_x, best_y, best_z",
          "objective": 25.3,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects an item based on a packing efficiency score, iterates through existing trucks prioritizing those compatible, and places the item in the best position or opens a new truck if needed.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n        # {Selects an item based on a packing efficiency score, iterates through existing trucks prioritizing those compatible, and places the item in the best position or opens a new truck if needed.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items, trucks_in_use, truck_type)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = -1\n        best_packing_efficiency = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                packing_efficiency = self._calculate_packing_efficiency(item, trucks_in_use, truck_type)\n                if packing_efficiency > best_packing_efficiency:\n                    best_packing_efficiency = packing_efficiency\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _calculate_packing_efficiency(self, item, trucks_in_use, truck_type):\n        total_available_volume = sum([self._calculate_available_volume(truck, truck_type) for truck in trucks_in_use])\n        if not trucks_in_use:\n            truck_length, truck_width, truck_height = truck_type\n            total_available_volume = truck_length * truck_width * truck_height;\n        item_volume = item['length'] * item['width'] * item['height']\n        if total_available_volume == 0:\n            return 0\n        return item_volume / total_available_volume\n\n    def _calculate_available_volume(self, truck, truck_type):\n        truck_length, truck_width, truck_height = truck_type\n        occupied_volume = sum([item['length'] * item['width'] * item['height'] for item in truck['occupied_volumes']])\n        return truck_length * truck_width * truck_height - occupied_volume\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_volume_utilization = -1\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation, volume_utilization = self._find_best_position_in_truck(item, truck, truck_type)\n            if x != -1 and volume_utilization > best_volume_utilization:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_volume_utilization = volume_utilization\n\n        x, y, z, orientation, volume_utilization = self._find_best_position_in_new_truck(item, truck_type)\n        if x != -1 and volume_utilization > best_volume_utilization:\n            return -1, x, y, z, orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_volume_utilization = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._find_position_bottom_left_back(item_dims, truck_type, truck['occupied_volumes'])\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    volume_utilization = self._calculate_volume_utilization(item_dims, truck_type, truck['occupied_volumes'])\n                    if volume_utilization > best_volume_utilization:\n                          best_x = float(x)\n                          best_y = float(y)\n                          best_z = float(z)\n                          best_orientation = orientation_index\n                          best_volume_utilization = volume_utilization\n        return best_x, best_y, best_z, best_orientation, best_volume_utilization\n\n    def _find_best_position_in_new_truck(self, item, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_volume_utilization = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n                volume_utilization = self._calculate_volume_utilization(item_dims, truck_type, [])\n                if volume_utilization > best_volume_utilization:\n                    best_x = float(x)\n                    best_y = float(y)\n                    best_z = float(z)\n                    best_orientation = orientation_index\n                    best_volume_utilization = volume_utilization\n\n        return best_x, best_y, best_z, best_orientation, best_volume_utilization\n\n    def _calculate_volume_utilization(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n        container_length, container_width, container_height = container_dims\n        available_volume = container_length * container_width * container_height - sum([placed_item['length'] * placed_item['width'] * placed_item['height'] for placed_item in occupied_volumes])\n        item_volume = l * w * h\n        if available_volume == 0:\n            return 0\n        return item_volume / available_volume\n\n    def _find_position_bottom_left_back(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n        potential_positions = []\n\n        if not occupied_volumes:\n            return 0, 0, 0\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x'] + placed_item['length']\n            y = placed_item['y'] + placed_item['width']\n            z = placed_item['z'] + placed_item['height']\n\n            potential_positions.append((x, placed_item['y'], placed_item['z']))\n            potential_positions.append((placed_item['x'], y, placed_item['z']))\n            potential_positions.append((placed_item['x'], placed_item['y'], z))\n\n        potential_positions.append((0,0,0))\n        valid_positions = []\n        for x, y, z in potential_positions:\n              if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                  is_valid = True\n                  for placed_item in occupied_volumes:\n                      placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                      placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                      if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                          is_valid = False\n                          break\n                  if is_valid:\n                      valid_positions.append((x,y,z))\n        \n        best_x, best_y, best_z = -1, -1, -1\n        if valid_positions:\n            best_x, best_y, best_z = min(valid_positions, key=lambda p: (p[2], p[1], p[0]))\n\n        return best_x, best_y, best_z",
          "objective": 25.35,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects the unplaced item with the largest remaining quantity, attempts to place it in existing trucks based on a best-fit heuristic minimizing wasted space, creates a new truck if needed.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects the unplaced item with the largest remaining quantity, attempts to place it in existing trucks based on a best-fit heuristic minimizing wasted space, creates a new truck if needed.}\n\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        \n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_quantity = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                if item['quantity'] > max_quantity:\n                    max_quantity = item['quantity']\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_waste = float('inf')\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation, waste = self._find_best_position_in_truck(item, truck, truck_type)\n            if x != -1 and waste < min_waste:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                min_waste = waste\n\n        x, y, z, orientation, waste = self._find_position_in_new_truck(item, truck_type)\n        if x != -1 and waste < min_waste:\n            return -1, x, y, z, orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_waste = float('inf')\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._bottom_left_back(item_dims, truck_type, truck['occupied_volumes'])\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    waste = self._calculate_waste(item_pos,item_dims,truck_type,truck['occupied_volumes'])\n                    if waste < min_waste:\n                        best_x = float(x)\n                        best_y = float(y)\n                        best_z = float(z)\n                        best_orientation = orientation_index\n                        min_waste = waste\n        return best_x, best_y, best_z, best_orientation, min_waste\n    \n    def _calculate_waste(self, item_pos, item_dims, container_dims, occupied_volumes):\n        total_volume = container_dims[0] * container_dims[1] * container_dims[2]\n        occupied_volume = 0\n        for placed_item in occupied_volumes:\n            occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n        \n        item_volume = item_dims[0] * item_dims[1] * item_dims[2]\n        \n        return total_volume - occupied_volume - item_volume\n\n    def _find_position_in_new_truck(self, item, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_waste = float('inf')\n        \n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n                waste = self._calculate_waste(item_pos,item_dims,truck_type,[])\n                if waste < min_waste:\n                    best_x = float(x)\n                    best_y = float(y)\n                    best_z = float(z)\n                    best_orientation = orientation_index\n                    min_waste = waste\n        \n        return best_x, best_y, best_z, best_orientation, min_waste\n\n    def _bottom_left_back(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n\n        potential_positions = []\n\n        if not occupied_volumes:\n            return 0, 0, 0\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x'] + placed_item['length']\n            y = placed_item['y'] + placed_item['width']\n            z = placed_item['z'] + placed_item['height']\n\n            potential_positions.append((x, placed_item['y'], placed_item['z']))\n            potential_positions.append((placed_item['x'], y, placed_item['z']))\n            potential_positions.append((placed_item['x'], placed_item['y'], z))\n\n        potential_positions.append((0,0,0))\n        valid_positions = []\n        for x, y, z in potential_positions:\n              if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                  is_valid = True\n                  for placed_item in occupied_volumes:\n                      placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                      placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                      if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                          is_valid = False\n                          break\n                  if is_valid and self._check_stability((x,y,z),item_dims,occupied_volumes):\n                      valid_positions.append((x,y,z))\n        \n        best_x, best_y, best_z = -1, -1, -1\n        if valid_positions:\n            best_x, best_y, best_z = min(valid_positions, key=lambda p: (p[2], p[1], p[0]))\n\n        return best_x, best_y, best_z",
          "objective": 25.55,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects items based on remaining quantity, placing them using a first-fit decreasing height (FFDH) heuristic, considering separation constraints.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects items based on remaining quantity, placing them using a first-fit decreasing height (FFDH) heuristic, considering separation constraints.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items, trucks_in_use)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items, trucks_in_use):\n        best_item_index = -1\n        max_quantity = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                if item['quantity'] > max_quantity:\n                    max_quantity = item['quantity']\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _find_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation = self._find_best_position_in_truck(item, truck, truck_type)\n            if x != -1:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_best_position_in_new_truck(item, truck_type)\n        if x != -1:\n            return -1, x, y, z, orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            \n            x, y, z = self._find_first_fit_position(item_dims, truck_type, truck['occupied_volumes'])\n\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    return float(x), float(y), float(z), orientation_index\n        return best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_new_truck(self, item, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n                return float(x), float(y), float(z), orientation_index\n        return best_x, best_y, best_z, best_orientation\n\n    def _find_first_fit_position(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n        \n        for z in sorted(list(set([0] + [item['z'] + item['height'] for item in occupied_volumes]))):\n            for y in sorted(list(set([0] + [item['y'] + item['width'] for item in occupied_volumes]))):\n                for x in sorted(list(set([0] + [item['x'] + item['length'] for item in occupied_volumes]))):\n                    if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                        is_valid = True\n                        for placed_item in occupied_volumes:\n                            placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                            placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                            if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                                is_valid = False\n                                break\n                        if is_valid:\n                            return x, y, z\n        return -1, -1, -1",
          "objective": 25.6,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects the item with the largest footprint and attempts to place it in the best-fit truck based on remaining volume, creating a new truck if needed.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n        # {Selects the item with the largest footprint and attempts to place it in the best-fit truck based on remaining volume, creating a new truck if needed.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_footprint = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                footprint = item['length'] * item['width']\n                if footprint > max_footprint:\n                    max_footprint = footprint\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_remaining_volume = float('inf')\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation = self._find_best_position_in_truck(item, truck, truck_type)\n            if x != -1:\n                remaining_volume = self._calculate_remaining_volume(truck, truck_type)\n                if remaining_volume < min_remaining_volume:\n                    min_remaining_volume = remaining_volume\n                    best_truck_index = truck_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n        \n        if best_truck_index == -1:\n             x, y, z, orientation = self._find_position_in_new_truck(item, truck_type)\n             if x != -1:\n                  return -1,x,y,z,orientation\n             else:\n                return -1, -1, -1, -1, -1\n        else:\n            return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._find_position_bottom_left_back(item_dims, truck_type, truck['occupied_volumes'])\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    return float(x), float(y), float(z), orientation_index\n\n        return -1, -1, -1, -1\n\n    def _find_position_in_new_truck(self, item, truck_type):\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n                return float(x), float(y), float(z), orientation_index\n\n        return -1, -1, -1, -1\n\n    def _calculate_remaining_volume(self, truck, truck_type):\n        total_volume = truck_type[0] * truck_type[1] * truck_type[2]\n        occupied_volume = 0\n        for placed_item in truck['occupied_volumes']:\n            occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n        return total_volume - occupied_volume\n\n    def _find_position_bottom_left_back(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n\n        potential_positions = []\n\n        if not occupied_volumes:\n            return 0, 0, 0\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x'] + placed_item['length']\n            y = placed_item['y'] + placed_item['width']\n            z = placed_item['z'] + placed_item['height']\n\n            potential_positions.append((x, placed_item['y'], placed_item['z']))\n            potential_positions.append((placed_item['x'], y, placed_item['z']))\n            potential_positions.append((placed_item['x'], placed_item['y'], z))\n        potential_positions.append((0,0,0))\n\n        valid_positions = []\n        for x, y, z in potential_positions:\n              if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                  is_valid = True\n                  for placed_item in occupied_volumes:\n                      placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                      placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                      if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                          is_valid = False\n                          break\n                  if is_valid:\n                      valid_positions.append((x,y,z))\n\n        best_x, best_y, best_z = -1, -1, -1\n        if valid_positions:\n            best_x, best_y, best_z = min(valid_positions, key=lambda p: (p[2], p[1], p[0]))\n\n        return best_x, best_y, best_z",
          "objective": 25.9,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]