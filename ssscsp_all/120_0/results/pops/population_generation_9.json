[
     {
          "algorithm": "Selects items based on a modified volume-to-area ratio that prioritizes items with larger volume and less quantity, aiming to fill trucks more efficiently.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects items based on a modified volume-to-area ratio that prioritizes items with larger volume and less quantity, aiming to fill trucks more efficiently.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_score = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                area = item['length'] * item['width']\n                if area == 0:\n                    score = 0\n                else:\n                    score = (volume / area) / (item['quantity'] + 0.1)\n\n                if score > best_score:\n                    best_score = score\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_fit_score = float('inf')\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation = self._find_best_position_in_truck(item, truck, truck_type)\n            if x != -1:\n                fit_score = self._evaluate_placement(x, y, z, item, truck, truck_type,orientation)\n                if fit_score < best_fit_score:\n                    best_fit_score = fit_score\n                    best_truck_index = truck_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        if best_truck_index == -1:\n            x, y, z, orientation = self._find_best_position_in_new_truck(item, truck_type)\n            if x != -1:\n                return -1, x, y, z, orientation\n            else:\n                return -1, -1, -1, -1, -1\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_area = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._find_skyline_position(item_dims, truck_type, truck['occupied_volumes'])\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    if z==0:\n                        area = item_dims[0] * item_dims[1]\n                        if area > best_area:\n                            best_area = area\n                            best_x, best_y, best_z, best_orientation = float(x), float(y), float(z), orientation_index\n                    else:\n                        return float(x), float(y), float(z), orientation_index\n\n        if best_x != -1:\n            return best_x, best_y, best_z, best_orientation\n            \n        return -1, -1, -1, -1\n\n    def _find_best_position_in_new_truck(self, item, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_area = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n              area=item_dims[0] * item_dims[1]\n              if area > best_area:\n                best_area = area\n                best_x, best_y, best_z, best_orientation = float(x), float(y), float(z), orientation_index\n\n        if best_x != -1:\n            return best_x, best_y, best_z, best_orientation\n\n        return -1, -1, -1, -1\n\n    def _evaluate_placement(self, x, y, z, item, truck, truck_type, orientation):\n        if z == 0:\n          return -100000000 + self._calculate_remaining_volume(truck, truck_type)\n        remaining_volume = self._calculate_remaining_volume(truck, truck_type)\n        return remaining_volume\n\n    def _calculate_remaining_volume(self, truck, truck_type):\n        total_volume = truck_type[0] * truck_type[1] * truck_type[2]\n        occupied_volume = 0\n        for placed_item in truck['occupied_volumes']:\n            occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n        return total_volume - occupied_volume\n\n    def _find_skyline_position(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n        best_x, best_y, best_z = -1, -1, -1\n        min_z = float('inf')\n\n        if not occupied_volumes:\n            return 0, 0, 0\n\n        for x in range(0, int(container_dims[0] - l + 1)):\n            for y in range(0, int(container_dims[1] - w + 1)):\n                z = self._get_skyline_height(x, y, l, w, occupied_volumes)\n                if z != -1:\n                    if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                        is_valid = True\n                        for placed_item in occupied_volumes:\n                            placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                            placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                            if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                                is_valid = False\n                                break\n                        if is_valid:\n                            if z < min_z:\n                                min_z = z\n                                best_x, best_y, best_z = x, y, z\n\n        return best_x, best_y, best_z\n\n    def _get_skyline_height(self, x, y, l, w, occupied_volumes):\n        max_height = 0\n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n\n            if x < px + pl and x + l > px and y < py + pw and y + w > py:\n                max_height = max(max_height, pz + ph)\n        return max_height",
          "objective": 23.35,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects items based on a volume-to-area ratio score, considering the remaining quantity, and prioritizes placing items to maximize the filled area on the bottom of the truck.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects items based on a volume-to-area ratio score, considering the remaining quantity, and prioritizes placing items to maximize the filled area on the bottom of the truck.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_score = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                area = item['length'] * item['width']\n                if area == 0:\n                    score = 0\n                else:\n                    score = (volume / area) * item['quantity']\n\n                if score > best_score:\n                    best_score = score\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_fit_score = float('inf')\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation = self._find_best_position_in_truck(item, truck, truck_type)\n            if x != -1:\n                fit_score = self._evaluate_placement(x, y, z, item, truck, truck_type,orientation)\n                if fit_score < best_fit_score:\n                    best_fit_score = fit_score\n                    best_truck_index = truck_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        if best_truck_index == -1:\n            x, y, z, orientation = self._find_best_position_in_new_truck(item, truck_type)\n            if x != -1:\n                return -1, x, y, z, orientation\n            else:\n                return -1, -1, -1, -1, -1\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_area = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._find_skyline_position(item_dims, truck_type, truck['occupied_volumes'])\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    if z==0:\n                        area = item_dims[0] * item_dims[1]\n                        if area > best_area:\n                            best_area = area\n                            best_x, best_y, best_z, best_orientation = float(x), float(y), float(z), orientation_index\n                    else:\n                        return float(x), float(y), float(z), orientation_index\n\n        if best_x != -1:\n            return best_x, best_y, best_z, best_orientation\n            \n        return -1, -1, -1, -1\n\n    def _find_best_position_in_new_truck(self, item, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_area = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n              area=item_dims[0] * item_dims[1]\n              if area > best_area:\n                best_area = area\n                best_x, best_y, best_z, best_orientation = float(x), float(y), float(z), orientation_index\n\n        if best_x != -1:\n            return best_x, best_y, best_z, best_orientation\n\n        return -1, -1, -1, -1\n\n    def _evaluate_placement(self, x, y, z, item, truck, truck_type, orientation):\n        if z == 0:\n          return -100000000 + self._calculate_remaining_volume(truck, truck_type)\n        remaining_volume = self._calculate_remaining_volume(truck, truck_type)\n        return remaining_volume\n\n    def _calculate_remaining_volume(self, truck, truck_type):\n        total_volume = truck_type[0] * truck_type[1] * truck_type[2]\n        occupied_volume = 0\n        for placed_item in truck['occupied_volumes']:\n            occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n        return total_volume - occupied_volume\n\n    def _find_skyline_position(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n        best_x, best_y, best_z = -1, -1, -1\n        min_z = float('inf')\n\n        if not occupied_volumes:\n            return 0, 0, 0\n\n        for x in range(0, int(container_dims[0] - l + 1)):\n            for y in range(0, int(container_dims[1] - w + 1)):\n                z = self._get_skyline_height(x, y, l, w, occupied_volumes)\n                if z != -1:\n                    if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                        is_valid = True\n                        for placed_item in occupied_volumes:\n                            placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                            placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                            if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                                is_valid = False\n                                break\n                        if is_valid:\n                            if z < min_z:\n                                min_z = z\n                                best_x, best_y, best_z = x, y, z\n\n        return best_x, best_y, best_z\n\n    def _get_skyline_height(self, x, y, l, w, occupied_volumes):\n        max_height = 0\n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n\n            if x < px + pl and x + l > px and y < py + pw and y + w > py:\n                max_height = max(max_height, pz + ph)\n        return max_height",
          "objective": 23.6,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects an item based on a volume-to-area ratio, places it using a bottom-left heuristic, and manages truck separation constraints effectively.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects an item based on a volume-to-area ratio, places it using a bottom-left heuristic, and manages truck separation constraints effectively.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_value = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                area = item['length'] * item['width']\n                value = volume / area #Heuristic value for item selection\n                if value > best_value:\n                    best_value = value\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _find_best_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_fit_score = float('inf')\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation = self._find_best_position_in_truck(item, truck, truck_type)\n            if x != -1:\n                fit_score = self._evaluate_placement(x, y, z, item, truck, truck_type,orientation)\n                if fit_score < best_fit_score:\n                    best_fit_score = fit_score\n                    best_truck_index = truck_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        if best_truck_index == -1:\n            truck_index = self._select_new_truck(item, trucks_in_use)\n            x, y, z, orientation = self._find_best_position_in_new_truck(item, truck_type)\n            if x != -1:\n                return -1, x, y, z, orientation\n            else:\n                return -1, -1, -1, -1, -1\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _select_new_truck(self, item, trucks_in_use):\n        for truck in trucks_in_use:\n            if self._check_separation_compatibility(item, truck):\n                return False\n        return True\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._find_bottom_left_position(item_dims, truck_type, truck['occupied_volumes'])\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    return float(x), float(y), float(z), orientation_index\n\n        return -1, -1, -1, -1\n\n    def _find_best_position_in_new_truck(self, item, truck_type):\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n                return float(x), float(y), float(z), orientation_index\n        return -1, -1, -1, -1\n\n    def _evaluate_placement(self, x, y, z, item, truck, truck_type, orientation):\n        remaining_volume = self._calculate_remaining_volume(truck, truck_type)\n        return remaining_volume\n\n    def _calculate_remaining_volume(self, truck, truck_type):\n        total_volume = truck_type[0] * truck_type[1] * truck_type[2]\n        occupied_volume = 0\n        for placed_item in truck['occupied_volumes']:\n            occupied_volume += placed_item['length'] * placed_item['width'] * placed_item['height']\n        return total_volume - occupied_volume\n\n    def _find_bottom_left_position(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n        best_x, best_y, best_z = -1, -1, -1\n\n        for z in range(0, int(container_dims[2] - h + 1)):\n            for y in range(0, int(container_dims[1] - w + 1)):\n                for x in range(0, int(container_dims[0] - l + 1)):\n                    \n                    item_pos = (x, y, z)\n\n                    is_valid = True\n                    for placed_item in occupied_volumes:\n                        placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                        placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                        if self._check_overlap_3d(item_pos, item_dims, placed_item_pos, placed_item_dims):\n                            is_valid = False\n                            break\n                    if is_valid:\n                         return x, y, z\n        return -1, -1, -1\nimport numpy as np\n\nclass AlgorithmFIX1(Algorithm):\n    def _find_bottom_left_position(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n        best_x, best_y, best_z = -1, -1, -1\n        \n        potential_positions = []\n\n        if not occupied_volumes:\n            potential_positions.append((0,0,0))\n        else:\n            for placed_item in occupied_volumes:\n                px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n                pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n\n                potential_positions.append((px+pl, py, pz))\n                potential_positions.append((px, py+pw, pz))\n                potential_positions.append((px, py, pz+ph))\n            potential_positions.append((0,0,0)) #always check origin\n\n        \n        for x,y,z in potential_positions:\n            x = float(x)\n            y = float(y)\n            z = float(z)\n\n            if (x + l <= container_dims[0] and\n                y + w <= container_dims[1] and\n                z + h <= container_dims[2]):\n\n\n                item_pos = (x, y, z)\n\n                is_valid = True\n                for placed_item in occupied_volumes:\n                    placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                    placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                    if self._check_overlap_3d(item_pos, item_dims, placed_item_pos, placed_item_dims):\n                        is_valid = False\n                        break\n                \n                if is_valid:\n                    \n                    return x, y, z\n        return -1, -1, -1",
          "objective": 25.2,
          "other_inf": null,
          "class_name": "AlgorithmFIX1"
     },
     {
          "algorithm": "Selects items based on a combined score of volume and remaining quantity, then places them using a best-fit heuristic based on minimizing wasted space around the item and filling the truck's bottom area.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects items based on a combined score of volume and remaining quantity, then places them using a best-fit heuristic based on minimizing wasted space around the item and filling the truck's bottom area.}\n\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_best_truck_and_position(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        best_score = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                quantity = item['quantity']\n                score = volume * quantity  # Combined score\n\n                if score > best_score:\n                    best_score = score\n                    best_item_index = item_index\n        return best_item_index\n\n    def _find_best_truck_and_position(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        best_wasted_space = float('inf')\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation, wasted_space = self._find_best_position_in_truck(item, truck, truck_type)\n\n            if x != -1:\n                if wasted_space < best_wasted_space:\n                    best_truck_index = truck_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n                    best_wasted_space = wasted_space\n\n        if best_truck_index == -1:\n            x, y, z, orientation, wasted_space = self._find_best_position_in_new_truck(item, truck_type)\n            if x != -1:\n                return -1, x, y, z, orientation\n            else:\n                return -1, -1, -1, -1, -1\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_wasted_space = float('inf')\n        \n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            for x in range(0, int(truck_type[0] - item_dims[0] + 1)):\n                for y in range(0, int(truck_type[1] - item_dims[1] + 1)):\n                    z = self._calculate_z_position(x, y, item_dims, truck['occupied_volumes'])\n\n                    if z != -1:\n                        item_pos = (float(x), float(y), float(z))\n                        if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                            wasted_space = self._calculate_wasted_space(item_pos, item_dims, truck_type)\n                            if wasted_space < min_wasted_space:\n                                min_wasted_space = wasted_space\n                                best_x, best_y, best_z, best_orientation = float(x), float(y), float(z), orientation_index\n\n        if best_x != -1:\n            return best_x, best_y, best_z, best_orientation, min_wasted_space\n        else:\n            return -1, -1, -1, -1, float('inf')\n\n    def _find_best_position_in_new_truck(self, item, truck_type):\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n        min_wasted_space = float('inf')\n\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n                wasted_space = self._calculate_wasted_space(item_pos, item_dims, truck_type)\n                if wasted_space < min_wasted_space:\n                    min_wasted_space = wasted_space\n                    best_x, best_y, best_z, best_orientation = float(x), float(y), float(z), orientation_index\n\n        if best_x != -1:\n            return best_x, best_y, best_z, best_orientation, min_wasted_space\n        else:\n            return -1, -1, -1, -1, float('inf')\n\n    def _calculate_z_position(self, x, y, item_dims, occupied_volumes):\n        max_z = 0\n        for placed_item in occupied_volumes:\n            px, py, pz = placed_item['x'], placed_item['y'], placed_item['z']\n            pl, pw, ph = placed_item['length'], placed_item['width'], placed_item['height']\n\n            if x < px + pl and x + item_dims[0] > px and y < py + pw and y + item_dims[1] > py:\n                max_z = max(max_z, pz + ph)\n        return max_z\n\n    def _calculate_wasted_space(self, item_pos, item_dims, truck_dims):\n        x, y, z = item_pos\n        l, w, h = item_dims\n        remaining_space_x = truck_dims[0] - (x + l)\n        remaining_space_y = truck_dims[1] - (y + w)\n        remaining_space_z = truck_dims[2] - (z + h)\n        return remaining_space_x * remaining_space_y * remaining_space_z",
          "objective": 25.25,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "Selects the largest unplaced item, iterates through trucks, and attempts to place it using a bottom-left-back heuristic, creating a new truck if necessary.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    def __init__(self, epsilon=1e-6, alpha=1.0):\n        super().__init__(epsilon, alpha)\n        # {Selects the largest unplaced item, iterates through trucks, and attempts to place it using a bottom-left-back heuristic, creating a new truck if necessary.}\n\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index == -1:\n            return -1, -1, -1, -1, -1, -1\n\n        truck_index, x, y, z, orientation = self._find_placement(unplaced_items, trucks_in_use, truck_type, item_index)\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = -1\n        max_volume = -1\n\n        for item_index, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = item_index\n\n        return best_item_index\n\n    def _find_placement(self, unplaced_items, trucks_in_use, truck_type, item_index):\n        best_truck_index = -1\n        best_x = -1\n        best_y = -1\n        best_z = -1\n        best_orientation = -1\n\n        item = unplaced_items[item_index]\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation = self._find_position_in_truck(item, truck, truck_type)\n            if x != -1:\n                return truck_index, x, y, z, orientation\n\n        x, y, z, orientation = self._find_position_in_new_truck(item, truck_type)\n        if x != -1:\n            return -1, x, y, z, orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_position_in_truck(self, item, truck, truck_type):\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = self._bottom_left_back(item_dims, truck_type, truck['occupied_volumes'])\n            if x != -1:\n                item_pos = (float(x), float(y), float(z))\n                if self._is_valid_placement(item_pos, item_dims, truck_type, truck['occupied_volumes']):\n                    return float(x), float(y), float(z), orientation_index\n        return -1, -1, -1, -1\n\n    def _find_position_in_new_truck(self, item, truck_type):\n        for orientation_index, (orientation_id, item_dims) in enumerate(self._get_orientations(item)):\n            x, y, z = 0, 0, 0\n            item_pos = (float(x), float(y), float(z))\n            if self._is_valid_placement(item_pos, item_dims, truck_type, []):\n                return float(x), float(y), float(z), orientation_index\n\n        return -1, -1, -1, -1\n\n    def _bottom_left_back(self, item_dims, container_dims, occupied_volumes):\n        l, w, h = item_dims\n\n        potential_positions = []\n\n        if not occupied_volumes:\n            return 0, 0, 0\n\n        for placed_item in occupied_volumes:\n            x = placed_item['x'] + placed_item['length']\n            y = placed_item['y'] + placed_item['width']\n            z = placed_item['z'] + placed_item['height']\n\n            potential_positions.append((x, placed_item['y'], placed_item['z']))\n            potential_positions.append((placed_item['x'], y, placed_item['z']))\n            potential_positions.append((placed_item['x'], placed_item['y'], z))\n\n        potential_positions.append((0,0,0))\n        valid_positions = []\n        for x, y, z in potential_positions:\n              if self._is_within_container_bounds((x, y, z), item_dims, container_dims):\n                  is_valid = True\n                  for placed_item in occupied_volumes:\n                      placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                      placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                      if self._check_overlap_3d((x, y, z), item_dims, placed_item_pos, placed_item_dims):\n                          is_valid = False\n                          break\n                  if is_valid:\n                      valid_positions.append((x,y,z))\n        \n        best_x, best_y, best_z = -1, -1, -1\n        if valid_positions:\n            best_x, best_y, best_z = min(valid_positions, key=lambda p: (p[2], p[1], p[0]))\n\n        return best_x, best_y, best_z",
          "objective": 25.3,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]