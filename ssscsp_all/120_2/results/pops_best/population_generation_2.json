{
     "algorithm": "The algorithm selects the largest volume unplaced item, iterates through trucks finding the first valid placement using a bottom-left-back strategy, and creates a new truck if no placement is found.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {The algorithm selects the largest volume unplaced item, iterates through trucks finding the first valid placement using a bottom-left-back strategy, and creates a new truck if no placement is found.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        truck_index, x, y, z, orientation = self._find_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items):\n        best_item_index = None\n        max_volume = -1\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n        return best_item_index\n\n    def _find_placement(self, item, trucks_in_use, truck_type):\n        for truck_index, truck in enumerate(trucks_in_use):\n            if self._check_separation_compatibility(item, truck):\n                x, y, z, orientation = self._find_position_in_truck(item, truck, truck_type)\n                if x is not None:\n                    return truck_index, x, y, z, orientation\n\n        truck_index, x, y, z, orientation = self._create_new_truck_and_place(item, trucks_in_use, truck_type)\n        return truck_index, x, y, z, orientation\n    \n    def _find_position_in_truck(self, item, truck, truck_type):\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            for z in sorted(list(set([0] + [v['z'] + v['height'] for v in truck['occupied_volumes']]))):\n                for y in sorted(list(set([0] + [v['y'] + v['width'] for v in truck['occupied_volumes']]))):\n                    for x in sorted(list(set([0] + [v['x'] + v['length'] for v in truck['occupied_volumes']]))):\n                        position = (x, y, z)\n                        if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                            return x, y, z, orientation_id\n        return None, None, None, None\n\n    def _create_new_truck_and_place(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                return -1, 0, 0, 0, orientation_id\n        return -1, None, None, None, None",
     "objective": 25.3,
     "other_inf": null,
     "class_name": "Algorithm"
}