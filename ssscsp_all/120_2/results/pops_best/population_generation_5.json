{
     "algorithm": "This algorithm prioritizes placing items that fit snugly within the container dimensions and minimizes remaining space, using a score based on volume utilization.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes placing items that fit snugly within the container dimensions and minimizes remaining space, using a score based on volume utilization.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items, trucks_in_use, truck_type)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = None\n        best_score = -1\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                score = self._evaluate_item_fit(item, trucks_in_use, truck_type)\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _evaluate_item_fit(self, item, trucks_in_use, truck_type):\n        volume = item['length'] * item['width'] * item['height']\n        \n        container_volume = truck_type[0] * truck_type[1] * truck_type[2]\n\n        return volume / container_volume\n\n    def _find_best_placement(self, item, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = -1\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if self._check_separation_compatibility(item, truck):\n                x, y, z, orientation, score = self._find_best_position_in_truck(item, truck, truck_type)\n                if score > best_score:\n                    best_score = score\n                    best_truck_index = truck_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        if best_truck_index is None:\n            truck_index, x, y, z, orientation, score = self._create_new_truck_and_place(item, trucks_in_use, truck_type)\n            if score > best_score:\n                best_score = score\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n    \n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            for z in sorted(list(set([0] + [v['z'] + v['height'] for v in truck['occupied_volumes']]))):\n                for y in sorted(list(set([0] + [v['y'] + v['width'] for v in truck['occupied_volumes']]))):\n                    for x in sorted(list(set([0] + [v['x'] + v['length'] for v in truck['occupied_volumes']]))):\n                        position = (x, y, z)\n                        if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                            score = self._evaluate_placement(position, (length, width, height), truck_type, truck['occupied_volumes'])\n                            if score > best_score:\n                                best_score = score\n                                best_x = x\n                                best_y = y\n                                best_z = z\n                                best_orientation = orientation_id\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _evaluate_placement(self, position, dims, truck_type, occupied_volumes):\n        x, y, z = position\n        l, w, h = dims\n        truck_length, truck_width, truck_height = truck_type\n        \n        volume_utilization = (l * w * h) / (truck_length * truck_width * truck_height)\n        \n        remaining_space = (truck_length - (x + l)) * (truck_width - (y + w)) * (truck_height - (z + h))\n        \n        return volume_utilization - (remaining_space / (truck_length * truck_width * truck_height))\n\n    def _create_new_truck_and_place(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n        best_score = -1\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                score = self._evaluate_placement(position, (length, width, height), truck_type, truck['occupied_volumes'])\n                if score > best_score:\n                  best_score = score\n                  best_x = 0\n                  best_y = 0\n                  best_z = 0\n                  best_orientation = orientation_id\n        \n        return -1, best_x, best_y, best_z, best_orientation, best_score",
     "objective": 24.5,
     "other_inf": null,
     "class_name": "Algorithm"
}