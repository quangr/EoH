[
     {
          "algorithm": "The algorithm prioritizes placing items that maximize the surface area they occupy on the container floor, selecting the placement that best covers the floor while maintaining stability.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {The algorithm prioritizes placing items that maximize the surface area they occupy on the container floor, selecting the placement that best covers the floor while maintaining stability.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items, trucks_in_use, truck_type)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n    \n    def _select_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = None\n        max_area_ratio = -1\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                area_ratio = self._evaluate_item_area_ratio(item, truck_type)\n                if area_ratio > max_area_ratio:\n                    max_area_ratio = area_ratio\n                    best_item_index = i\n        return best_item_index\n    \n    def _evaluate_item_area_ratio(self, item, truck_type):\n        truck_length, truck_width, truck_height = truck_type\n        truck_area = truck_length * truck_width\n        \n        max_item_area = 0\n        for _, (l, w, h) in self._get_orientations(item):\n            max_item_area = max(max_item_area, l*w, l*h, w*h)\n        \n        return max_item_area / truck_area\n    \n    def _find_best_placement(self, item, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if self._check_separation_compatibility(item, truck):\n                x, y, z, orientation, score = self._find_best_position_in_truck(item, truck, truck_type)\n                if score > best_score:\n                    best_truck_index = truck_index\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation\n                    best_score = score\n\n        if best_truck_index is None:\n            truck_index, x, y, z, orientation, score = self._create_new_truck_and_place(item, trucks_in_use, truck_type)\n            if score > best_score:\n                best_truck_index = truck_index\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n                best_score = score\n            \n        return best_truck_index, best_x, best_y, best_z, best_orientation\n    \n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n        \n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            for z in sorted(list(set([0] + [v['z'] + v['height'] for v in truck['occupied_volumes']]))):\n                for y in sorted(list(set([0] + [v['y'] + v['width'] for v in truck['occupied_volumes']]))):\n                    for x in sorted(list(set([0] + [v['x'] + v['length'] for v in truck['occupied_volumes']]))):\n                        position = (x, y, z)\n                        if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                            score = self._evaluate_placement(position, dims, truck_type, truck['occupied_volumes'])\n                            if score > best_score:\n                                best_x, best_y, best_z = x, y, z\n                                best_orientation = orientation_id\n                                best_score = score\n        return best_x, best_y, best_z, best_orientation, best_score\n    \n    def _evaluate_placement(self, position, dims, truck_type, occupied_volumes):\n        x, y, z = position\n        length, width, height = dims\n        truck_length, truck_width, truck_height = truck_type\n        truck_area = truck_length * truck_width\n        \n        item_area = length * width\n        area_utilization = item_area / truck_area\n        \n        stability_score = 0\n        if z > 0:\n            px, py, pz = position\n            pl, pw, _ = dims\n            total_support_area = 0.0\n            for placed_item in occupied_volumes:\n                placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n\n                if abs((placed_item_pos[2] + placed_item_dims[2]) - pz) < self.epsilon:\n                    overlap_x = max(0, min(px + pl, placed_item_pos[0] + placed_item_dims[0]) - max(px, placed_item_pos[0]))\n                    overlap_y = max(0, min(py + pw, placed_item_pos[1] + placed_item_dims[1]) - max(py, placed_item_pos[1]))\n                    total_support_area += overlap_x * overlap_y\n            stability_score = total_support_area / item_area if item_area > 0 else 0\n\n        return area_utilization + stability_score\n    \n    def _create_new_truck_and_place(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                score = self._evaluate_placement(position, dims, truck_type, truck['occupied_volumes'])\n                if score > best_score:\n                    best_x, best_y, best_z = 0, 0, 0\n                    best_orientation = orientation_id\n                    best_score = score\n        \n        return -1, best_x, best_y, best_z, best_orientation, best_score",
          "objective": 22.7,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes placing the largest remaining item, optimizing placement based on a heuristic combining space utilization and floor coverage.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes placing the largest remaining item, optimizing placement based on a heuristic combining space utilization and floor coverage.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_next_item(unplaced_items, trucks_in_use, truck_type)\n\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        truck_index, x, y, z, orientation = self._find_best_truck_and_position(\n            unplaced_items[item_index], trucks_in_use, truck_type\n        )\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_next_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = None\n        max_volume = -1\n\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume = item['length'] * item['width'] * item['height']\n                if volume > max_volume:\n                    max_volume = volume\n                    best_item_index = i\n\n        return best_item_index\n\n    def _find_best_truck_and_position(self, item, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if self._check_separation_compatibility(item, truck):\n                x, y, z, orientation, score = self._find_best_position_in_existing_truck(\n                    item, truck, truck_type\n                )\n                if score > best_score:\n                    best_truck_index = truck_index\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation\n                    best_score = score\n\n        if best_truck_index is None:\n            truck_index, x, y, z, orientation, score = self._create_new_truck(item, trucks_in_use, truck_type)\n            if score > best_score:\n                best_truck_index = truck_index\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n                best_score = score\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_existing_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            l, w, h = dims\n\n            for x in sorted(list(set([0] + [v['x'] + v['length'] for v in truck['occupied_volumes']]))):\n                for y in sorted(list(set([0] + [v['y'] + v['width'] for v in truck['occupied_volumes']]))):\n                    for z in sorted(list(set([0] + [v['z'] + v['height'] for v in truck['occupied_volumes']]))):\n                        position = (x, y, z)\n                        if self._is_valid_placement(position, (l, w, h), truck_type, truck['occupied_volumes']):\n                            score = self._evaluate_position(position, (l, w, h), truck_type, truck['occupied_volumes'])\n                            if score > best_score:\n                                best_x, best_y, best_z = x, y, z\n                                best_orientation = orientation_id\n                                best_score = score\n\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _create_new_truck(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            l, w, h = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (l, w, h), truck_type, truck['occupied_volumes']):\n                score = self._evaluate_position(position, (l, w, h), truck_type, truck['occupied_volumes'])\n                if score > best_score:\n                    best_x, best_y, best_z = 0, 0, 0\n                    best_orientation = orientation_id\n                    best_score = score\n\n        return truck_index, best_x, best_y, best_z, best_orientation, best_score\n\n    def _evaluate_position(self, position, dims, truck_type, occupied_volumes):\n        x, y, z = position\n        l, w, h = dims\n        truck_length, truck_width, truck_height = truck_type\n\n        space_utilization = (l * w * h) / (truck_length * truck_width * truck_height)\n\n        floor_coverage = l * w\n        for placed_item in occupied_volumes:\n            if placed_item['z'] == 0:\n                floor_coverage -= max(0, min(x + l, placed_item['x'] + placed_item['length']) - max(x, placed_item['x'])) * \\\n                                 max(0, min(y + w, placed_item['y'] + placed_item['width']) - max(y, placed_item['y']))\n\n        return 0.6 * space_utilization + 0.4 * (floor_coverage / (truck_length * truck_width))\nclass AlgorithmFIX1(Algorithm):\n    def _create_new_truck(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            l, w, h = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (l, w, h), truck_type, truck['occupied_volumes']):\n                score = self._evaluate_position(position, (l, w, h), truck_type, truck['occupied_volumes'])\n                if score > best_score:\n                    best_x, best_y, best_z = 0, 0, 0\n                    best_orientation = orientation_id\n                    best_score = score\n\n        return truck_index, best_x, best_y, best_z, best_orientation, best_score\nclass AlgorithmFIX2(AlgorithmFIX1):\n    def _create_new_truck(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            l, w, h = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (l, w, h), truck_type, truck['occupied_volumes']):\n                score = self._evaluate_position(position, (l, w, h), truck_type, truck['occupied_volumes'])\n                if score > best_score:\n                    best_x, best_y, best_z = 0, 0, 0\n                    best_orientation = orientation_id\n                    best_score = score\n\n        return -1, best_x, best_y, best_z, best_orientation, best_score",
          "objective": 22.85,
          "other_inf": null,
          "class_name": "AlgorithmFIX2"
     },
     {
          "algorithm": "This algorithm prioritizes placing items with the largest footprint to minimize wasted space, selecting the best orientation and position based on a combined score of reduced remaining area and enhanced support.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes placing items with the largest footprint to minimize wasted space, selecting the best orientation and position based on a combined score of reduced remaining area and enhanced support.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items, trucks_in_use, truck_type)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = None\n        max_footprint = -1\n\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                footprint = self._evaluate_item_footprint(item)\n                if footprint > max_footprint:\n                    max_footprint = footprint\n                    best_item_index = i\n\n        return best_item_index\n\n    def _evaluate_item_footprint(self, item):\n        max_area = 0\n        for _, (l, w, h) in self._get_orientations(item):\n            max_area = max(max_area, l * w, l * h, w * h)\n        return max_area\n    \n    def _find_best_placement(self, item, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if self._check_separation_compatibility(item, truck):\n                x, y, z, orientation, score = self._find_best_position_in_truck(item, truck, truck_type)\n                if score > best_score:\n                    best_truck_index = truck_index\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation\n                    best_score = score\n        \n        if best_truck_index is None:\n            truck_index, x, y, z, orientation, score = self._create_new_truck_and_place(item, trucks_in_use, truck_type)\n            if score > best_score:\n                best_truck_index = truck_index\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n                best_score = score\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n    \n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n        \n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            possible_z_values = sorted(list(set([0] + [v['z'] + v['height'] for v in truck['occupied_volumes']])))\n            possible_y_values = sorted(list(set([0] + [v['y'] + v['width'] for v in truck['occupied_volumes']])))\n            possible_x_values = sorted(list(set([0] + [v['x'] + v['length'] for v in truck['occupied_volumes']])))\n\n            for z in possible_z_values:\n                for y in possible_y_values:\n                    for x in possible_x_values:\n                        position = (x, y, z)\n                        if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                            score = self._evaluate_placement(position, dims, truck_type, truck['occupied_volumes'])\n                            if score > best_score:\n                                best_x, best_y, best_z = x, y, z\n                                best_orientation = orientation_id\n                                best_score = score\n\n        return best_x, best_y, best_z, best_orientation, best_score\n    \n    def _evaluate_placement(self, position, dims, truck_type, occupied_volumes):\n        x, y, z = position\n        length, width, height = dims\n        truck_length, truck_width, truck_height = truck_type\n\n        remaining_area = (truck_length - (x + length)) * (truck_width - (y + width))\n        \n        stability_score = 0\n        if z > 0:\n            px, py, pz = position\n            pl, pw, _ = dims\n            total_support_area = 0.0\n            for placed_item in occupied_volumes:\n                placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n\n                if abs((placed_item_pos[2] + placed_item_dims[2]) - pz) < self.epsilon:\n                    overlap_x = max(0, min(px + pl, placed_item_pos[0] + placed_item_dims[0]) - max(px, placed_item_pos[0]))\n                    overlap_y = max(0, min(py + pw, placed_item_pos[1] + placed_item_dims[1]) - max(py, placed_item_pos[1]))\n                    total_support_area += overlap_x * overlap_y\n            stability_score = total_support_area / (length * width) if (length * width) > 0 else 0\n\n        area_score = 1 - (remaining_area / (truck_length * truck_width))\n        \n        return 0.7 * area_score + 0.3 * stability_score\n    \n    def _create_new_truck_and_place(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                score = self._evaluate_placement(position, dims, truck_type, truck['occupied_volumes'])\n                if score > best_score:\n                    best_x, best_y, best_z = 0, 0, 0\n                    best_orientation = orientation_id\n                    best_score = score\n        \n        return -1, best_x, best_y, best_z, best_orientation, best_score",
          "objective": 24.25,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes filling trucks completely by selecting items based on volume and placing them to minimize remaining space, with adjusted weights for area utilization and stability.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes filling trucks completely by selecting items based on volume and placing them to minimize remaining space, with adjusted weights for area utilization and stability.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items, trucks_in_use, truck_type)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n    \n    def _select_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = None\n        min_volume_difference = float('inf')\n\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                volume_difference = self._evaluate_volume_difference(item, truck_type, trucks_in_use)\n                if volume_difference < min_volume_difference:\n                    min_volume_difference = volume_difference\n                    best_item_index = i\n\n        return best_item_index\n    \n    def _evaluate_volume_difference(self, item, truck_type, trucks_in_use):\n        truck_length, truck_width, truck_height = truck_type\n        total_truck_volume = truck_length * truck_width * truck_height\n        \n        occupied_volume = 0\n        for truck in trucks_in_use:\n            for volume in truck['occupied_volumes']:\n                occupied_volume += volume['length'] * volume['width'] * volume['height']\n        \n        remaining_volume = total_truck_volume - occupied_volume\n\n        min_item_volume = float('inf')\n        for _, (l, w, h) in self._get_orientations(item):\n            min_item_volume = min(min_item_volume, l * w * h)\n        \n        return abs(remaining_volume - min_item_volume)\n    \n    def _find_best_placement(self, item, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if self._check_separation_compatibility(item, truck):\n                x, y, z, orientation, score = self._find_best_position_in_truck(item, truck, truck_type)\n                if score > best_score:\n                    best_truck_index = truck_index\n                    best_x, best_y, best_z = x, y, z\n                    best_orientation = orientation\n                    best_score = score\n\n        if best_truck_index is None:\n            truck_index, x, y, z, orientation, score = self._create_new_truck_and_place(item, trucks_in_use, truck_type)\n            if score > best_score:\n                best_truck_index = truck_index\n                best_x, best_y, best_z = x, y, z\n                best_orientation = orientation\n                best_score = score\n            \n        return best_truck_index, best_x, best_y, best_z, best_orientation\n    \n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n        \n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            possible_z_values = sorted(list(set([0] + [v['z'] + v['height'] for v in truck['occupied_volumes']])))\n            possible_y_values = sorted(list(set([0] + [v['y'] + v['width'] for v in truck['occupied_volumes']])))\n            possible_x_values = sorted(list(set([0] + [v['x'] + v['length'] for v in truck['occupied_volumes']])))\n\n            for z in possible_z_values:\n                for y in possible_y_values:\n                    for x in possible_x_values:\n                        position = (x, y, z)\n                        if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                            score = self._evaluate_placement(position, dims, truck_type, truck['occupied_volumes'])\n                            if score > best_score:\n                                best_x, best_y, best_z = x, y, z\n                                best_orientation = orientation_id\n                                best_score = score\n        return best_x, best_y, best_z, best_orientation, best_score\n    \n    def _evaluate_placement(self, position, dims, truck_type, occupied_volumes):\n        x, y, z = position\n        length, width, height = dims\n        truck_length, truck_width, truck_height = truck_type\n        truck_area = truck_length * truck_width\n        truck_volume = truck_length * truck_width * truck_height\n        \n        item_area = length * width\n        item_volume = length * width * height\n        area_utilization = item_area / truck_area\n        volume_utilization = item_volume / truck_volume\n        \n        stability_score = 0\n        if z > 0:\n            px, py, pz = position\n            pl, pw, _ = dims\n            total_support_area = 0.0\n            for placed_item in occupied_volumes:\n                placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n\n                if abs((placed_item_pos[2] + placed_item_dims[2]) - pz) < self.epsilon:\n                    overlap_x = max(0, min(px + pl, placed_item_pos[0] + placed_item_dims[0]) - max(px, placed_item_pos[0]))\n                    overlap_y = max(0, min(py + pw, placed_item_pos[1] + placed_item_dims[1]) - max(py, placed_item_pos[1]))\n                    total_support_area += overlap_x * overlap_y\n            stability_score = total_support_area / item_area if item_area > 0 else 0\n\n        return 0.6 * volume_utilization + 0.3 * area_utilization + 0.1 * stability_score\n    \n    def _create_new_truck_and_place(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n\n        best_x, best_y, best_z = None, None, None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                score = self._evaluate_placement(position, dims, truck_type, truck['occupied_volumes'])\n                if score > best_score:\n                    best_x, best_y, best_z = 0, 0, 0\n                    best_orientation = orientation_id\n                    best_score = score\n        \n        return -1, best_x, best_y, best_z, best_orientation, best_score",
          "objective": 24.4,
          "other_inf": null,
          "class_name": "Algorithm"
     },
     {
          "algorithm": "This algorithm prioritizes placing items that fit snugly within the container dimensions and minimizes remaining space, using a score based on volume utilization.",
          "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {This algorithm prioritizes placing items that fit snugly within the container dimensions and minimizes remaining space, using a score based on volume utilization.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item(unplaced_items, trucks_in_use, truck_type)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        truck_index, x, y, z, orientation = self._find_best_placement(unplaced_items[item_index], trucks_in_use, truck_type)\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item(self, unplaced_items, trucks_in_use, truck_type):\n        best_item_index = None\n        best_score = -1\n        for i, item in enumerate(unplaced_items):\n            if item['quantity'] > 0:\n                score = self._evaluate_item_fit(item, trucks_in_use, truck_type)\n                if score > best_score:\n                    best_score = score\n                    best_item_index = i\n        return best_item_index\n\n    def _evaluate_item_fit(self, item, trucks_in_use, truck_type):\n        volume = item['length'] * item['width'] * item['height']\n        \n        container_volume = truck_type[0] * truck_type[1] * truck_type[2]\n\n        return volume / container_volume\n\n    def _find_best_placement(self, item, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = -1\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if self._check_separation_compatibility(item, truck):\n                x, y, z, orientation, score = self._find_best_position_in_truck(item, truck, truck_type)\n                if score > best_score:\n                    best_score = score\n                    best_truck_index = truck_index\n                    best_x = x\n                    best_y = y\n                    best_z = z\n                    best_orientation = orientation\n\n        if best_truck_index is None:\n            truck_index, x, y, z, orientation, score = self._create_new_truck_and_place(item, trucks_in_use, truck_type)\n            if score > best_score:\n                best_score = score\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n    \n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = -1\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            for z in sorted(list(set([0] + [v['z'] + v['height'] for v in truck['occupied_volumes']]))):\n                for y in sorted(list(set([0] + [v['y'] + v['width'] for v in truck['occupied_volumes']]))):\n                    for x in sorted(list(set([0] + [v['x'] + v['length'] for v in truck['occupied_volumes']]))):\n                        position = (x, y, z)\n                        if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                            score = self._evaluate_placement(position, (length, width, height), truck_type, truck['occupied_volumes'])\n                            if score > best_score:\n                                best_score = score\n                                best_x = x\n                                best_y = y\n                                best_z = z\n                                best_orientation = orientation_id\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _evaluate_placement(self, position, dims, truck_type, occupied_volumes):\n        x, y, z = position\n        l, w, h = dims\n        truck_length, truck_width, truck_height = truck_type\n        \n        volume_utilization = (l * w * h) / (truck_length * truck_width * truck_height)\n        \n        remaining_space = (truck_length - (x + l)) * (truck_width - (y + w)) * (truck_height - (z + h))\n        \n        return volume_utilization - (remaining_space / (truck_length * truck_width * truck_height))\n\n    def _create_new_truck_and_place(self, item, trucks_in_use, truck_type):\n        truck_separation_set = item.get('separation_set')\n        truck = {'occupied_volumes': [], 'separation_set': truck_separation_set}\n        trucks_in_use.append(truck)\n        truck_index = len(trucks_in_use) - 1\n        best_score = -1\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n\n        for orientation_index, (orientation_id, dims) in enumerate(self._get_orientations(item)):\n            length, width, height = dims\n            position = (0, 0, 0)\n            if self._is_valid_placement(position, (length, width, height), truck_type, truck['occupied_volumes']):\n                score = self._evaluate_placement(position, (length, width, height), truck_type, truck['occupied_volumes'])\n                if score > best_score:\n                  best_score = score\n                  best_x = 0\n                  best_y = 0\n                  best_z = 0\n                  best_orientation = orientation_id\n        \n        return -1, best_x, best_y, best_z, best_orientation, best_score",
          "objective": 24.5,
          "other_inf": null,
          "class_name": "Algorithm"
     }
]