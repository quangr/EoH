{
     "algorithm": "Focuses on minimizing wasted space by prioritizing the item type that fits best within the container's remaining volume, combined with a slight preference for items on the floor to improve stability.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Focuses on minimizing wasted space by prioritizing the item type that fits best within the container's remaining volume, combined with a slight preference for items on the floor to improve stability.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        item_index = self._select_item_to_place(unplaced_items, trucks_in_use, truck_type)\n        if item_index is None:\n            return None, None, None, None, None, None\n\n        selected_item = unplaced_items[item_index]\n        truck_index, x, y, z, orientation = self._find_best_placement_for_item(\n            selected_item, trucks_in_use, truck_type\n        )\n\n        if truck_index is None:\n            truck_index, x, y, z, orientation = self._create_new_truck_for_item(\n                selected_item, truck_type\n            )\n            if truck_index is None:\n                return None, None, None, None, None, None\n\n        return truck_index, item_index, x, y, z, orientation\n\n    def _select_item_to_place(self, unplaced_items, trucks_in_use, truck_type):\n        eligible_items = [\n            i for i, item in enumerate(unplaced_items) if item['quantity'] > 0\n        ]\n        if not eligible_items:\n            return None\n\n        best_fit_item = None\n        best_fit_score = -1.0\n\n        for item_index in eligible_items:\n            item = unplaced_items[item_index]\n            \n            for truck in trucks_in_use:\n                if self._check_separation_compatibility(item, truck):\n                    remaining_volume = self._calculate_remaining_volume(truck, truck_type)\n                    item_volume = item['length'] * item['width'] * item['height']\n                    fit_score = item_volume / remaining_volume if remaining_volume > 0 else 0\n                    \n                    if fit_score > best_fit_score:\n                        best_fit_score = fit_score\n                        best_fit_item = item_index\n\n        if best_fit_item is None and eligible_items:\n            best_fit_item = eligible_items[0]\n\n        return best_fit_item\n\n    def _calculate_remaining_volume(self, truck, truck_type):\n        cl, cw, ch = truck_type\n        occupied_volume = 0.0\n        for item in truck['occupied_volumes']:\n            occupied_volume += item['length'] * item['width'] * item['height']\n        return (cl * cw * ch) - occupied_volume\n\n    def _find_best_placement_for_item(self, item, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_placement_score = -1.0\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation, placement_score = self._find_best_position_in_truck(\n                item, truck, truck_type\n            )\n            if x is not None and placement_score > best_placement_score:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_placement_score = placement_score\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_placement_score = -1.0\n\n        for orientation, dims in self._get_orientations(item):\n            x, y, z, placement_score = self._find_valid_position_with_placement_score(\n                dims, truck, truck_type\n            )\n\n            if x is not None and placement_score > best_placement_score:\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_placement_score = placement_score\n\n        return best_x, best_y, best_z, best_orientation, best_placement_score\n\n    def _find_valid_position_with_placement_score(self, dims, truck, truck_type):\n        cl, cw, ch = truck_type\n        occupied_volumes = truck['occupied_volumes']\n\n        potential_positions = []\n        for placed_item in occupied_volumes:\n            px = placed_item['x'] + placed_item['length']\n            py = placed_item['y'] + placed_item['width']\n            pz = placed_item['z'] + placed_item['height']\n            potential_positions.extend([\n                (px, placed_item['y'], placed_item['z']),\n                (placed_item['x'], py, placed_item['z']),\n                (placed_item['x'], placed_item['y'], pz),\n            ])\n        potential_positions.append((0, 0, 0))\n        \n        valid_positions_with_score = []\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), dims, truck_type, occupied_volumes):\n                placement_score = self._calculate_placement_score(\n                    (x, y, z), dims, truck, truck_type\n                )\n                valid_positions_with_score.append((x, y, z, placement_score))\n\n        if not valid_positions_with_score:\n            return None, None, None, -1.0\n\n        return max(valid_positions_with_score, key=lambda p: p[3])\n\n    def _create_new_truck_for_item(self, item, truck_type):\n        x, y, z, orientation, placement_score = self._find_best_position_new_truck(item, truck_type)\n        if x is not None:\n            return -1, x, y, z, orientation\n        return None, None, None, None\n\n    def _find_best_position_new_truck(self, item, truck_type):\n        best_orientation = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_placement_score = -1.0\n\n        for orientation, dims in self._get_orientations(item):\n            if self._is_valid_placement((0, 0, 0), dims, truck_type, []):\n                placement_score = self._calculate_placement_score(\n                    (0, 0, 0), dims, {'occupied_volumes': []}, truck_type\n                )\n\n                if placement_score > best_placement_score:\n                    best_placement_score = placement_score\n                    best_orientation = orientation\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n\n        if best_orientation is not None:\n            return best_x, best_y, best_z, best_orientation, best_placement_score\n        return None, None, None, None, -1.0\n\n    def _calculate_placement_score(self, position, dimensions, truck, truck_type):\n        x, y, z = position\n        l, w, h = dimensions\n        cl, cw, ch = truck_type\n\n        volume_utilization = (l * w * h) / (cl * cw * ch)\n        height_ratio = (z + h) / ch\n        \n        stability_factor = 1.0 if z == 0 else 0.0\n\n        return volume_utilization * 0.6 + (1 - height_ratio) * 0.1 + stability_factor * 0.3",
     "objective": 22.8,
     "other_inf": null,
     "class_name": "Algorithm"
}