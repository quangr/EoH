{
     "algorithm": "Selects items based on a weighted score of volume utilization and remaining quantity; places them using a best-fit heuristic that prioritizes stability and minimizes height usage.",
     "code": "import numpy as np\n\nclass Algorithm(BaseAlgorithm):\n    # {Selects items based on a weighted score of volume utilization and remaining quantity; places them using a best-fit heuristic that prioritizes stability and minimizes height usage.}\n    def place_item(self, unplaced_items, trucks_in_use, truck_type):\n        selected_item_index = self._select_item(unplaced_items)\n        if selected_item_index is None:\n            return None, None, None, None, None, None\n\n        selected_item = unplaced_items[selected_item_index]\n\n        best_truck_index, best_x, best_y, best_z, best_orientation = self._find_best_placement(\n            selected_item, trucks_in_use, truck_type\n        )\n\n        if best_truck_index is None:\n            best_truck_index, best_x, best_y, best_z, best_orientation = self._create_new_truck_and_place_item(\n                selected_item, truck_type\n            )\n            if best_truck_index is None:\n                return None, None, None, None, None, None\n\n        return best_truck_index, selected_item_index, best_x, best_y, best_z, best_orientation\n\n    def _select_item(self, unplaced_items):\n        eligible_items = [\n            i for i, item in enumerate(unplaced_items) if item['quantity'] > 0\n        ]\n        if not eligible_items:\n            return None\n\n        return max(\n            eligible_items,\n            key=lambda i: (\n                unplaced_items[i]['length'] * unplaced_items[i]['width'] * unplaced_items[i]['height'] * unplaced_items[i]['quantity']\n            ),\n        )\n\n    def _find_best_placement(self, item, trucks_in_use, truck_type):\n        best_truck_index = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = float('-inf')\n\n        for truck_index, truck in enumerate(trucks_in_use):\n            if not self._check_separation_compatibility(item, truck):\n                continue\n\n            x, y, z, orientation, score = self._find_best_position_in_truck(\n                item, truck, truck_type\n            )\n\n            if x is not None and score > best_score:\n                best_truck_index = truck_index\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_score = score\n\n        return best_truck_index, best_x, best_y, best_z, best_orientation\n\n    def _find_best_position_in_truck(self, item, truck, truck_type):\n        best_x = None\n        best_y = None\n        best_z = None\n        best_orientation = None\n        best_score = float('-inf')\n\n        for orientation, dims in self._get_orientations(item):\n            x, y, z, score = self._find_valid_position_with_score(\n                dims, truck, truck_type\n            )\n\n            if x is not None and score > best_score:\n                best_x = x\n                best_y = y\n                best_z = z\n                best_orientation = orientation\n                best_score = score\n\n        return best_x, best_y, best_z, best_orientation, best_score\n\n    def _find_valid_position_with_score(self, dims, truck, truck_type):\n        epsilon = self.epsilon\n        cl, cw, ch = truck_type\n\n        if not truck['occupied_volumes']:\n            if self._is_valid_placement((0, 0, 0), dims, truck_type, truck['occupied_volumes']):\n                score = self._calculate_placement_score((0,0,0),dims, truck, truck_type)\n                return 0, 0, 0, score\n\n        potential_positions = []\n\n        for placed_item in truck['occupied_volumes']:\n            px = placed_item['x'] + placed_item['length']\n            py = placed_item['y'] + placed_item['width']\n            pz = placed_item['z'] + placed_item['height']\n\n            if px + dims[0] <= cl + epsilon:\n                potential_positions.append((px, placed_item['y'], placed_item['z']))\n\n            if py + dims[1] <= cw + epsilon:\n                potential_positions.append((placed_item['x'], py, placed_item['z']))\n\n            if pz + dims[2] <= ch + epsilon:\n                potential_positions.append((placed_item['x'], placed_item['y'], pz))\n        potential_positions.append((0, 0, 0))\n\n        valid_positions_with_score = []\n        for x, y, z in potential_positions:\n            if self._is_valid_placement((x, y, z), dims, truck_type, truck['occupied_volumes']):\n                score = self._calculate_placement_score((x,y,z), dims, truck, truck_type)\n                valid_positions_with_score.append((x, y, z, score))\n\n        if not valid_positions_with_score:\n            return None, None, None, None\n\n        return max(valid_positions_with_score, key=lambda p: p[3])\n\n    def _create_new_truck_and_place_item(self, item, truck_type):\n        x, y, z, orientation, score = self._find_valid_position_new_truck(item, truck_type)\n        if x is not None:\n            return -1, x, y, z, orientation\n        return None, None, None, None, None\n\n    def _find_valid_position_new_truck(self, item, truck_type):\n        best_orientation = None\n        best_x = None\n        best_y = None\n        best_z = None\n        best_score = float('-inf')\n        for orientation, dims in self._get_orientations(item):\n            if self._is_valid_placement((0, 0, 0), dims, truck_type, []):\n                score = self._calculate_placement_score((0,0,0), dims, {'occupied_volumes':[]}, truck_type)\n\n                if score > best_score:\n                    best_score = score\n                    best_orientation = orientation\n                    best_x = 0\n                    best_y = 0\n                    best_z = 0\n        if best_orientation is not None:\n            return best_x, best_y, best_z, best_orientation, best_score\n        return None, None, None, None, None\n\n    def _calculate_placement_score(self, position, dimensions, truck, truck_type):\n        x, y, z = position\n        l, w, h = dimensions\n        cl, cw, ch = truck_type\n\n        stability_factor = 1.0\n        if z > self.epsilon:\n            support_area = 0.0\n            for placed_item in truck['occupied_volumes']:\n                placed_item_pos = (placed_item['x'], placed_item['y'], placed_item['z'])\n                placed_item_dims = (placed_item['length'], placed_item['width'], placed_item['height'])\n                if abs((placed_item_pos[2] + placed_item_dims[2]) - z) < self.epsilon:\n                    overlap_x = max(0, min(x + l, placed_item_pos[0] + placed_item_dims[0]) - max(x, placed_item_pos[0]))\n                    overlap_y = max(0, min(y + w, placed_item_pos[1] + placed_item_dims[1]) - max(y, placed_item_pos[1]))\n                    support_area += overlap_x * overlap_y\n            stability_factor = support_area / (l * w)\n\n        height_utilization = 1 - (z + h) / ch  # Prefer lower placements (minimizing height)\n        volume_utilization = (l * w * h) / (cl * cw * ch)\n\n        return  stability_factor * 0.1 + height_utilization*0.4  + volume_utilization * 0.5",
     "objective": 23.2,
     "other_inf": null,
     "class_name": "Algorithm"
}